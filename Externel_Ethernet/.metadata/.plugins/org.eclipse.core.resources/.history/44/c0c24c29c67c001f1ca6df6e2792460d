#include "w5500_driver.h"



SPI_HandleTypeDef hspi1;

/*Initialize CS Pin*/

void wizchip_cs_pin_init(void)
{
	/*Enable clock for GPIOA*/
	RCC->AHB1ENR |=(1U <<0);

	/*Set PA4 as output pin*/
	GPIOA->MODER |=(1U<<8);
	GPIOA->MODER &=~(1U<<9);

}
/*Select W5500 by pulling CS pin low*/
void wizchip_cs_select(void)
{
	GPIOA->ODR &=~(1U<<4);
}

/*Unselect W5500 by pulling CS pin high*/
void wizchip_cs_deselect(void)
{
	GPIOA->ODR |= (1U<<4);
}

/*Spi read multiple bytes*/
void wizchip_read_burst(uint8_t *buffer,uint16_t length)
{
	 spi_receive(&hspi1,buffer, length, MAX_DELAY);

}

/*Spi read single byte*/

uint8_t wizchip_read_byte(void)
{
	uint8_t byte;
	wizchip_read_burst(&byte,sizeof(byte));
	return byte;
}
/*Spi write multiple bytes*/
uint8_t wizchip_write_burst(uint8_t *buffer,uint16_t length)
{
	 spi_transmit(&hspi1,buffer, length, MAX_DELAY);

}

/*Spi write single byte*/
void wizchip_write_byte(uint8_t byte)
{
	wizchip_write_burst(&byte,sizeof(byte));
}
 void w5500_spi_init(void)
{
	hspi1.Instance = SPI1;
	hspi1.Init.Mode = SPI_MODE_MASTER;
	hspi1.Init.Direction =  SPI_DIRECTION_2LINES;
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
	hspi1.Init.CLKPolarity =  SPI_POLARITY_LOW;
	hspi1.Init.CLKPhase =  SPI_PHASE_1EDGE;
	hspi1.Init.NSS =  SPI_NSS_SOFT;
	hspi1.Init.BuadRatePrescaler = SPI_BAUDRATEPRESCALER_2;
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;

	/*Initialize spi*/
	spi_init(&hspi1);

}


 void w5500_init(void)
 {


	 //Register callback functions
	 reg_wizchip_cs_cbfunc(wizchip_cs_select,wizchip_cs_deselect);
	 reg_wizchip_spi_cbfunc(wizchip_read_byte,wizchip_write_byte);
	 reg_wizchip_spiburst_cbfunc(wizchip_read_burst,wizchip_write_burst);
 }



