
10_w5500_http_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007614  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00010f64  080077b4  080077b4  000087b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018718  08018718  0001a0dc  2**0
                  CONTENTS
  4 .ARM          00000008  08018718  08018718  00019718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018720  08018720  0001a0dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018720  08018720  00019720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018724  08018724  00019724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08018728  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001478  200000dc  08018804  0001a0dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001554  08018804  0001a554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a0dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066d5  00000000  00000000  0001a10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e30  00000000  00000000  000207e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  00022618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000544  00000000  00000000  00022d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000115a0  00000000  00000000  00023294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e8c  00000000  00000000  00034834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b1ef  00000000  00000000  0003e6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000998af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002664  00000000  00000000  000998f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0009bf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000dc 	.word	0x200000dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800779c 	.word	0x0800779c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e0 	.word	0x200000e0
 80001dc:	0800779c 	.word	0x0800779c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <pa1_adc_init>:
#define CR2_CONT	 (1U<<1)
#define CR2_SWSTART	  (1U<<30)
#define SR_EOC		  (1U<<1)

void pa1_adc_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/****Configure the ADC GPIO Pin**/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80002b4:	4b14      	ldr	r3, [pc, #80]	@ (8000308 <pa1_adc_init+0x58>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	4a13      	ldr	r2, [pc, #76]	@ (8000308 <pa1_adc_init+0x58>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA1 mode to analog mode*/
	GPIOA->MODER |=(1U<<2);
 80002c0:	4b12      	ldr	r3, [pc, #72]	@ (800030c <pa1_adc_init+0x5c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a11      	ldr	r2, [pc, #68]	@ (800030c <pa1_adc_init+0x5c>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 80002cc:	4b0f      	ldr	r3, [pc, #60]	@ (800030c <pa1_adc_init+0x5c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0e      	ldr	r2, [pc, #56]	@ (800030c <pa1_adc_init+0x5c>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6013      	str	r3, [r2, #0]

	/****Configure the ADC Module**/
	/*Enable clock access to the ADC module*/
	RCC->APB2ENR |=ADC1EN;
 80002d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <pa1_adc_init+0x58>)
 80002da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000308 <pa1_adc_init+0x58>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002e2:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Set conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 80002e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000310 <pa1_adc_init+0x60>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Set conversion sequence length*/
	ADC1->SQR1 = AD_SEQ_LEN_1;
 80002ea:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <pa1_adc_init+0x60>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |=CR2_ADCON;
 80002f0:	4b07      	ldr	r3, [pc, #28]	@ (8000310 <pa1_adc_init+0x60>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a06      	ldr	r2, [pc, #24]	@ (8000310 <pa1_adc_init+0x60>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6093      	str	r3, [r2, #8]

}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40023800 	.word	0x40023800
 800030c:	40020000 	.word	0x40020000
 8000310:	40012000 	.word	0x40012000

08000314 <start_conversion>:


void start_conversion(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	/*Enable continuous conversion*/
	ADC1->CR2 |=CR2_CONT;
 8000318:	4b08      	ldr	r3, [pc, #32]	@ (800033c <start_conversion+0x28>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a07      	ldr	r2, [pc, #28]	@ (800033c <start_conversion+0x28>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6093      	str	r3, [r2, #8]

	/*Start ADC conversion*/
	ADC1->CR2 |=CR2_SWSTART;
 8000324:	4b05      	ldr	r3, [pc, #20]	@ (800033c <start_conversion+0x28>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	4a04      	ldr	r2, [pc, #16]	@ (800033c <start_conversion+0x28>)
 800032a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800032e:	6093      	str	r3, [r2, #8]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40012000 	.word	0x40012000

08000340 <led_init>:
#define LED_PIN		PIN5
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13

void led_init(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000344:	4b0b      	ldr	r3, [pc, #44]	@ (8000374 <led_init+0x34>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000348:	4a0a      	ldr	r2, [pc, #40]	@ (8000374 <led_init+0x34>)
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5 mode to output mode*/
	GPIOA->MODER |=(1U<<10);
 8000350:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <led_init+0x38>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a08      	ldr	r2, [pc, #32]	@ (8000378 <led_init+0x38>)
 8000356:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800035a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 800035c:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <led_init+0x38>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a05      	ldr	r2, [pc, #20]	@ (8000378 <led_init+0x38>)
 8000362:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000366:	6013      	str	r3, [r2, #0]
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40023800 	.word	0x40023800
 8000378:	40020000 	.word	0x40020000

0800037c <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 8000380:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <button_init+0x34>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000384:	4a0a      	ldr	r2, [pc, #40]	@ (80003b0 <button_init+0x34>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 800038c:	4b09      	ldr	r3, [pc, #36]	@ (80003b4 <button_init+0x38>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a08      	ldr	r2, [pc, #32]	@ (80003b4 <button_init+0x38>)
 8000392:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000396:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 8000398:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <button_init+0x38>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a05      	ldr	r2, [pc, #20]	@ (80003b4 <button_init+0x38>)
 800039e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80003a2:	6013      	str	r3, [r2, #0]

}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40023800 	.word	0x40023800
 80003b4:	40020800 	.word	0x40020800

080003b8 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 80003bc:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <fpu_enable+0x50>)
 80003be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003c2:	4a11      	ldr	r2, [pc, #68]	@ (8000408 <fpu_enable+0x50>)
 80003c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<21);
 80003cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000408 <fpu_enable+0x50>)
 80003ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003d2:	4a0d      	ldr	r2, [pc, #52]	@ (8000408 <fpu_enable+0x50>)
 80003d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<22);
 80003dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000408 <fpu_enable+0x50>)
 80003de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003e2:	4a09      	ldr	r2, [pc, #36]	@ (8000408 <fpu_enable+0x50>)
 80003e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<23);
 80003ec:	4b06      	ldr	r3, [pc, #24]	@ (8000408 <fpu_enable+0x50>)
 80003ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003f2:	4a05      	ldr	r2, [pc, #20]	@ (8000408 <fpu_enable+0x50>)
 80003f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80003f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	e000ed00 	.word	0xe000ed00

0800040c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000410:	f3bf 8f4f 	dsb	sy
}
 8000414:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000416:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <__NVIC_SystemReset+0x24>)
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800041e:	4904      	ldr	r1, [pc, #16]	@ (8000430 <__NVIC_SystemReset+0x24>)
 8000420:	4b04      	ldr	r3, [pc, #16]	@ (8000434 <__NVIC_SystemReset+0x28>)
 8000422:	4313      	orrs	r3, r2
 8000424:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000426:	f3bf 8f4f 	dsb	sy
}
 800042a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800042c:	bf00      	nop
 800042e:	e7fd      	b.n	800042c <__NVIC_SystemReset+0x20>
 8000430:	e000ed00 	.word	0xe000ed00
 8000434:	05fa0004 	.word	0x05fa0004

08000438 <check_cable_connection>:
uint8_t sockets_to_use[] = {2,3,4,5,6,7};
uint8_t RX_BUFF[1024];
uint8_t TX_BUFF[1024];

void check_cable_connection(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
	uint8_t cable_status;

	do{

		printf("\r\nGetting cable status...\r\n");
 800043e:	480e      	ldr	r0, [pc, #56]	@ (8000478 <check_cable_connection+0x40>)
 8000440:	f006 f908 	bl	8006654 <puts>
		ctlwizchip(CW_GET_PHYLINK,(void *)&cable_status);
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	4619      	mov	r1, r3
 8000448:	200f      	movs	r0, #15
 800044a:	f005 fb47 	bl	8005adc <ctlwizchip>

		if(cable_status ==  PHY_LINK_OFF)
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d106      	bne.n	8000462 <check_cable_connection+0x2a>
		{
			printf("No cable detected ...\r\n");
 8000454:	4809      	ldr	r0, [pc, #36]	@ (800047c <check_cable_connection+0x44>)
 8000456:	f006 f8fd 	bl	8006654 <puts>
			delay(1000);
 800045a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800045e:	f000 fdd1 	bl	8001004 <delay>
		}

	}while(cable_status ==  PHY_LINK_OFF);
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d0ea      	beq.n	800043e <check_cable_connection+0x6>

	printf("Cable connected...\r\n");
 8000468:	4805      	ldr	r0, [pc, #20]	@ (8000480 <check_cable_connection+0x48>)
 800046a:	f006 f8f3 	bl	8006654 <puts>

}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	080077b4 	.word	0x080077b4
 800047c:	080077d0 	.word	0x080077d0
 8000480:	080077e8 	.word	0x080077e8

08000484 <display_phy_config>:

void display_phy_config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_conf;
	ctlwizchip(CW_GET_PHYCONF,(void*)&phy_conf);
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	4619      	mov	r1, r3
 800048e:	200b      	movs	r0, #11
 8000490:	f005 fb24 	bl	8005adc <ctlwizchip>

	if(phy_conf.by == PHY_CONFBY_HW)
 8000494:	793b      	ldrb	r3, [r7, #4]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d103      	bne.n	80004a2 <display_phy_config+0x1e>
	{
		printf("\n\rPHY is currently configured by hardware.");
 800049a:	4816      	ldr	r0, [pc, #88]	@ (80004f4 <display_phy_config+0x70>)
 800049c:	f006 f872 	bl	8006584 <iprintf>
 80004a0:	e002      	b.n	80004a8 <display_phy_config+0x24>
	}
	else{
		printf("\n\rPHY is currently configured by software.");
 80004a2:	4815      	ldr	r0, [pc, #84]	@ (80004f8 <display_phy_config+0x74>)
 80004a4:	f006 f86e 	bl	8006584 <iprintf>

	}
	printf("\r\nSTATUS: Autonegotiation %s",(phy_conf.mode == PHY_MODE_AUTONEGO) ? "Enabled" : "Disabled");
 80004a8:	797b      	ldrb	r3, [r7, #5]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d101      	bne.n	80004b2 <display_phy_config+0x2e>
 80004ae:	4b13      	ldr	r3, [pc, #76]	@ (80004fc <display_phy_config+0x78>)
 80004b0:	e000      	b.n	80004b4 <display_phy_config+0x30>
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <display_phy_config+0x7c>)
 80004b4:	4619      	mov	r1, r3
 80004b6:	4813      	ldr	r0, [pc, #76]	@ (8000504 <display_phy_config+0x80>)
 80004b8:	f006 f864 	bl	8006584 <iprintf>
	printf("\r\nSTATUS: Duplex Mode: %s",(phy_conf.duplex == PHY_DUPLEX_FULL) ? "Full Duplex" : "Half Duplex");
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d101      	bne.n	80004c6 <display_phy_config+0x42>
 80004c2:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <display_phy_config+0x84>)
 80004c4:	e000      	b.n	80004c8 <display_phy_config+0x44>
 80004c6:	4b11      	ldr	r3, [pc, #68]	@ (800050c <display_phy_config+0x88>)
 80004c8:	4619      	mov	r1, r3
 80004ca:	4811      	ldr	r0, [pc, #68]	@ (8000510 <display_phy_config+0x8c>)
 80004cc:	f006 f85a 	bl	8006584 <iprintf>
	printf("\r\nSTATUS: Speed: %dMbps",(phy_conf.speed == PHY_SPEED_10) ? 10 : 100);
 80004d0:	79bb      	ldrb	r3, [r7, #6]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d101      	bne.n	80004da <display_phy_config+0x56>
 80004d6:	230a      	movs	r3, #10
 80004d8:	e000      	b.n	80004dc <display_phy_config+0x58>
 80004da:	2364      	movs	r3, #100	@ 0x64
 80004dc:	4619      	mov	r1, r3
 80004de:	480d      	ldr	r0, [pc, #52]	@ (8000514 <display_phy_config+0x90>)
 80004e0:	f006 f850 	bl	8006584 <iprintf>
  printf("\r\n...");
 80004e4:	480c      	ldr	r0, [pc, #48]	@ (8000518 <display_phy_config+0x94>)
 80004e6:	f006 f84d 	bl	8006584 <iprintf>

}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	080077fc 	.word	0x080077fc
 80004f8:	08007828 	.word	0x08007828
 80004fc:	08007854 	.word	0x08007854
 8000500:	0800785c 	.word	0x0800785c
 8000504:	08007868 	.word	0x08007868
 8000508:	08007888 	.word	0x08007888
 800050c:	08007894 	.word	0x08007894
 8000510:	080078a0 	.word	0x080078a0
 8000514:	080078bc 	.word	0x080078bc
 8000518:	080078d4 	.word	0x080078d4

0800051c <main>:

int main()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	/*Enable FPU*/
	fpu_enable();
 8000522:	f7ff ff49 	bl	80003b8 <fpu_enable>

	/*Initialize timebase*/
	timebase_init();
 8000526:	f000 fdaf 	bl	8001088 <timebase_init>

	/*Initialize debug UART*/
	debug_uart_init();
 800052a:	f000 fde3 	bl	80010f4 <debug_uart_init>



	/*Initialize LED*/
	led_init();
 800052e:	f7ff ff07 	bl	8000340 <led_init>

	/*Initialize Push button*/
	button_init();
 8000532:	f7ff ff23 	bl	800037c <button_init>

	/*Initialize ADC*/
	pa1_adc_init();
 8000536:	f7ff febb 	bl	80002b0 <pa1_adc_init>

	/*Start conversion*/
	start_conversion();
 800053a:	f7ff feeb 	bl	8000314 <start_conversion>

    wizchip_cs_pin_init();
 800053e:	f000 fe87 	bl	8001250 <wizchip_cs_pin_init>
    w5500_spi_init();
 8000542:	f000 ff07 	bl	8001354 <w5500_spi_init>
    w5500_init();
 8000546:	f000 ff31 	bl	80013ac <w5500_init>


    current_phy_conf.by =  PHY_CONFBY_SW;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <main+0xac>)
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
    current_phy_conf.duplex =  PHY_DUPLEX_FULL;
 8000550:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <main+0xac>)
 8000552:	2201      	movs	r2, #1
 8000554:	70da      	strb	r2, [r3, #3]
    current_phy_conf.mode   =  PHY_MODE_AUTONEGO;
 8000556:	4b1c      	ldr	r3, [pc, #112]	@ (80005c8 <main+0xac>)
 8000558:	2201      	movs	r2, #1
 800055a:	705a      	strb	r2, [r3, #1]
    current_phy_conf.speed =  PHY_SPEED_10;
 800055c:	4b1a      	ldr	r3, [pc, #104]	@ (80005c8 <main+0xac>)
 800055e:	2200      	movs	r2, #0
 8000560:	709a      	strb	r2, [r3, #2]

    ctlwizchip(CW_SET_PHYCONF,(void*)&current_phy_conf);
 8000562:	4919      	ldr	r1, [pc, #100]	@ (80005c8 <main+0xac>)
 8000564:	200a      	movs	r0, #10
 8000566:	f005 fab9 	bl	8005adc <ctlwizchip>

    check_cable_connection();
 800056a:	f7ff ff65 	bl	8000438 <check_cable_connection>

    display_phy_config();
 800056e:	f7ff ff89 	bl	8000484 <display_phy_config>

    /*Initialize http server */
    httpServer_init(TX_BUFF,RX_BUFF,NUM_OF_SOCKETS, sockets_to_use);
 8000572:	4b16      	ldr	r3, [pc, #88]	@ (80005cc <main+0xb0>)
 8000574:	2206      	movs	r2, #6
 8000576:	4916      	ldr	r1, [pc, #88]	@ (80005d0 <main+0xb4>)
 8000578:	4816      	ldr	r0, [pc, #88]	@ (80005d4 <main+0xb8>)
 800057a:	f002 ff79 	bl	8003470 <httpServer_init>

    /*Register httpserver callbacks*/

    reg_httpServer_cbfunc(NVIC_SystemReset,NULL);
 800057e:	2100      	movs	r1, #0
 8000580:	4815      	ldr	r0, [pc, #84]	@ (80005d8 <main+0xbc>)
 8000582:	f002 ff91 	bl	80034a8 <reg_httpServer_cbfunc>

    /*Register web content for the server*/
    reg_httpServer_webContent((uint8_t *)"index.html",(uint8_t *)SYS_ON);
 8000586:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <main+0xc0>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4619      	mov	r1, r3
 800058c:	4814      	ldr	r0, [pc, #80]	@ (80005e0 <main+0xc4>)
 800058e:	f003 fe5d 	bl	800424c <reg_httpServer_webContent>
    reg_httpServer_webContent((uint8_t *)"sys_off.html",(uint8_t *)SYS_OFF);
 8000592:	4b14      	ldr	r3, [pc, #80]	@ (80005e4 <main+0xc8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4619      	mov	r1, r3
 8000598:	4813      	ldr	r0, [pc, #76]	@ (80005e8 <main+0xcc>)
 800059a:	f003 fe57 	bl	800424c <reg_httpServer_webContent>
    reg_httpServer_webContent((uint8_t *)"status.html",(uint8_t *)STATUS);
 800059e:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <main+0xd0>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4619      	mov	r1, r3
 80005a4:	4812      	ldr	r0, [pc, #72]	@ (80005f0 <main+0xd4>)
 80005a6:	f003 fe51 	bl	800424c <reg_httpServer_webContent>



	while(1)
	{
        for(int i = 0; i < NUM_OF_SOCKETS;i++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	e007      	b.n	80005c0 <main+0xa4>
        {
        	httpServer_run(i);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 ff93 	bl	80034e0 <httpServer_run>
        for(int i = 0; i < NUM_OF_SOCKETS;i++)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3301      	adds	r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b05      	cmp	r3, #5
 80005c4:	ddf4      	ble.n	80005b0 <main+0x94>
 80005c6:	e7f0      	b.n	80005aa <main+0x8e>
 80005c8:	200000f8 	.word	0x200000f8
 80005cc:	20000000 	.word	0x20000000
 80005d0:	200000fc 	.word	0x200000fc
 80005d4:	200004fc 	.word	0x200004fc
 80005d8:	0800040d 	.word	0x0800040d
 80005dc:	20000028 	.word	0x20000028
 80005e0:	080078dc 	.word	0x080078dc
 80005e4:	20000024 	.word	0x20000024
 80005e8:	080078e8 	.word	0x080078e8
 80005ec:	20000020 	.word	0x20000020
 80005f0:	080078f8 	.word	0x080078f8

080005f4 <spi1_gpio_init>:
#include "stddef.h"

#define GPIOAEN		(1U<<0)
#define SPI1EN		(1U<<12)
void spi1_gpio_init(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 80005f8:	4b3e      	ldr	r3, [pc, #248]	@ (80006f4 <spi1_gpio_init+0x100>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fc:	4a3d      	ldr	r2, [pc, #244]	@ (80006f4 <spi1_gpio_init+0x100>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5,PA6,PA7 mode to alternate function mode*/

	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
 8000604:	4b3c      	ldr	r3, [pc, #240]	@ (80006f8 <spi1_gpio_init+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a3b      	ldr	r2, [pc, #236]	@ (80006f8 <spi1_gpio_init+0x104>)
 800060a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800060e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 8000610:	4b39      	ldr	r3, [pc, #228]	@ (80006f8 <spi1_gpio_init+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a38      	ldr	r2, [pc, #224]	@ (80006f8 <spi1_gpio_init+0x104>)
 8000616:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800061a:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
 800061c:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <spi1_gpio_init+0x104>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a35      	ldr	r2, [pc, #212]	@ (80006f8 <spi1_gpio_init+0x104>)
 8000622:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000626:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 8000628:	4b33      	ldr	r3, [pc, #204]	@ (80006f8 <spi1_gpio_init+0x104>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a32      	ldr	r2, [pc, #200]	@ (80006f8 <spi1_gpio_init+0x104>)
 800062e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000632:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
 8000634:	4b30      	ldr	r3, [pc, #192]	@ (80006f8 <spi1_gpio_init+0x104>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a2f      	ldr	r2, [pc, #188]	@ (80006f8 <spi1_gpio_init+0x104>)
 800063a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800063e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 8000640:	4b2d      	ldr	r3, [pc, #180]	@ (80006f8 <spi1_gpio_init+0x104>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a2c      	ldr	r2, [pc, #176]	@ (80006f8 <spi1_gpio_init+0x104>)
 8000646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800064a:	6013      	str	r3, [r2, #0]

	/*Set PA5,PA6,PA7 alternate function type to SPI1*/

	/*PA5*/
	GPIOA->AFR[0] |=(1U<<20);
 800064c:	4b2a      	ldr	r3, [pc, #168]	@ (80006f8 <spi1_gpio_init+0x104>)
 800064e:	6a1b      	ldr	r3, [r3, #32]
 8000650:	4a29      	ldr	r2, [pc, #164]	@ (80006f8 <spi1_gpio_init+0x104>)
 8000652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000656:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<21);
 8000658:	4b27      	ldr	r3, [pc, #156]	@ (80006f8 <spi1_gpio_init+0x104>)
 800065a:	6a1b      	ldr	r3, [r3, #32]
 800065c:	4a26      	ldr	r2, [pc, #152]	@ (80006f8 <spi1_gpio_init+0x104>)
 800065e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000662:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<22);
 8000664:	4b24      	ldr	r3, [pc, #144]	@ (80006f8 <spi1_gpio_init+0x104>)
 8000666:	6a1b      	ldr	r3, [r3, #32]
 8000668:	4a23      	ldr	r2, [pc, #140]	@ (80006f8 <spi1_gpio_init+0x104>)
 800066a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800066e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<23);
 8000670:	4b21      	ldr	r3, [pc, #132]	@ (80006f8 <spi1_gpio_init+0x104>)
 8000672:	6a1b      	ldr	r3, [r3, #32]
 8000674:	4a20      	ldr	r2, [pc, #128]	@ (80006f8 <spi1_gpio_init+0x104>)
 8000676:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800067a:	6213      	str	r3, [r2, #32]

	/*PA6*/
	GPIOA->AFR[0] |=(1U<<24);
 800067c:	4b1e      	ldr	r3, [pc, #120]	@ (80006f8 <spi1_gpio_init+0x104>)
 800067e:	6a1b      	ldr	r3, [r3, #32]
 8000680:	4a1d      	ldr	r2, [pc, #116]	@ (80006f8 <spi1_gpio_init+0x104>)
 8000682:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000686:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<25);
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <spi1_gpio_init+0x104>)
 800068a:	6a1b      	ldr	r3, [r3, #32]
 800068c:	4a1a      	ldr	r2, [pc, #104]	@ (80006f8 <spi1_gpio_init+0x104>)
 800068e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000692:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<26);
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <spi1_gpio_init+0x104>)
 8000696:	6a1b      	ldr	r3, [r3, #32]
 8000698:	4a17      	ldr	r2, [pc, #92]	@ (80006f8 <spi1_gpio_init+0x104>)
 800069a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800069e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<27);
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <spi1_gpio_init+0x104>)
 80006a2:	6a1b      	ldr	r3, [r3, #32]
 80006a4:	4a14      	ldr	r2, [pc, #80]	@ (80006f8 <spi1_gpio_init+0x104>)
 80006a6:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80006aa:	6213      	str	r3, [r2, #32]

	/*PA7*/
	GPIOA->AFR[0] |=(1U<<28);
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <spi1_gpio_init+0x104>)
 80006ae:	6a1b      	ldr	r3, [r3, #32]
 80006b0:	4a11      	ldr	r2, [pc, #68]	@ (80006f8 <spi1_gpio_init+0x104>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<29);
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <spi1_gpio_init+0x104>)
 80006ba:	6a1b      	ldr	r3, [r3, #32]
 80006bc:	4a0e      	ldr	r2, [pc, #56]	@ (80006f8 <spi1_gpio_init+0x104>)
 80006be:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80006c2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<30);
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <spi1_gpio_init+0x104>)
 80006c6:	6a1b      	ldr	r3, [r3, #32]
 80006c8:	4a0b      	ldr	r2, [pc, #44]	@ (80006f8 <spi1_gpio_init+0x104>)
 80006ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80006ce:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<31);
 80006d0:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <spi1_gpio_init+0x104>)
 80006d2:	6a1b      	ldr	r3, [r3, #32]
 80006d4:	4a08      	ldr	r2, [pc, #32]	@ (80006f8 <spi1_gpio_init+0x104>)
 80006d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80006da:	6213      	str	r3, [r2, #32]

	/*Enable clock access to SPI1*/
	RCC->APB2ENR |=SPI1EN;
 80006dc:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <spi1_gpio_init+0x100>)
 80006de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006e0:	4a04      	ldr	r2, [pc, #16]	@ (80006f4 <spi1_gpio_init+0x100>)
 80006e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006e6:	6453      	str	r3, [r2, #68]	@ 0x44

}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020000 	.word	0x40020000

080006fc <spi_init>:

StatusTypeDef spi_init(SPI_HandleTypeDef *hspi)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	/*Check spi handle allocation*/
	if(hspi == NULL)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d101      	bne.n	800070e <spi_init+0x12>
	{
		return DEV_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e05a      	b.n	80007c4 <spi_init+0xc8>
	}

	/*Disable CRC calculation*/
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	629a      	str	r2, [r3, #40]	@ 0x28

	if(hspi->State == SPI_STATE_RESET)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800071a:	2b00      	cmp	r3, #0
 800071c:	d101      	bne.n	8000722 <spi_init+0x26>
	{
		spi1_gpio_init();
 800071e:	f7ff ff69 	bl	80005f4 <spi1_gpio_init>
	}

   hspi->State =  SPI_STATE_BUSY;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2202      	movs	r2, #2
 8000726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000738:	601a      	str	r2, [r3, #0]

   /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
   Communication speed, First bit and CRC calculation state */
   WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800074a:	431a      	orrs	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000754:	431a      	orrs	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	691b      	ldr	r3, [r3, #16]
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	431a      	orrs	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	431a      	orrs	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000772:	431a      	orrs	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	69db      	ldr	r3, [r3, #28]
 8000778:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800077c:	431a      	orrs	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6a1b      	ldr	r3, [r3, #32]
 8000782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000786:	ea42 0103 	orr.w	r1, r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800078e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	430a      	orrs	r2, r1
 8000798:	601a      	str	r2, [r3, #0]
                                   (hspi->Init.BuadRatePrescaler & SPI_CR1_BR_Msk) |
                                   (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                   (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

   /* Configure : NSS management, TI Mode */
   WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	0c1b      	lsrs	r3, r3, #16
 80007a0:	f003 0104 	and.w	r1, r3, #4
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007a8:	f003 0210 	and.w	r2, r3, #16
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	430a      	orrs	r2, r1
 80007b2:	605a      	str	r2, [r3, #4]

  hspi->ErrorCode =  SPI_ERROR_NONE;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->State =  SPI_STATE_READY;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2201      	movs	r2, #1
 80007be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   return DEV_OK;
 80007c2:	2300      	movs	r3, #0
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <spi_transmit>:




StatusTypeDef spi_transmit(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	4613      	mov	r3, r2
 80007da:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code;// = DEV_OK;
	uint16_t tx_xfer_cnt;


	tx_xfer_cnt  = size;
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	83fb      	strh	r3, [r7, #30]
	tickstart = get_tick();
 80007e0:	f000 fc2e 	bl	8001040 <get_tick>
 80007e4:	61b8      	str	r0, [r7, #24]



	if((p_data == NULL) || (size  == 0))
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <spi_transmit+0x26>
 80007ec:	88fb      	ldrh	r3, [r7, #6]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d101      	bne.n	80007f6 <spi_transmit+0x2a>
	{

		return DEV_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e106      	b.n	8000a04 <spi_transmit+0x238>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_TX;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2203      	movs	r2, #3
 80007fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2200      	movs	r2, #0
 8000802:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pTxBuffPtr = (uint8_t *)p_data;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  size;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	88fa      	ldrh	r2, [r7, #6]
 800080e:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  size;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	88fa      	ldrh	r2, [r7, #6]
 8000814:	865a      	strh	r2, [r3, #50]	@ 0x32


	hspi->pRxBuffPtr = (uint8_t *)NULL;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	2200      	movs	r2, #0
 800081a:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  0;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2200      	movs	r2, #0
 8000820:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  0;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2200      	movs	r2, #0
 8000826:	875a      	strh	r2, [r3, #58]	@ 0x3a


	/*Configure communication direction*/
	if(hspi->Init.Direction  ==  SPI_DIRECTION_1LINE)
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000830:	d10f      	bne.n	8000852 <spi_transmit+0x86>
	{
		CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000840:	601a      	str	r2, [r3, #0]

		/*Set 1 line TX*/
		SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIOE);
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000850:	601a      	str	r2, [r3, #0]

	}



	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085c:	2b40      	cmp	r3, #64	@ 0x40
 800085e:	d007      	beq.n	8000870 <spi_transmit+0xa4>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800086e:	601a      	str	r2, [r3, #0]
	}

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800087a:	2b40      	cmp	r3, #64	@ 0x40
 800087c:	d007      	beq.n	800088e <spi_transmit+0xc2>
	  {

			SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800088c:	601a      	str	r2, [r3, #0]

	  }

	/*Transmit data in 16 bit mode*/
	if(hspi->Init.DataSize ==  SPI_DATASIZE_16BIT)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000896:	d14e      	bne.n	8000936 <spi_transmit+0x16a>
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d002      	beq.n	80008a6 <spi_transmit+0xda>
 80008a0:	8bfb      	ldrh	r3, [r7, #30]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d141      	bne.n	800092a <spi_transmit+0x15e>
		{
			hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008aa:	881a      	ldrh	r2, [r3, #0]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr +=sizeof(uint16_t);
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b6:	1c9a      	adds	r2, r3, #2
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	3b01      	subs	r3, #1
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	865a      	strh	r2, [r3, #50]	@ 0x32
		}

		while(hspi->TxXferCount> 0)
 80008ca:	e02e      	b.n	800092a <spi_transmit+0x15e>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d012      	beq.n	8000900 <spi_transmit+0x134>
			{
				hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008de:	881a      	ldrh	r2, [r3, #0]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr +=sizeof(uint16_t);
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ea:	1c9a      	adds	r2, r3, #2
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	3b01      	subs	r3, #1
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	865a      	strh	r2, [r3, #50]	@ 0x32
 80008fe:	e014      	b.n	800092a <spi_transmit+0x15e>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8000900:	f000 fb9e 	bl	8001040 <get_tick>
 8000904:	4602      	mov	r2, r0
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	d803      	bhi.n	8000918 <spi_transmit+0x14c>
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000916:	d102      	bne.n	800091e <spi_transmit+0x152>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d105      	bne.n	800092a <spi_transmit+0x15e>
		         {
					hspi->State = SPI_STATE_READY;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2201      	movs	r2, #1
 8000922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return DEV_TIMEOUT;
 8000926:	2303      	movs	r3, #3
 8000928:	e06c      	b.n	8000a04 <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800092e:	b29b      	uxth	r3, r3
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1cb      	bne.n	80008cc <spi_transmit+0x100>
 8000934:	e051      	b.n	80009da <spi_transmit+0x20e>
	}


	else
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d002      	beq.n	8000944 <spi_transmit+0x178>
 800093e:	8bfb      	ldrh	r3, [r7, #30]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d145      	bne.n	80009d0 <spi_transmit+0x204>
		{
			*((__IO uint8_t *)&hspi->Instance->DR) =  *((const uint8_t *)hspi->pTxBuffPtr);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	330c      	adds	r3, #12
 800094e:	7812      	ldrb	r2, [r2, #0]
 8000950:	701a      	strb	r2, [r3, #0]
			hspi->pTxBuffPtr +=sizeof(uint8_t);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000960:	b29b      	uxth	r3, r3
 8000962:	3b01      	subs	r3, #1
 8000964:	b29a      	uxth	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	865a      	strh	r2, [r3, #50]	@ 0x32
		}
		while(hspi->TxXferCount> 0)
 800096a:	e031      	b.n	80009d0 <spi_transmit+0x204>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	2b00      	cmp	r3, #0
 8000978:	d013      	beq.n	80009a2 <spi_transmit+0x1d6>
			{
				*((__IO uint8_t *)&hspi->Instance->DR) = (*(const uint8_t *)hspi->pTxBuffPtr);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	330c      	adds	r3, #12
 8000984:	7812      	ldrb	r2, [r2, #0]
 8000986:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr +=sizeof(uint8_t);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000996:	b29b      	uxth	r3, r3
 8000998:	3b01      	subs	r3, #1
 800099a:	b29a      	uxth	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	865a      	strh	r2, [r3, #50]	@ 0x32
 80009a0:	e016      	b.n	80009d0 <spi_transmit+0x204>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 80009a2:	f000 fb4d 	bl	8001040 <get_tick>
 80009a6:	4602      	mov	r2, r0
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d803      	bhi.n	80009ba <spi_transmit+0x1ee>
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b8:	d102      	bne.n	80009c0 <spi_transmit+0x1f4>
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d107      	bne.n	80009d0 <spi_transmit+0x204>
		         {
					error_code = DEV_TIMEOUT;
 80009c0:	2303      	movs	r3, #3
 80009c2:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2201      	movs	r2, #1
 80009c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 80009cc:	7dfb      	ldrb	r3, [r7, #23]
 80009ce:	e019      	b.n	8000a04 <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d1c8      	bne.n	800096c <spi_transmit+0x1a0>
			}
		}

	}

	  __IO uint32_t tmpreg_ovr = 0x00U;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->DR;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->SR;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	613b      	str	r3, [r7, #16]

		hspi->State =  SPI_STATE_READY;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2201      	movs	r2, #1
 80009f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <spi_transmit+0x236>
	{
		return DEV_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <spi_transmit+0x238>
	}
	else
	{
		return DEV_OK;
 8000a02:	2300      	movs	r3, #0

	}

}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <spi_receive>:

StatusTypeDef spi_receive(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af02      	add	r7, sp, #8
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	75fb      	strb	r3, [r7, #23]



	if(hspi->State != SPI_STATE_READY)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d007      	beq.n	8000a3a <spi_receive+0x2e>
	{
		error_code = DEV_BUSY;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2201      	movs	r2, #1
 8000a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 8000a36:	7dfb      	ldrb	r3, [r7, #23]
 8000a38:	e0d1      	b.n	8000bde <spi_receive+0x1d2>
	}

	  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000a42:	d112      	bne.n	8000a6a <spi_receive+0x5e>
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10e      	bne.n	8000a6a <spi_receive+0x5e>
	  {
	    hspi->State = SPI_STATE_BUSY_RX;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2204      	movs	r2, #4
 8000a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
	    return spi_transmit_receive(hspi, p_data, p_data, size, timeout);
 8000a54:	88fa      	ldrh	r2, [r7, #6]
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	68ba      	ldr	r2, [r7, #8]
 8000a5e:	68b9      	ldr	r1, [r7, #8]
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f000 f8c0 	bl	8000be6 <spi_transmit_receive>
 8000a66:	4603      	mov	r3, r0
 8000a68:	e0b9      	b.n	8000bde <spi_receive+0x1d2>
	  }

		tickstart = get_tick();
 8000a6a:	f000 fae9 	bl	8001040 <get_tick>
 8000a6e:	6138      	str	r0, [r7, #16]

	if((p_data == NULL) || (size  == 0))
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <spi_receive+0x70>
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d107      	bne.n	8000a8c <spi_receive+0x80>
	{
		error_code =  DEV_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2201      	movs	r2, #1
 8000a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 8000a88:	7dfb      	ldrb	r3, [r7, #23]
 8000a8a:	e0a8      	b.n	8000bde <spi_receive+0x1d2>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_RX;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2204      	movs	r2, #4
 8000a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2200      	movs	r2, #0
 8000a98:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pRxBuffPtr = (uint8_t *)p_data;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	68ba      	ldr	r2, [r7, #8]
 8000a9e:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  size;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	88fa      	ldrh	r2, [r7, #6]
 8000aa4:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  size;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	88fa      	ldrh	r2, [r7, #6]
 8000aaa:	875a      	strh	r2, [r3, #58]	@ 0x3a


	hspi->pTxBuffPtr = (uint8_t *)NULL;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  0;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  0;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2200      	movs	r2, #0
 8000abc:	865a      	strh	r2, [r3, #50]	@ 0x32

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ac8:	2b40      	cmp	r3, #64	@ 0x40
 8000aca:	d007      	beq.n	8000adc <spi_receive+0xd0>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ada:	601a      	str	r2, [r3, #0]
	}

	/*Receive data in 8bit mode*/
	if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d16c      	bne.n	8000bbe <spi_receive+0x1b2>
	{
		while(hspi->RxXferCount > 0)
 8000ae4:	e033      	b.n	8000b4e <spi_receive+0x142>
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d015      	beq.n	8000b20 <spi_receive+0x114>
			{
				*((uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f103 020c 	add.w	r2, r3, #12
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	3b01      	subs	r3, #1
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8000b1e:	e016      	b.n	8000b4e <spi_receive+0x142>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8000b20:	f000 fa8e 	bl	8001040 <get_tick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d803      	bhi.n	8000b38 <spi_receive+0x12c>
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b36:	d102      	bne.n	8000b3e <spi_receive+0x132>
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d107      	bne.n	8000b4e <spi_receive+0x142>
		         {
					error_code = DEV_TIMEOUT;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2201      	movs	r2, #1
 8000b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8000b4a:	7dfb      	ldrb	r3, [r7, #23]
 8000b4c:	e047      	b.n	8000bde <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1c6      	bne.n	8000ae6 <spi_receive+0xda>
 8000b58:	e036      	b.n	8000bc8 <spi_receive+0x1bc>
	}
	else
	{
		while(hspi->RxXferCount > 0)
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d013      	beq.n	8000b90 <spi_receive+0x184>
			{
				*((uint16_t *)hspi->pRxBuffPtr) = ( uint16_t)hspi->Instance->DR;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	68da      	ldr	r2, [r3, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b72:	b292      	uxth	r2, r2
 8000b74:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b7a:	1c9a      	adds	r2, r3, #2
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	3b01      	subs	r3, #1
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8000b8e:	e016      	b.n	8000bbe <spi_receive+0x1b2>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8000b90:	f000 fa56 	bl	8001040 <get_tick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d803      	bhi.n	8000ba8 <spi_receive+0x19c>
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba6:	d102      	bne.n	8000bae <spi_receive+0x1a2>
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d107      	bne.n	8000bbe <spi_receive+0x1b2>
		         {
					error_code = DEV_TIMEOUT;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8000bba:	7dfb      	ldrb	r3, [r7, #23]
 8000bbc:	e00f      	b.n	8000bde <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1c8      	bne.n	8000b5a <spi_receive+0x14e>
		           }
			}
		}
	}
	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <spi_receive+0x1c8>
	{
		error_code = DEV_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	return error_code;
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <spi_transmit_receive>:


StatusTypeDef spi_transmit_receive(SPI_HandleTypeDef *hspi,uint8_t *p_tx_data, uint8_t *p_rx_data, uint16_t size,uint32_t timeout)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b08a      	sub	sp, #40	@ 0x28
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	807b      	strh	r3, [r7, #2]
	  uint32_t             tmp_mode;
	  SPI_StateTypeDef     tmp_state;
	  uint32_t             tickstart;

	  /* Variable used to alternate Rx and Tx during transfer */
	  uint32_t             txallowed = 1U;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
	  StatusTypeDef        error_code = DEV_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	  /* Init tickstart for timeout management*/
	  tickstart = get_tick();
 8000bfe:	f000 fa1f 	bl	8001040 <get_tick>
 8000c02:	61f8      	str	r0, [r7, #28]

	  /* Init temporary variables */
	  tmp_state           = hspi->State;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000c0a:	76fb      	strb	r3, [r7, #27]
	  tmp_mode            = hspi->Init.Mode;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	617b      	str	r3, [r7, #20]
	  initial_tx_count = size;
 8000c12:	887b      	ldrh	r3, [r7, #2]
 8000c14:	827b      	strh	r3, [r7, #18]

	  /* Set the transaction information */
	  hspi->ErrorCode   = SPI_ERROR_NONE;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	641a      	str	r2, [r3, #64]	@ 0x40
	  hspi->pRxBuffPtr  = (uint8_t *)p_rx_data;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	635a      	str	r2, [r3, #52]	@ 0x34
	  hspi->RxXferCount = size;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	887a      	ldrh	r2, [r7, #2]
 8000c26:	875a      	strh	r2, [r3, #58]	@ 0x3a
	  hspi->RxXferSize  = size;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	887a      	ldrh	r2, [r7, #2]
 8000c2c:	871a      	strh	r2, [r3, #56]	@ 0x38
	  hspi->pTxBuffPtr  = (uint8_t *)p_tx_data;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	68ba      	ldr	r2, [r7, #8]
 8000c32:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hspi->TxXferCount = size;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	887a      	ldrh	r2, [r7, #2]
 8000c38:	865a      	strh	r2, [r3, #50]	@ 0x32
	  hspi->TxXferSize  = size;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	887a      	ldrh	r2, [r7, #2]
 8000c3e:	861a      	strh	r2, [r3, #48]	@ 0x30

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c4a:	2b40      	cmp	r3, #64	@ 0x40
 8000c4c:	d007      	beq.n	8000c5e <spi_transmit_receive+0x78>
	  {
	    /* Enable SPI peripheral */
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000c5c:	601a      	str	r2, [r3, #0]
	  }
	  /* Transmit and Receive data in 16 Bit mode */
	  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000c66:	d17e      	bne.n	8000d66 <spi_transmit_receive+0x180>
	  {
		   if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <spi_transmit_receive+0x90>
 8000c70:	8a7b      	ldrh	r3, [r7, #18]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d16c      	bne.n	8000d50 <spi_transmit_receive+0x16a>
		    {
		      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c7a:	881a      	ldrh	r2, [r3, #0]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60da      	str	r2, [r3, #12]
		      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c86:	1c9a      	adds	r2, r3, #2
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	3b01      	subs	r3, #1
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }

		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000c9a:	e059      	b.n	8000d50 <spi_transmit_receive+0x16a>
		    {
		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d01b      	beq.n	8000ce2 <spi_transmit_receive+0xfc>
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d016      	beq.n	8000ce2 <spi_transmit_receive+0xfc>
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d113      	bne.n	8000ce2 <spi_transmit_receive+0xfc>
		        {
		          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cbe:	881a      	ldrh	r2, [r3, #0]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60da      	str	r2, [r3, #12]
		          hspi->pTxBuffPtr += sizeof(uint16_t);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cca:	1c9a      	adds	r2, r3, #2
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24

		        }

		        /* Check RXNE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d019      	beq.n	8000d24 <spi_transmit_receive+0x13e>
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d014      	beq.n	8000d24 <spi_transmit_receive+0x13e>
		        {
		          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68da      	ldr	r2, [r3, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d04:	b292      	uxth	r2, r2
 8000d06:	801a      	strh	r2, [r3, #0]
		          hspi->pRxBuffPtr += sizeof(uint16_t);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d0c:	1c9a      	adds	r2, r3, #2
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8000d20:	2301      	movs	r3, #1
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
		        }

		        if (((get_tick() - tickstart) >=  timeout) && (timeout != MAX_DELAY))
 8000d24:	f000 f98c 	bl	8001040 <get_tick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d80d      	bhi.n	8000d50 <spi_transmit_receive+0x16a>
 8000d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3a:	d009      	beq.n	8000d50 <spi_transmit_receive+0x16a>
		        {
		  			error_code = DEV_TIMEOUT;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2201      	movs	r2, #1
 8000d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 8000d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000d4e:	e08f      	b.n	8000e70 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1a0      	bne.n	8000c9c <spi_transmit_receive+0xb6>
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d19b      	bne.n	8000c9c <spi_transmit_receive+0xb6>
 8000d64:	e082      	b.n	8000e6c <spi_transmit_receive+0x286>
	  }

	  /* Transmit and Receive data in 8 Bit mode */
	  else
	  {
		    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d002      	beq.n	8000d74 <spi_transmit_receive+0x18e>
 8000d6e:	8a7b      	ldrh	r3, [r7, #18]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d171      	bne.n	8000e58 <spi_transmit_receive+0x272>
		    {
		      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	330c      	adds	r3, #12
 8000d7e:	7812      	ldrb	r2, [r2, #0]
 8000d80:	701a      	strb	r2, [r3, #0]
		      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	3b01      	subs	r3, #1
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d9a:	e05d      	b.n	8000e58 <spi_transmit_receive+0x272>
		      {

		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d01c      	beq.n	8000de4 <spi_transmit_receive+0x1fe>
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d017      	beq.n	8000de4 <spi_transmit_receive+0x1fe>
 8000db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d114      	bne.n	8000de4 <spi_transmit_receive+0x1fe>
		        {
		          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	330c      	adds	r3, #12
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	701a      	strb	r2, [r3, #0]
		          hspi->pTxBuffPtr++;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24

		      }

		        /* Wait until RXNE flag is reset */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d019      	beq.n	8000e26 <spi_transmit_receive+0x240>
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d014      	beq.n	8000e26 <spi_transmit_receive+0x240>
		        {
		          (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68da      	ldr	r2, [r3, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]
		          hspi->pRxBuffPtr++;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8000e22:	2301      	movs	r3, #1
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
		        }
		        if ((((get_tick() - tickstart) >=  timeout) && ((timeout != MAX_DELAY))) || (timeout == 0U))
 8000e26:	f000 f90b 	bl	8001040 <get_tick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d803      	bhi.n	8000e3e <spi_transmit_receive+0x258>
 8000e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d102      	bne.n	8000e44 <spi_transmit_receive+0x25e>
 8000e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d109      	bne.n	8000e58 <spi_transmit_receive+0x272>
		        {
		  			error_code = DEV_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 8000e52:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e56:	e00b      	b.n	8000e70 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d19c      	bne.n	8000d9c <spi_transmit_receive+0x1b6>
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d197      	bne.n	8000d9c <spi_transmit_receive+0x1b6>
		        }
		      }
	  }
		    return error_code;
 8000e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3728      	adds	r7, #40	@ 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
	return 1;
 8000e7c:	2301      	movs	r3, #1
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_kill>:

int _kill(int pid, int sig)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e92:	f005 fdd1 	bl	8006a38 <__errno>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2216      	movs	r2, #22
 8000e9a:	601a      	str	r2, [r3, #0]
	return -1;
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <_exit>:

void _exit (int status)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ffe7 	bl	8000e88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000eba:	bf00      	nop
 8000ebc:	e7fd      	b.n	8000eba <_exit+0x12>

08000ebe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	e00a      	b.n	8000ee6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ed0:	f3af 8000 	nop.w
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	60ba      	str	r2, [r7, #8]
 8000edc:	b2ca      	uxtb	r2, r1
 8000ede:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	dbf0      	blt.n	8000ed0 <_read+0x12>
	}

return len;
 8000eee:	687b      	ldr	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e009      	b.n	8000f1e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	60ba      	str	r2, [r7, #8]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f8e2 	bl	80010dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	dbf1      	blt.n	8000f0a <_write+0x12>
	}
	return len;
 8000f26:	687b      	ldr	r3, [r7, #4]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_close>:

int _close(int file)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	return -1;
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f58:	605a      	str	r2, [r3, #4]
	return 0;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_isatty>:

int _isatty(int file)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	return 1;
 8000f70:	2301      	movs	r3, #1
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
	return 0;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa0:	4a14      	ldr	r2, [pc, #80]	@ (8000ff4 <_sbrk+0x5c>)
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <_sbrk+0x60>)
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fac:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <_sbrk+0x64>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <_sbrk+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d207      	bcs.n	8000fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc8:	f005 fd36 	bl	8006a38 <__errno>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	220c      	movs	r2, #12
 8000fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	e009      	b.n	8000fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fde:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a05      	ldr	r2, [pc, #20]	@ (8000ffc <_sbrk+0x64>)
 8000fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20020000 	.word	0x20020000
 8000ff8:	00000400 	.word	0x00000400
 8000ffc:	200008fc 	.word	0x200008fc
 8001000:	20001558 	.word	0x20001558

08001004 <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 800100c:	f000 f818 	bl	8001040 <get_tick>
 8001010:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800101c:	d002      	beq.n	8001024 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3301      	adds	r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 8001024:	bf00      	nop
 8001026:	f000 f80b 	bl	8001040 <get_tick>
 800102a:	4602      	mov	r2, r0
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	429a      	cmp	r2, r3
 8001034:	d8f7      	bhi.n	8001026 <delay+0x22>

}
 8001036:	bf00      	nop
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <get_tick>:

uint32_t get_tick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <get_tick+0x24>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a06      	ldr	r2, [pc, #24]	@ (8001068 <get_tick+0x28>)
 800104e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001050:	b662      	cpsie	i
}
 8001052:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8001054:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <get_tick+0x28>)
 8001056:	681b      	ldr	r3, [r3, #0]

}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000900 	.word	0x20000900
 8001068:	20000904 	.word	0x20000904

0800106c <tick_increment>:
static void tick_increment(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8001070:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <tick_increment+0x18>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	4a03      	ldr	r2, [pc, #12]	@ (8001084 <tick_increment+0x18>)
 8001078:	6013      	str	r3, [r2, #0]
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	20000900 	.word	0x20000900

08001088 <timebase_init>:
void timebase_init(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per msecond*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 8001090:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <timebase_init+0x44>)
 8001092:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001096:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <timebase_init+0x44>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 800109e:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <timebase_init+0x44>)
 80010a0:	2204      	movs	r2, #4
 80010a2:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 80010a4:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <timebase_init+0x44>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a08      	ldr	r2, [pc, #32]	@ (80010cc <timebase_init+0x44>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <timebase_init+0x44>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a05      	ldr	r2, [pc, #20]	@ (80010cc <timebase_init+0x44>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010bc:	b662      	cpsie	i
}
 80010be:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	tick_increment();
 80010d4:	f7ff ffca 	bl	800106c <tick_increment>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f84f 	bl	8001188 <uart_write>
	return ch;
 80010ea:	687b      	ldr	r3, [r7, #4]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <debug_uart_init>:

void debug_uart_init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80010f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001178 <debug_uart_init+0x84>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001178 <debug_uart_init+0x84>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8001104:	4b1d      	ldr	r3, [pc, #116]	@ (800117c <debug_uart_init+0x88>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a1c      	ldr	r2, [pc, #112]	@ (800117c <debug_uart_init+0x88>)
 800110a:	f023 0310 	bic.w	r3, r3, #16
 800110e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8001110:	4b1a      	ldr	r3, [pc, #104]	@ (800117c <debug_uart_init+0x88>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a19      	ldr	r2, [pc, #100]	@ (800117c <debug_uart_init+0x88>)
 8001116:	f043 0320 	orr.w	r3, r3, #32
 800111a:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 800111c:	4b17      	ldr	r3, [pc, #92]	@ (800117c <debug_uart_init+0x88>)
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	4a16      	ldr	r2, [pc, #88]	@ (800117c <debug_uart_init+0x88>)
 8001122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001126:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <debug_uart_init+0x88>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4a13      	ldr	r2, [pc, #76]	@ (800117c <debug_uart_init+0x88>)
 800112e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001132:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8001134:	4b11      	ldr	r3, [pc, #68]	@ (800117c <debug_uart_init+0x88>)
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	4a10      	ldr	r2, [pc, #64]	@ (800117c <debug_uart_init+0x88>)
 800113a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800113e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8001140:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <debug_uart_init+0x88>)
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <debug_uart_init+0x88>)
 8001146:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800114a:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 800114c:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <debug_uart_init+0x84>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001150:	4a09      	ldr	r2, [pc, #36]	@ (8001178 <debug_uart_init+0x84>)
 8001152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001156:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8001158:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800115c:	4808      	ldr	r0, [pc, #32]	@ (8001180 <debug_uart_init+0x8c>)
 800115e:	f000 f83f 	bl	80011e0 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <debug_uart_init+0x90>)
 8001164:	2208      	movs	r2, #8
 8001166:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <debug_uart_init+0x90>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <debug_uart_init+0x90>)
 800116e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	40020000 	.word	0x40020000
 8001180:	00f42400 	.word	0x00f42400
 8001184:	40004400 	.word	0x40004400

08001188 <uart_write>:



static void uart_write(int ch)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8001190:	bf00      	nop
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <uart_write+0x2c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f9      	beq.n	8001192 <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <uart_write+0x2c>)
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	6053      	str	r3, [r2, #4]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40004400 	.word	0x40004400

080011b8 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	085a      	lsrs	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	441a      	add	r2, r3
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d0:	b29b      	uxth	r3, r3
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80011ea:	6839      	ldr	r1, [r7, #0]
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ffe3 	bl	80011b8 <compute_uart_bd>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b03      	ldr	r3, [pc, #12]	@ (8001204 <uart_set_baudrate+0x24>)
 80011f8:	609a      	str	r2, [r3, #8]
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40004400 	.word	0x40004400

08001208 <ip_assigned_callback>:

volatile bool is_ip_assigned =  false;


void ip_assigned_callback(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <ip_assigned_callback+0x14>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	20000df8 	.word	0x20000df8

08001220 <ip_update_callback>:

void ip_update_callback(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <ip_update_callback+0x14>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	20000df8 	.word	0x20000df8

08001238 <ip_conflict_callback>:
void ip_conflict_callback(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
	is_ip_assigned =  false;
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <ip_conflict_callback+0x14>)
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	20000df8 	.word	0x20000df8

08001250 <wizchip_cs_pin_init>:
    .dhcp =  NETINFO_DHCP
};
/*Initialize CS Pin*/

void wizchip_cs_pin_init(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
	/*Enable clock for GPIOA*/
	RCC->AHB1ENR |=(1U <<0);
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <wizchip_cs_pin_init+0x34>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001258:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <wizchip_cs_pin_init+0x34>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA4 as output pin*/
	GPIOA->MODER |=(1U<<8);
 8001260:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <wizchip_cs_pin_init+0x38>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a08      	ldr	r2, [pc, #32]	@ (8001288 <wizchip_cs_pin_init+0x38>)
 8001266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800126a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<9);
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <wizchip_cs_pin_init+0x38>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <wizchip_cs_pin_init+0x38>)
 8001272:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001276:	6013      	str	r3, [r2, #0]

}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000

0800128c <wizchip_pin_cs_select>:
/*Select W5500 by pulling CS pin low*/
void wizchip_pin_cs_select(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
	GPIOA->ODR &=~(1U<<4);
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <wizchip_pin_cs_select+0x1c>)
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <wizchip_pin_cs_select+0x1c>)
 8001296:	f023 0310 	bic.w	r3, r3, #16
 800129a:	6153      	str	r3, [r2, #20]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40020000 	.word	0x40020000

080012ac <wizchip_pin_cs_deselect>:

/*Unselect W5500 by pulling CS pin high*/
void wizchip_pin_cs_deselect(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1U<<4);
 80012b0:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <wizchip_pin_cs_deselect+0x1c>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <wizchip_pin_cs_deselect+0x1c>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	6153      	str	r3, [r2, #20]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40020000 	.word	0x40020000

080012cc <wizchip_read_burst>:

/*Spi read multiple bytes*/
void wizchip_read_burst(uint8_t *buffer,uint16_t length)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
	 spi_receive(&hspi1,buffer, length, MAX_DELAY);
 80012d8:	887a      	ldrh	r2, [r7, #2]
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4803      	ldr	r0, [pc, #12]	@ (80012f0 <wizchip_read_burst+0x24>)
 80012e2:	f7ff fb93 	bl	8000a0c <spi_receive>

}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000908 	.word	0x20000908

080012f4 <wizchip_read_byte>:

/*Spi read single byte*/

uint8_t wizchip_read_byte(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	uint8_t byte;
	wizchip_read_burst(&byte,sizeof(byte));
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	2101      	movs	r1, #1
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ffe4 	bl	80012cc <wizchip_read_burst>
	return byte;
 8001304:	79fb      	ldrb	r3, [r7, #7]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <wizchip_write_burst>:
/*Spi write multiple bytes*/
void wizchip_write_burst(uint8_t *buffer,uint16_t length)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
	 spi_transmit(&hspi1,buffer, length, MAX_DELAY);
 800131c:	887a      	ldrh	r2, [r7, #2]
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4803      	ldr	r0, [pc, #12]	@ (8001334 <wizchip_write_burst+0x24>)
 8001326:	f7ff fa51 	bl	80007cc <spi_transmit>

}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000908 	.word	0x20000908

08001338 <wizchip_write_byte>:

/*Spi write single byte*/
void wizchip_write_byte(uint8_t byte)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	wizchip_write_burst(&byte,sizeof(byte));
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	2101      	movs	r1, #1
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ffe2 	bl	8001310 <wizchip_write_burst>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <w5500_spi_init>:
 void w5500_spi_init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 8001358:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <w5500_spi_init+0x50>)
 800135a:	4a13      	ldr	r2, [pc, #76]	@ (80013a8 <w5500_spi_init+0x54>)
 800135c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <w5500_spi_init+0x50>)
 8001360:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001364:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction =  SPI_DIRECTION_2LINES;
 8001366:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <w5500_spi_init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800136c:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <w5500_spi_init+0x50>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity =  SPI_POLARITY_LOW;
 8001372:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <w5500_spi_init+0x50>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase =  SPI_PHASE_1EDGE;
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <w5500_spi_init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS =  SPI_NSS_SOFT;
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <w5500_spi_init+0x50>)
 8001380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001384:	619a      	str	r2, [r3, #24]
	hspi1.Init.BuadRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001386:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <w5500_spi_init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <w5500_spi_init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001392:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <w5500_spi_init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	629a      	str	r2, [r3, #40]	@ 0x28

	/*Initialize spi*/
	spi_init(&hspi1);
 8001398:	4802      	ldr	r0, [pc, #8]	@ (80013a4 <w5500_spi_init+0x50>)
 800139a:	f7ff f9af 	bl	80006fc <spi_init>

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000908 	.word	0x20000908
 80013a8:	40013000 	.word	0x40013000

080013ac <w5500_init>:


 void w5500_init(void)
 {
 80013ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ae:	b093      	sub	sp, #76	@ 0x4c
 80013b0:	af0a      	add	r7, sp, #40	@ 0x28
     //Set RX and TX Buffer sizes

	 /*Set 2KB buffer for each of the 8 sockets*/
	 uint8_t rx_tx_buff_sizes[]= {2,2,2,2,2,2,2,2};
 80013b2:	4a4a      	ldr	r2, [pc, #296]	@ (80014dc <w5500_init+0x130>)
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013bc:	e883 0003 	stmia.w	r3, {r0, r1}

	 /*Initialize the W5500 with the RX and TX buffer sizes*/
	 wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80013c0:	f107 0214 	add.w	r2, r7, #20
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f004 fcb2 	bl	8005d34 <wizchip_init>

	 //Register callback functions
	 reg_wizchip_cs_cbfunc(wizchip_pin_cs_select,wizchip_pin_cs_deselect);
 80013d0:	4943      	ldr	r1, [pc, #268]	@ (80014e0 <w5500_init+0x134>)
 80013d2:	4844      	ldr	r0, [pc, #272]	@ (80014e4 <w5500_init+0x138>)
 80013d4:	f004 fb04 	bl	80059e0 <reg_wizchip_cs_cbfunc>
	 reg_wizchip_spi_cbfunc(wizchip_read_byte,wizchip_write_byte);
 80013d8:	4943      	ldr	r1, [pc, #268]	@ (80014e8 <w5500_init+0x13c>)
 80013da:	4844      	ldr	r0, [pc, #272]	@ (80014ec <w5500_init+0x140>)
 80013dc:	f004 fb26 	bl	8005a2c <reg_wizchip_spi_cbfunc>
	 reg_wizchip_spiburst_cbfunc(wizchip_read_burst,wizchip_write_burst);
 80013e0:	4943      	ldr	r1, [pc, #268]	@ (80014f0 <w5500_init+0x144>)
 80013e2:	4844      	ldr	r0, [pc, #272]	@ (80014f4 <w5500_init+0x148>)
 80013e4:	f004 fb4e 	bl	8005a84 <reg_wizchip_spiburst_cbfunc>

	 /*Set MAC Address*/
	 setSHAR(net_info.mac);
 80013e8:	2206      	movs	r2, #6
 80013ea:	4943      	ldr	r1, [pc, #268]	@ (80014f8 <w5500_init+0x14c>)
 80013ec:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80013f0:	f004 f8a6 	bl	8005540 <WIZCHIP_WRITE_BUF>

	 /*Initialize DHCP*/
	 DHCP_init(DHCP_SOCKET,dhcp_buffer);
 80013f4:	4941      	ldr	r1, [pc, #260]	@ (80014fc <w5500_init+0x150>)
 80013f6:	2000      	movs	r0, #0
 80013f8:	f001 fbaa 	bl	8002b50 <DHCP_init>

	 //Register DHCP Callbacks
	 reg_dhcp_cbfunc(ip_assigned_callback,ip_update_callback,ip_conflict_callback);
 80013fc:	4a40      	ldr	r2, [pc, #256]	@ (8001500 <w5500_init+0x154>)
 80013fe:	4941      	ldr	r1, [pc, #260]	@ (8001504 <w5500_init+0x158>)
 8001400:	4841      	ldr	r0, [pc, #260]	@ (8001508 <w5500_init+0x15c>)
 8001402:	f000 f903 	bl	800160c <reg_dhcp_cbfunc>

	 /*Wait for IP assignment from DHCP*/
	 uint16_t timeout_counter =  10000;
 8001406:	f242 7310 	movw	r3, #10000	@ 0x2710
 800140a:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 800140c:	e004      	b.n	8001418 <w5500_init+0x6c>
	 {
		 DHCP_run();
 800140e:	f001 f9e7 	bl	80027e0 <DHCP_run>
		 timeout_counter--;
 8001412:	8bfb      	ldrh	r3, [r7, #30]
 8001414:	3b01      	subs	r3, #1
 8001416:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8001418:	4b3c      	ldr	r3, [pc, #240]	@ (800150c <w5500_init+0x160>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f083 0301 	eor.w	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <w5500_init+0x82>
 8001428:	8bfb      	ldrh	r3, [r7, #30]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1ef      	bne.n	800140e <w5500_init+0x62>
	 }

	 if(!is_ip_assigned)
 800142e:	4b37      	ldr	r3, [pc, #220]	@ (800150c <w5500_init+0x160>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f083 0301 	eor.w	r3, r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d149      	bne.n	80014d2 <w5500_init+0x126>
	 {
		 return;
	 }

	 /*Get network settings from DHCP*/
	 getIPfromDHCP(net_info.ip);
 800143e:	4834      	ldr	r0, [pc, #208]	@ (8001510 <w5500_init+0x164>)
 8001440:	f001 fc30 	bl	8002ca4 <getIPfromDHCP>
	 getGWfromDHCP(net_info.gw);
 8001444:	4833      	ldr	r0, [pc, #204]	@ (8001514 <w5500_init+0x168>)
 8001446:	f001 fc4d 	bl	8002ce4 <getGWfromDHCP>
	 getSNfromDHCP(net_info.sn);
 800144a:	4833      	ldr	r0, [pc, #204]	@ (8001518 <w5500_init+0x16c>)
 800144c:	f001 fc6a 	bl	8002d24 <getSNfromDHCP>


	/* Format and print the assigned IP, Gateway, and Subnet mask */
	sprintf(temp_buffer,
		"IP Address:  %d.%d.%d.%d\r\nGateway:  %d.%d.%d.%d\r\nSubnet mask: %d.%d.%d.%d\r\n",
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8001450:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <w5500_init+0x14c>)
 8001452:	799b      	ldrb	r3, [r3, #6]
	sprintf(temp_buffer,
 8001454:	469c      	mov	ip, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8001456:	4b28      	ldr	r3, [pc, #160]	@ (80014f8 <w5500_init+0x14c>)
 8001458:	79db      	ldrb	r3, [r3, #7]
	sprintf(temp_buffer,
 800145a:	469e      	mov	lr, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 800145c:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <w5500_init+0x14c>)
 800145e:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(temp_buffer,
 8001460:	461a      	mov	r2, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8001462:	4b25      	ldr	r3, [pc, #148]	@ (80014f8 <w5500_init+0x14c>)
 8001464:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(temp_buffer,
 8001466:	4619      	mov	r1, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8001468:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <w5500_init+0x14c>)
 800146a:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(temp_buffer,
 800146c:	4618      	mov	r0, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 800146e:	4b22      	ldr	r3, [pc, #136]	@ (80014f8 <w5500_init+0x14c>)
 8001470:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(temp_buffer,
 8001472:	461c      	mov	r4, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <w5500_init+0x14c>)
 8001476:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(temp_buffer,
 8001478:	461d      	mov	r5, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 800147a:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <w5500_init+0x14c>)
 800147c:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(temp_buffer,
 800147e:	461e      	mov	r6, r3
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8001480:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <w5500_init+0x14c>)
 8001482:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(temp_buffer,
 8001484:	60fb      	str	r3, [r7, #12]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <w5500_init+0x14c>)
 8001488:	7adb      	ldrb	r3, [r3, #11]
	sprintf(temp_buffer,
 800148a:	60bb      	str	r3, [r7, #8]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 800148c:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <w5500_init+0x14c>)
 800148e:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(temp_buffer,
 8001490:	607b      	str	r3, [r7, #4]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8001492:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <w5500_init+0x14c>)
 8001494:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(temp_buffer,
 8001496:	9309      	str	r3, [sp, #36]	@ 0x24
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	9308      	str	r3, [sp, #32]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	9307      	str	r3, [sp, #28]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	9306      	str	r3, [sp, #24]
 80014a4:	9605      	str	r6, [sp, #20]
 80014a6:	9504      	str	r5, [sp, #16]
 80014a8:	9403      	str	r4, [sp, #12]
 80014aa:	9002      	str	r0, [sp, #8]
 80014ac:	9101      	str	r1, [sp, #4]
 80014ae:	9200      	str	r2, [sp, #0]
 80014b0:	4673      	mov	r3, lr
 80014b2:	4662      	mov	r2, ip
 80014b4:	4919      	ldr	r1, [pc, #100]	@ (800151c <w5500_init+0x170>)
 80014b6:	481a      	ldr	r0, [pc, #104]	@ (8001520 <w5500_init+0x174>)
 80014b8:	f005 f8d4 	bl	8006664 <siprintf>
	);

    printf("*************Network Information************************\r\n");
 80014bc:	4819      	ldr	r0, [pc, #100]	@ (8001524 <w5500_init+0x178>)
 80014be:	f005 f8c9 	bl	8006654 <puts>
    printf("%s", temp_buffer);
 80014c2:	4917      	ldr	r1, [pc, #92]	@ (8001520 <w5500_init+0x174>)
 80014c4:	4818      	ldr	r0, [pc, #96]	@ (8001528 <w5500_init+0x17c>)
 80014c6:	f005 f85d 	bl	8006584 <iprintf>

    /*Apply the network configurations to the W5500*/
    wizchip_setnetinfo(&net_info);
 80014ca:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <w5500_init+0x14c>)
 80014cc:	f004 fea2 	bl	8006214 <wizchip_setnetinfo>
 80014d0:	e000      	b.n	80014d4 <w5500_init+0x128>
		 return;
 80014d2:	bf00      	nop

 }
 80014d4:	3724      	adds	r7, #36	@ 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014da:	bf00      	nop
 80014dc:	08007990 	.word	0x08007990
 80014e0:	080012ad 	.word	0x080012ad
 80014e4:	0800128d 	.word	0x0800128d
 80014e8:	08001339 	.word	0x08001339
 80014ec:	080012f5 	.word	0x080012f5
 80014f0:	08001311 	.word	0x08001311
 80014f4:	080012cd 	.word	0x080012cd
 80014f8:	20000008 	.word	0x20000008
 80014fc:	200009f8 	.word	0x200009f8
 8001500:	08001239 	.word	0x08001239
 8001504:	08001221 	.word	0x08001221
 8001508:	08001209 	.word	0x08001209
 800150c:	20000df8 	.word	0x20000df8
 8001510:	2000000e 	.word	0x2000000e
 8001514:	20000016 	.word	0x20000016
 8001518:	20000012 	.word	0x20000012
 800151c:	08007904 	.word	0x08007904
 8001520:	2000094c 	.word	0x2000094c
 8001524:	08007950 	.word	0x08007950
 8001528:	0800798c 	.word	0x0800798c

0800152c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800152c:	480d      	ldr	r0, [pc, #52]	@ (8001564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800152e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001530:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001534:	480c      	ldr	r0, [pc, #48]	@ (8001568 <LoopForever+0x6>)
  ldr r1, =_edata
 8001536:	490d      	ldr	r1, [pc, #52]	@ (800156c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <LoopForever+0xe>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800153c:	e002      	b.n	8001544 <LoopCopyDataInit>

0800153e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001542:	3304      	adds	r3, #4

08001544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001548:	d3f9      	bcc.n	800153e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154a:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800154c:	4c0a      	ldr	r4, [pc, #40]	@ (8001578 <LoopForever+0x16>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001550:	e001      	b.n	8001556 <LoopFillZerobss>

08001552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001554:	3204      	adds	r2, #4

08001556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001558:	d3fb      	bcc.n	8001552 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800155a:	f005 fa73 	bl	8006a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800155e:	f7fe ffdd 	bl	800051c <main>

08001562 <LoopForever>:

LoopForever:
    b LoopForever
 8001562:	e7fe      	b.n	8001562 <LoopForever>
  ldr   r0, =_estack
 8001564:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001570:	08018728 	.word	0x08018728
  ldr r2, =_sbss
 8001574:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8001578:	20001554 	.word	0x20001554

0800157c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC_IRQHandler>
	...

08001580 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8001584:	2204      	movs	r2, #4
 8001586:	4909      	ldr	r1, [pc, #36]	@ (80015ac <default_ip_assign+0x2c>)
 8001588:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800158c:	f003 ffd8 	bl	8005540 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8001590:	2204      	movs	r2, #4
 8001592:	4907      	ldr	r1, [pc, #28]	@ (80015b0 <default_ip_assign+0x30>)
 8001594:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001598:	f003 ffd2 	bl	8005540 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 800159c:	2204      	movs	r2, #4
 800159e:	4905      	ldr	r1, [pc, #20]	@ (80015b4 <default_ip_assign+0x34>)
 80015a0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80015a4:	f003 ffcc 	bl	8005540 <WIZCHIP_WRITE_BUF>
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000e08 	.word	0x20000e08
 80015b0:	20000e10 	.word	0x20000e10
 80015b4:	20000e0c 	.word	0x20000e0c

080015b8 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 80015bc:	2180      	movs	r1, #128	@ 0x80
 80015be:	2000      	movs	r0, #0
 80015c0:	f003 ff10 	bl	80053e4 <WIZCHIP_WRITE>
   getMR(); // for delay
 80015c4:	2000      	movs	r0, #0
 80015c6:	f003 fec1 	bl	800534c <WIZCHIP_READ>
   default_ip_assign();
 80015ca:	f7ff ffd9 	bl	8001580 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 80015ce:	2206      	movs	r2, #6
 80015d0:	4903      	ldr	r1, [pc, #12]	@ (80015e0 <default_ip_update+0x28>)
 80015d2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80015d6:	f003 ffb3 	bl	8005540 <WIZCHIP_WRITE_BUF>
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000e28 	.word	0x20000e28

080015e4 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 80015e8:	2180      	movs	r1, #128	@ 0x80
 80015ea:	2000      	movs	r0, #0
 80015ec:	f003 fefa 	bl	80053e4 <WIZCHIP_WRITE>
	getMR(); // for delay
 80015f0:	2000      	movs	r0, #0
 80015f2:	f003 feab 	bl	800534c <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 80015f6:	2206      	movs	r2, #6
 80015f8:	4903      	ldr	r1, [pc, #12]	@ (8001608 <default_ip_conflict+0x24>)
 80015fa:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80015fe:	f003 ff9f 	bl	8005540 <WIZCHIP_WRITE_BUF>
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000e28 	.word	0x20000e28

0800160c <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8001618:	4b10      	ldr	r3, [pc, #64]	@ (800165c <reg_dhcp_cbfunc+0x50>)
 800161a:	4a11      	ldr	r2, [pc, #68]	@ (8001660 <reg_dhcp_cbfunc+0x54>)
 800161c:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 800161e:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <reg_dhcp_cbfunc+0x58>)
 8001620:	4a11      	ldr	r2, [pc, #68]	@ (8001668 <reg_dhcp_cbfunc+0x5c>)
 8001622:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <reg_dhcp_cbfunc+0x60>)
 8001626:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <reg_dhcp_cbfunc+0x64>)
 8001628:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <reg_dhcp_cbfunc+0x2a>
 8001630:	4a0a      	ldr	r2, [pc, #40]	@ (800165c <reg_dhcp_cbfunc+0x50>)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <reg_dhcp_cbfunc+0x36>
 800163c:	4a09      	ldr	r2, [pc, #36]	@ (8001664 <reg_dhcp_cbfunc+0x58>)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <reg_dhcp_cbfunc+0x42>
 8001648:	4a08      	ldr	r2, [pc, #32]	@ (800166c <reg_dhcp_cbfunc+0x60>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	2000003c 	.word	0x2000003c
 8001660:	08001581 	.word	0x08001581
 8001664:	20000040 	.word	0x20000040
 8001668:	080015b9 	.word	0x080015b9
 800166c:	20000044 	.word	0x20000044
 8001670:	080015e5 	.word	0x080015e5

08001674 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 800167a:	463b      	mov	r3, r7
 800167c:	2206      	movs	r2, #6
 800167e:	4619      	mov	r1, r3
 8001680:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001684:	f003 fefc 	bl	8005480 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8001688:	4b72      	ldr	r3, [pc, #456]	@ (8001854 <makeDHCPMSG+0x1e0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8001690:	4b70      	ldr	r3, [pc, #448]	@ (8001854 <makeDHCPMSG+0x1e0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2201      	movs	r2, #1
 8001696:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8001698:	4b6e      	ldr	r3, [pc, #440]	@ (8001854 <makeDHCPMSG+0x1e0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2206      	movs	r2, #6
 800169e:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 80016a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001854 <makeDHCPMSG+0x1e0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2200      	movs	r2, #0
 80016a6:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 80016a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001854 <makeDHCPMSG+0x1e0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3304      	adds	r3, #4
 80016ae:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 80016b0:	4b69      	ldr	r3, [pc, #420]	@ (8001858 <makeDHCPMSG+0x1e4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	0e1b      	lsrs	r3, r3, #24
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 80016bc:	4b66      	ldr	r3, [pc, #408]	@ (8001858 <makeDHCPMSG+0x1e4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0c1a      	lsrs	r2, r3, #16
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	3301      	adds	r3, #1
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 80016ca:	4b63      	ldr	r3, [pc, #396]	@ (8001858 <makeDHCPMSG+0x1e4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	0a1a      	lsrs	r2, r3, #8
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	3302      	adds	r3, #2
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 80016d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001858 <makeDHCPMSG+0x1e4>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	3303      	adds	r3, #3
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 80016e4:	4b5b      	ldr	r3, [pc, #364]	@ (8001854 <makeDHCPMSG+0x1e0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2200      	movs	r2, #0
 80016ea:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 80016ec:	4b59      	ldr	r3, [pc, #356]	@ (8001854 <makeDHCPMSG+0x1e0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	330a      	adds	r3, #10
 80016f2:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2280      	movs	r2, #128	@ 0x80
 80016f8:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	3301      	adds	r3, #1
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8001702:	4b54      	ldr	r3, [pc, #336]	@ (8001854 <makeDHCPMSG+0x1e0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2200      	movs	r2, #0
 8001708:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 800170a:	4b52      	ldr	r3, [pc, #328]	@ (8001854 <makeDHCPMSG+0x1e0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2200      	movs	r2, #0
 8001710:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8001712:	4b50      	ldr	r3, [pc, #320]	@ (8001854 <makeDHCPMSG+0x1e0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2200      	movs	r2, #0
 8001718:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 800171a:	4b4e      	ldr	r3, [pc, #312]	@ (8001854 <makeDHCPMSG+0x1e0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2200      	movs	r2, #0
 8001720:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8001722:	4b4c      	ldr	r3, [pc, #304]	@ (8001854 <makeDHCPMSG+0x1e0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2200      	movs	r2, #0
 8001728:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 800172a:	4b4a      	ldr	r3, [pc, #296]	@ (8001854 <makeDHCPMSG+0x1e0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8001732:	4b48      	ldr	r3, [pc, #288]	@ (8001854 <makeDHCPMSG+0x1e0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2200      	movs	r2, #0
 8001738:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 800173a:	4b46      	ldr	r3, [pc, #280]	@ (8001854 <makeDHCPMSG+0x1e0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8001742:	4b44      	ldr	r3, [pc, #272]	@ (8001854 <makeDHCPMSG+0x1e0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2200      	movs	r2, #0
 8001748:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 800174a:	4b42      	ldr	r3, [pc, #264]	@ (8001854 <makeDHCPMSG+0x1e0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2200      	movs	r2, #0
 8001750:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8001752:	4b40      	ldr	r3, [pc, #256]	@ (8001854 <makeDHCPMSG+0x1e0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2200      	movs	r2, #0
 8001758:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 800175a:	4b3e      	ldr	r3, [pc, #248]	@ (8001854 <makeDHCPMSG+0x1e0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2200      	movs	r2, #0
 8001760:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8001762:	4b3c      	ldr	r3, [pc, #240]	@ (8001854 <makeDHCPMSG+0x1e0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2200      	movs	r2, #0
 8001768:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 800176a:	4b3a      	ldr	r3, [pc, #232]	@ (8001854 <makeDHCPMSG+0x1e0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2200      	movs	r2, #0
 8001770:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8001772:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <makeDHCPMSG+0x1e0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 800177a:	4b36      	ldr	r3, [pc, #216]	@ (8001854 <makeDHCPMSG+0x1e0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2200      	movs	r2, #0
 8001780:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8001782:	4b34      	ldr	r3, [pc, #208]	@ (8001854 <makeDHCPMSG+0x1e0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a35      	ldr	r2, [pc, #212]	@ (800185c <makeDHCPMSG+0x1e8>)
 8001788:	7812      	ldrb	r2, [r2, #0]
 800178a:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 800178c:	4b31      	ldr	r3, [pc, #196]	@ (8001854 <makeDHCPMSG+0x1e0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a32      	ldr	r2, [pc, #200]	@ (800185c <makeDHCPMSG+0x1e8>)
 8001792:	7852      	ldrb	r2, [r2, #1]
 8001794:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8001796:	4b2f      	ldr	r3, [pc, #188]	@ (8001854 <makeDHCPMSG+0x1e0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a30      	ldr	r2, [pc, #192]	@ (800185c <makeDHCPMSG+0x1e8>)
 800179c:	7892      	ldrb	r2, [r2, #2]
 800179e:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 80017a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001854 <makeDHCPMSG+0x1e0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a2d      	ldr	r2, [pc, #180]	@ (800185c <makeDHCPMSG+0x1e8>)
 80017a6:	78d2      	ldrb	r2, [r2, #3]
 80017a8:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 80017aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001854 <makeDHCPMSG+0x1e0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a2b      	ldr	r2, [pc, #172]	@ (800185c <makeDHCPMSG+0x1e8>)
 80017b0:	7912      	ldrb	r2, [r2, #4]
 80017b2:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 80017b6:	4b27      	ldr	r3, [pc, #156]	@ (8001854 <makeDHCPMSG+0x1e0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a28      	ldr	r2, [pc, #160]	@ (800185c <makeDHCPMSG+0x1e8>)
 80017bc:	7952      	ldrb	r2, [r2, #5]
 80017be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80017c2:	2306      	movs	r3, #6
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e008      	b.n	80017da <makeDHCPMSG+0x166>
 80017c8:	4b22      	ldr	r3, [pc, #136]	@ (8001854 <makeDHCPMSG+0x1e0>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	4413      	add	r3, r2
 80017d0:	2200      	movs	r2, #0
 80017d2:	771a      	strb	r2, [r3, #28]
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	3301      	adds	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	2b0f      	cmp	r3, #15
 80017de:	d9f3      	bls.n	80017c8 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e009      	b.n	80017fa <makeDHCPMSG+0x186>
 80017e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <makeDHCPMSG+0x1e0>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	4413      	add	r3, r2
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	3301      	adds	r3, #1
 80017f8:	73fb      	strb	r3, [r7, #15]
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80017fe:	d9f2      	bls.n	80017e6 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	e009      	b.n	800181a <makeDHCPMSG+0x1a6>
 8001806:	4b13      	ldr	r3, [pc, #76]	@ (8001854 <makeDHCPMSG+0x1e0>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	4413      	add	r3, r2
 800180e:	2200      	movs	r2, #0
 8001810:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	3301      	adds	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
 800181a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181e:	2b00      	cmp	r3, #0
 8001820:	daf1      	bge.n	8001806 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8001822:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <makeDHCPMSG+0x1e0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2263      	movs	r2, #99	@ 0x63
 8001828:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 800182c:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <makeDHCPMSG+0x1e0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2282      	movs	r2, #130	@ 0x82
 8001832:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8001836:	4b07      	ldr	r3, [pc, #28]	@ (8001854 <makeDHCPMSG+0x1e0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2253      	movs	r2, #83	@ 0x53
 800183c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8001840:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <makeDHCPMSG+0x1e0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2263      	movs	r2, #99	@ 0x63
 8001846:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000e24 	.word	0x20000e24
 8001858:	20000e20 	.word	0x20000e20
 800185c:	20000e28 	.word	0x20000e28

08001860 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800186a:	f7ff ff03 	bl	8001674 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 800186e:	4b56      	ldr	r3, [pc, #344]	@ (80019c8 <send_DHCP_DISCOVER+0x168>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8001874:	4b54      	ldr	r3, [pc, #336]	@ (80019c8 <send_DHCP_DISCOVER+0x168>)
 8001876:	2200      	movs	r2, #0
 8001878:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 800187a:	4b53      	ldr	r3, [pc, #332]	@ (80019c8 <send_DHCP_DISCOVER+0x168>)
 800187c:	2200      	movs	r2, #0
 800187e:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8001880:	4b51      	ldr	r3, [pc, #324]	@ (80019c8 <send_DHCP_DISCOVER+0x168>)
 8001882:	2200      	movs	r2, #0
 8001884:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8001886:	4b51      	ldr	r3, [pc, #324]	@ (80019cc <send_DHCP_DISCOVER+0x16c>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 800188c:	4b4f      	ldr	r3, [pc, #316]	@ (80019cc <send_DHCP_DISCOVER+0x16c>)
 800188e:	2200      	movs	r2, #0
 8001890:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8001892:	4b4e      	ldr	r3, [pc, #312]	@ (80019cc <send_DHCP_DISCOVER+0x16c>)
 8001894:	2200      	movs	r2, #0
 8001896:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8001898:	4b4c      	ldr	r3, [pc, #304]	@ (80019cc <send_DHCP_DISCOVER+0x16c>)
 800189a:	2200      	movs	r2, #0
 800189c:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 800189e:	2304      	movs	r3, #4
 80018a0:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80018a2:	4b4b      	ldr	r3, [pc, #300]	@ (80019d0 <send_DHCP_DISCOVER+0x170>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	88bb      	ldrh	r3, [r7, #4]
 80018a8:	1c59      	adds	r1, r3, #1
 80018aa:	80b9      	strh	r1, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	2235      	movs	r2, #53	@ 0x35
 80018b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80018b4:	4b46      	ldr	r3, [pc, #280]	@ (80019d0 <send_DHCP_DISCOVER+0x170>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	88bb      	ldrh	r3, [r7, #4]
 80018ba:	1c59      	adds	r1, r3, #1
 80018bc:	80b9      	strh	r1, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80018c6:	4b42      	ldr	r3, [pc, #264]	@ (80019d0 <send_DHCP_DISCOVER+0x170>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	88bb      	ldrh	r3, [r7, #4]
 80018cc:	1c59      	adds	r1, r3, #1
 80018ce:	80b9      	strh	r1, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80018d8:	4b3d      	ldr	r3, [pc, #244]	@ (80019d0 <send_DHCP_DISCOVER+0x170>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	88bb      	ldrh	r3, [r7, #4]
 80018de:	1c59      	adds	r1, r3, #1
 80018e0:	80b9      	strh	r1, [r7, #4]
 80018e2:	4413      	add	r3, r2
 80018e4:	223d      	movs	r2, #61	@ 0x3d
 80018e6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80018ea:	4b39      	ldr	r3, [pc, #228]	@ (80019d0 <send_DHCP_DISCOVER+0x170>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	88bb      	ldrh	r3, [r7, #4]
 80018f0:	1c59      	adds	r1, r3, #1
 80018f2:	80b9      	strh	r1, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	2207      	movs	r2, #7
 80018f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80018fc:	4b34      	ldr	r3, [pc, #208]	@ (80019d0 <send_DHCP_DISCOVER+0x170>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	88bb      	ldrh	r3, [r7, #4]
 8001902:	1c59      	adds	r1, r3, #1
 8001904:	80b9      	strh	r1, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	2201      	movs	r2, #1
 800190a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800190e:	4b30      	ldr	r3, [pc, #192]	@ (80019d0 <send_DHCP_DISCOVER+0x170>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	88bb      	ldrh	r3, [r7, #4]
 8001914:	1c59      	adds	r1, r3, #1
 8001916:	80b9      	strh	r1, [r7, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	4b2e      	ldr	r3, [pc, #184]	@ (80019d4 <send_DHCP_DISCOVER+0x174>)
 800191c:	7819      	ldrb	r1, [r3, #0]
 800191e:	1813      	adds	r3, r2, r0
 8001920:	460a      	mov	r2, r1
 8001922:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001926:	4b2a      	ldr	r3, [pc, #168]	@ (80019d0 <send_DHCP_DISCOVER+0x170>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	88bb      	ldrh	r3, [r7, #4]
 800192c:	1c59      	adds	r1, r3, #1
 800192e:	80b9      	strh	r1, [r7, #4]
 8001930:	4618      	mov	r0, r3
 8001932:	4b28      	ldr	r3, [pc, #160]	@ (80019d4 <send_DHCP_DISCOVER+0x174>)
 8001934:	7859      	ldrb	r1, [r3, #1]
 8001936:	1813      	adds	r3, r2, r0
 8001938:	460a      	mov	r2, r1
 800193a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800193e:	4b24      	ldr	r3, [pc, #144]	@ (80019d0 <send_DHCP_DISCOVER+0x170>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	88bb      	ldrh	r3, [r7, #4]
 8001944:	1c59      	adds	r1, r3, #1
 8001946:	80b9      	strh	r1, [r7, #4]
 8001948:	4618      	mov	r0, r3
 800194a:	4b22      	ldr	r3, [pc, #136]	@ (80019d4 <send_DHCP_DISCOVER+0x174>)
 800194c:	7899      	ldrb	r1, [r3, #2]
 800194e:	1813      	adds	r3, r2, r0
 8001950:	460a      	mov	r2, r1
 8001952:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001956:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <send_DHCP_DISCOVER+0x170>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	88bb      	ldrh	r3, [r7, #4]
 800195c:	1c59      	adds	r1, r3, #1
 800195e:	80b9      	strh	r1, [r7, #4]
 8001960:	4618      	mov	r0, r3
 8001962:	4b1c      	ldr	r3, [pc, #112]	@ (80019d4 <send_DHCP_DISCOVER+0x174>)
 8001964:	78d9      	ldrb	r1, [r3, #3]
 8001966:	1813      	adds	r3, r2, r0
 8001968:	460a      	mov	r2, r1
 800196a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800196e:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <send_DHCP_DISCOVER+0x170>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	88bb      	ldrh	r3, [r7, #4]
 8001974:	1c59      	adds	r1, r3, #1
 8001976:	80b9      	strh	r1, [r7, #4]
 8001978:	4618      	mov	r0, r3
 800197a:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <send_DHCP_DISCOVER+0x174>)
 800197c:	7919      	ldrb	r1, [r3, #4]
 800197e:	1813      	adds	r3, r2, r0
 8001980:	460a      	mov	r2, r1
 8001982:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001986:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <send_DHCP_DISCOVER+0x170>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	88bb      	ldrh	r3, [r7, #4]
 800198c:	1c59      	adds	r1, r3, #1
 800198e:	80b9      	strh	r1, [r7, #4]
 8001990:	4618      	mov	r0, r3
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <send_DHCP_DISCOVER+0x174>)
 8001994:	7959      	ldrb	r1, [r3, #5]
 8001996:	1813      	adds	r3, r2, r0
 8001998:	460a      	mov	r2, r1
 800199a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800199e:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <send_DHCP_DISCOVER+0x170>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	88bb      	ldrh	r3, [r7, #4]
 80019a4:	1c59      	adds	r1, r3, #1
 80019a6:	80b9      	strh	r1, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	220c      	movs	r2, #12
 80019ac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 80019b0:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <send_DHCP_DISCOVER+0x170>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	88bb      	ldrh	r3, [r7, #4]
 80019b6:	1c59      	adds	r1, r3, #1
 80019b8:	80b9      	strh	r1, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	80fb      	strh	r3, [r7, #6]
 80019c6:	e017      	b.n	80019f8 <send_DHCP_DISCOVER+0x198>
 80019c8:	20000dfc 	.word	0x20000dfc
 80019cc:	20000e00 	.word	0x20000e00
 80019d0:	20000e24 	.word	0x20000e24
 80019d4:	20000e28 	.word	0x20000e28
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80019d8:	88f9      	ldrh	r1, [r7, #6]
 80019da:	4b80      	ldr	r3, [pc, #512]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	88bb      	ldrh	r3, [r7, #4]
 80019e0:	1c58      	adds	r0, r3, #1
 80019e2:	80b8      	strh	r0, [r7, #4]
 80019e4:	4618      	mov	r0, r3
 80019e6:	4b7e      	ldr	r3, [pc, #504]	@ (8001be0 <send_DHCP_DISCOVER+0x380>)
 80019e8:	5c59      	ldrb	r1, [r3, r1]
 80019ea:	1813      	adds	r3, r2, r0
 80019ec:	460a      	mov	r2, r1
 80019ee:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	3301      	adds	r3, #1
 80019f6:	80fb      	strh	r3, [r7, #6]
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	4a79      	ldr	r2, [pc, #484]	@ (8001be0 <send_DHCP_DISCOVER+0x380>)
 80019fc:	5cd3      	ldrb	r3, [r2, r3]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ea      	bne.n	80019d8 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001a02:	4b78      	ldr	r3, [pc, #480]	@ (8001be4 <send_DHCP_DISCOVER+0x384>)
 8001a04:	78db      	ldrb	r3, [r3, #3]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b74      	ldr	r3, [pc, #464]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001a0c:	681c      	ldr	r4, [r3, #0]
 8001a0e:	88bb      	ldrh	r3, [r7, #4]
 8001a10:	1c59      	adds	r1, r3, #1
 8001a12:	80b9      	strh	r1, [r7, #4]
 8001a14:	461d      	mov	r5, r3
 8001a16:	4610      	mov	r0, r2
 8001a18:	f001 f9a4 	bl	8002d64 <NibbleToHex>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	1963      	adds	r3, r4, r5
 8001a22:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001a26:	4b6f      	ldr	r3, [pc, #444]	@ (8001be4 <send_DHCP_DISCOVER+0x384>)
 8001a28:	78da      	ldrb	r2, [r3, #3]
 8001a2a:	4b6c      	ldr	r3, [pc, #432]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001a2c:	681c      	ldr	r4, [r3, #0]
 8001a2e:	88bb      	ldrh	r3, [r7, #4]
 8001a30:	1c59      	adds	r1, r3, #1
 8001a32:	80b9      	strh	r1, [r7, #4]
 8001a34:	461d      	mov	r5, r3
 8001a36:	4610      	mov	r0, r2
 8001a38:	f001 f994 	bl	8002d64 <NibbleToHex>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	1963      	adds	r3, r4, r5
 8001a42:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001a46:	4b67      	ldr	r3, [pc, #412]	@ (8001be4 <send_DHCP_DISCOVER+0x384>)
 8001a48:	791b      	ldrb	r3, [r3, #4]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b63      	ldr	r3, [pc, #396]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001a50:	681c      	ldr	r4, [r3, #0]
 8001a52:	88bb      	ldrh	r3, [r7, #4]
 8001a54:	1c59      	adds	r1, r3, #1
 8001a56:	80b9      	strh	r1, [r7, #4]
 8001a58:	461d      	mov	r5, r3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	f001 f982 	bl	8002d64 <NibbleToHex>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	1963      	adds	r3, r4, r5
 8001a66:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001a6a:	4b5e      	ldr	r3, [pc, #376]	@ (8001be4 <send_DHCP_DISCOVER+0x384>)
 8001a6c:	791a      	ldrb	r2, [r3, #4]
 8001a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001a70:	681c      	ldr	r4, [r3, #0]
 8001a72:	88bb      	ldrh	r3, [r7, #4]
 8001a74:	1c59      	adds	r1, r3, #1
 8001a76:	80b9      	strh	r1, [r7, #4]
 8001a78:	461d      	mov	r5, r3
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	f001 f972 	bl	8002d64 <NibbleToHex>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	1963      	adds	r3, r4, r5
 8001a86:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001a8a:	4b56      	ldr	r3, [pc, #344]	@ (8001be4 <send_DHCP_DISCOVER+0x384>)
 8001a8c:	795b      	ldrb	r3, [r3, #5]
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b52      	ldr	r3, [pc, #328]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001a94:	681c      	ldr	r4, [r3, #0]
 8001a96:	88bb      	ldrh	r3, [r7, #4]
 8001a98:	1c59      	adds	r1, r3, #1
 8001a9a:	80b9      	strh	r1, [r7, #4]
 8001a9c:	461d      	mov	r5, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f001 f960 	bl	8002d64 <NibbleToHex>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	1963      	adds	r3, r4, r5
 8001aaa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001aae:	4b4d      	ldr	r3, [pc, #308]	@ (8001be4 <send_DHCP_DISCOVER+0x384>)
 8001ab0:	795a      	ldrb	r2, [r3, #5]
 8001ab2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001ab4:	681c      	ldr	r4, [r3, #0]
 8001ab6:	88bb      	ldrh	r3, [r7, #4]
 8001ab8:	1c59      	adds	r1, r3, #1
 8001aba:	80b9      	strh	r1, [r7, #4]
 8001abc:	461d      	mov	r5, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f001 f950 	bl	8002d64 <NibbleToHex>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	1963      	adds	r3, r4, r5
 8001aca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	b2d9      	uxtb	r1, r3
 8001ad2:	4b42      	ldr	r3, [pc, #264]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	88b8      	ldrh	r0, [r7, #4]
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	3307      	adds	r3, #7
 8001adc:	1ac3      	subs	r3, r0, r3
 8001ade:	3106      	adds	r1, #6
 8001ae0:	b2c9      	uxtb	r1, r1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	460a      	mov	r2, r1
 8001ae6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001aea:	4b3c      	ldr	r3, [pc, #240]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	88bb      	ldrh	r3, [r7, #4]
 8001af0:	1c59      	adds	r1, r3, #1
 8001af2:	80b9      	strh	r1, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	2237      	movs	r2, #55	@ 0x37
 8001af8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8001afc:	4b37      	ldr	r3, [pc, #220]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	88bb      	ldrh	r3, [r7, #4]
 8001b02:	1c59      	adds	r1, r3, #1
 8001b04:	80b9      	strh	r1, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	2206      	movs	r2, #6
 8001b0a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001b0e:	4b33      	ldr	r3, [pc, #204]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	88bb      	ldrh	r3, [r7, #4]
 8001b14:	1c59      	adds	r1, r3, #1
 8001b16:	80b9      	strh	r1, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001b20:	4b2e      	ldr	r3, [pc, #184]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	88bb      	ldrh	r3, [r7, #4]
 8001b26:	1c59      	adds	r1, r3, #1
 8001b28:	80b9      	strh	r1, [r7, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001b32:	4b2a      	ldr	r3, [pc, #168]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	88bb      	ldrh	r3, [r7, #4]
 8001b38:	1c59      	adds	r1, r3, #1
 8001b3a:	80b9      	strh	r1, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	2206      	movs	r2, #6
 8001b40:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001b44:	4b25      	ldr	r3, [pc, #148]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	88bb      	ldrh	r3, [r7, #4]
 8001b4a:	1c59      	adds	r1, r3, #1
 8001b4c:	80b9      	strh	r1, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	220f      	movs	r2, #15
 8001b52:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001b56:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	88bb      	ldrh	r3, [r7, #4]
 8001b5c:	1c59      	adds	r1, r3, #1
 8001b5e:	80b9      	strh	r1, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	223a      	movs	r2, #58	@ 0x3a
 8001b64:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001b68:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	88bb      	ldrh	r3, [r7, #4]
 8001b6e:	1c59      	adds	r1, r3, #1
 8001b70:	80b9      	strh	r1, [r7, #4]
 8001b72:	4413      	add	r3, r2
 8001b74:	223b      	movs	r2, #59	@ 0x3b
 8001b76:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001b7a:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	88bb      	ldrh	r3, [r7, #4]
 8001b80:	1c59      	adds	r1, r3, #1
 8001b82:	80b9      	strh	r1, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	22ff      	movs	r2, #255	@ 0xff
 8001b88:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001b8c:	88bb      	ldrh	r3, [r7, #4]
 8001b8e:	80fb      	strh	r3, [r7, #6]
 8001b90:	e009      	b.n	8001ba6 <send_DHCP_DISCOVER+0x346>
 8001b92:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	4413      	add	r3, r2
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	80fb      	strh	r3, [r7, #6]
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001bac:	d3f1      	bcc.n	8001b92 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8001bae:	23ff      	movs	r3, #255	@ 0xff
 8001bb0:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8001bb2:	23ff      	movs	r3, #255	@ 0xff
 8001bb4:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8001bb6:	23ff      	movs	r3, #255	@ 0xff
 8001bb8:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8001bba:	23ff      	movs	r3, #255	@ 0xff
 8001bbc:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <send_DHCP_DISCOVER+0x388>)
 8001bc0:	7818      	ldrb	r0, [r3, #0]
 8001bc2:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <send_DHCP_DISCOVER+0x37c>)
 8001bc4:	6819      	ldr	r1, [r3, #0]
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2243      	movs	r2, #67	@ 0x43
 8001bca:	9200      	str	r2, [sp, #0]
 8001bcc:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001bd0:	f003 f89c 	bl	8004d0c <sendto>
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bdb0      	pop	{r4, r5, r7, pc}
 8001bdc:	20000e24 	.word	0x20000e24
 8001be0:	20000034 	.word	0x20000034
 8001be4:	20000e28 	.word	0x20000e28
 8001be8:	20000df9 	.word	0x20000df9

08001bec <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8001bec:	b5b0      	push	{r4, r5, r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8001bf6:	f7ff fd3d 	bl	8001674 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <send_DHCP_REQUEST+0x7c>)
 8001bfc:	f993 3000 	ldrsb.w	r3, [r3]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d004      	beq.n	8001c0e <send_DHCP_REQUEST+0x22>
 8001c04:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <send_DHCP_REQUEST+0x7c>)
 8001c06:	f993 3000 	ldrsb.w	r3, [r3]
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d134      	bne.n	8001c78 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001c0e:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <send_DHCP_REQUEST+0x80>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	330a      	adds	r3, #10
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001c18:	4b14      	ldr	r3, [pc, #80]	@ (8001c6c <send_DHCP_REQUEST+0x80>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	330a      	adds	r3, #10
 8001c1e:	3301      	adds	r3, #1
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8001c24:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <send_DHCP_REQUEST+0x80>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a11      	ldr	r2, [pc, #68]	@ (8001c70 <send_DHCP_REQUEST+0x84>)
 8001c2a:	7812      	ldrb	r2, [r2, #0]
 8001c2c:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <send_DHCP_REQUEST+0x80>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a0f      	ldr	r2, [pc, #60]	@ (8001c70 <send_DHCP_REQUEST+0x84>)
 8001c34:	7852      	ldrb	r2, [r2, #1]
 8001c36:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <send_DHCP_REQUEST+0x80>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c70 <send_DHCP_REQUEST+0x84>)
 8001c3e:	7892      	ldrb	r2, [r2, #2]
 8001c40:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8001c42:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <send_DHCP_REQUEST+0x80>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <send_DHCP_REQUEST+0x84>)
 8001c48:	78d2      	ldrb	r2, [r2, #3]
 8001c4a:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8001c4c:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <send_DHCP_REQUEST+0x88>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8001c52:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <send_DHCP_REQUEST+0x88>)
 8001c54:	785b      	ldrb	r3, [r3, #1]
 8001c56:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <send_DHCP_REQUEST+0x88>)
 8001c5a:	789b      	ldrb	r3, [r3, #2]
 8001c5c:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8001c5e:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <send_DHCP_REQUEST+0x88>)
 8001c60:	78db      	ldrb	r3, [r3, #3]
 8001c62:	71fb      	strb	r3, [r7, #7]
 8001c64:	e010      	b.n	8001c88 <send_DHCP_REQUEST+0x9c>
 8001c66:	bf00      	nop
 8001c68:	20000e18 	.word	0x20000e18
 8001c6c:	20000e24 	.word	0x20000e24
 8001c70:	20000e08 	.word	0x20000e08
 8001c74:	20000dfc 	.word	0x20000dfc
   }
   else
   {
   	ip[0] = 255;
 8001c78:	23ff      	movs	r3, #255	@ 0xff
 8001c7a:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8001c7c:	23ff      	movs	r3, #255	@ 0xff
 8001c7e:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8001c80:	23ff      	movs	r3, #255	@ 0xff
 8001c82:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8001c84:	23ff      	movs	r3, #255	@ 0xff
 8001c86:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001c88:	2304      	movs	r3, #4
 8001c8a:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001c8c:	4b8d      	ldr	r3, [pc, #564]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	897b      	ldrh	r3, [r7, #10]
 8001c92:	1c59      	adds	r1, r3, #1
 8001c94:	8179      	strh	r1, [r7, #10]
 8001c96:	4413      	add	r3, r2
 8001c98:	2235      	movs	r2, #53	@ 0x35
 8001c9a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001c9e:	4b89      	ldr	r3, [pc, #548]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	897b      	ldrh	r3, [r7, #10]
 8001ca4:	1c59      	adds	r1, r3, #1
 8001ca6:	8179      	strh	r1, [r7, #10]
 8001ca8:	4413      	add	r3, r2
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8001cb0:	4b84      	ldr	r3, [pc, #528]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	897b      	ldrh	r3, [r7, #10]
 8001cb6:	1c59      	adds	r1, r3, #1
 8001cb8:	8179      	strh	r1, [r7, #10]
 8001cba:	4413      	add	r3, r2
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001cc2:	4b80      	ldr	r3, [pc, #512]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	897b      	ldrh	r3, [r7, #10]
 8001cc8:	1c59      	adds	r1, r3, #1
 8001cca:	8179      	strh	r1, [r7, #10]
 8001ccc:	4413      	add	r3, r2
 8001cce:	223d      	movs	r2, #61	@ 0x3d
 8001cd0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001cd4:	4b7b      	ldr	r3, [pc, #492]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	897b      	ldrh	r3, [r7, #10]
 8001cda:	1c59      	adds	r1, r3, #1
 8001cdc:	8179      	strh	r1, [r7, #10]
 8001cde:	4413      	add	r3, r2
 8001ce0:	2207      	movs	r2, #7
 8001ce2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001ce6:	4b77      	ldr	r3, [pc, #476]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	897b      	ldrh	r3, [r7, #10]
 8001cec:	1c59      	adds	r1, r3, #1
 8001cee:	8179      	strh	r1, [r7, #10]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001cf8:	4b72      	ldr	r3, [pc, #456]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	897b      	ldrh	r3, [r7, #10]
 8001cfe:	1c59      	adds	r1, r3, #1
 8001d00:	8179      	strh	r1, [r7, #10]
 8001d02:	4618      	mov	r0, r3
 8001d04:	4b70      	ldr	r3, [pc, #448]	@ (8001ec8 <send_DHCP_REQUEST+0x2dc>)
 8001d06:	7819      	ldrb	r1, [r3, #0]
 8001d08:	1813      	adds	r3, r2, r0
 8001d0a:	460a      	mov	r2, r1
 8001d0c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001d10:	4b6c      	ldr	r3, [pc, #432]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	897b      	ldrh	r3, [r7, #10]
 8001d16:	1c59      	adds	r1, r3, #1
 8001d18:	8179      	strh	r1, [r7, #10]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ec8 <send_DHCP_REQUEST+0x2dc>)
 8001d1e:	7859      	ldrb	r1, [r3, #1]
 8001d20:	1813      	adds	r3, r2, r0
 8001d22:	460a      	mov	r2, r1
 8001d24:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001d28:	4b66      	ldr	r3, [pc, #408]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	897b      	ldrh	r3, [r7, #10]
 8001d2e:	1c59      	adds	r1, r3, #1
 8001d30:	8179      	strh	r1, [r7, #10]
 8001d32:	4618      	mov	r0, r3
 8001d34:	4b64      	ldr	r3, [pc, #400]	@ (8001ec8 <send_DHCP_REQUEST+0x2dc>)
 8001d36:	7899      	ldrb	r1, [r3, #2]
 8001d38:	1813      	adds	r3, r2, r0
 8001d3a:	460a      	mov	r2, r1
 8001d3c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001d40:	4b60      	ldr	r3, [pc, #384]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	897b      	ldrh	r3, [r7, #10]
 8001d46:	1c59      	adds	r1, r3, #1
 8001d48:	8179      	strh	r1, [r7, #10]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ec8 <send_DHCP_REQUEST+0x2dc>)
 8001d4e:	78d9      	ldrb	r1, [r3, #3]
 8001d50:	1813      	adds	r3, r2, r0
 8001d52:	460a      	mov	r2, r1
 8001d54:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001d58:	4b5a      	ldr	r3, [pc, #360]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	897b      	ldrh	r3, [r7, #10]
 8001d5e:	1c59      	adds	r1, r3, #1
 8001d60:	8179      	strh	r1, [r7, #10]
 8001d62:	4618      	mov	r0, r3
 8001d64:	4b58      	ldr	r3, [pc, #352]	@ (8001ec8 <send_DHCP_REQUEST+0x2dc>)
 8001d66:	7919      	ldrb	r1, [r3, #4]
 8001d68:	1813      	adds	r3, r2, r0
 8001d6a:	460a      	mov	r2, r1
 8001d6c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001d70:	4b54      	ldr	r3, [pc, #336]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	897b      	ldrh	r3, [r7, #10]
 8001d76:	1c59      	adds	r1, r3, #1
 8001d78:	8179      	strh	r1, [r7, #10]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	4b52      	ldr	r3, [pc, #328]	@ (8001ec8 <send_DHCP_REQUEST+0x2dc>)
 8001d7e:	7959      	ldrb	r1, [r3, #5]
 8001d80:	1813      	adds	r3, r2, r0
 8001d82:	460a      	mov	r2, r1
 8001d84:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	2bff      	cmp	r3, #255	@ 0xff
 8001d8c:	f040 8084 	bne.w	8001e98 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001d90:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	897b      	ldrh	r3, [r7, #10]
 8001d96:	1c59      	adds	r1, r3, #1
 8001d98:	8179      	strh	r1, [r7, #10]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	2232      	movs	r2, #50	@ 0x32
 8001d9e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001da2:	4b48      	ldr	r3, [pc, #288]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	897b      	ldrh	r3, [r7, #10]
 8001da8:	1c59      	adds	r1, r3, #1
 8001daa:	8179      	strh	r1, [r7, #10]
 8001dac:	4413      	add	r3, r2
 8001dae:	2204      	movs	r2, #4
 8001db0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001db4:	4b43      	ldr	r3, [pc, #268]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	897b      	ldrh	r3, [r7, #10]
 8001dba:	1c59      	adds	r1, r3, #1
 8001dbc:	8179      	strh	r1, [r7, #10]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	4b42      	ldr	r3, [pc, #264]	@ (8001ecc <send_DHCP_REQUEST+0x2e0>)
 8001dc2:	7819      	ldrb	r1, [r3, #0]
 8001dc4:	1813      	adds	r3, r2, r0
 8001dc6:	460a      	mov	r2, r1
 8001dc8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	897b      	ldrh	r3, [r7, #10]
 8001dd2:	1c59      	adds	r1, r3, #1
 8001dd4:	8179      	strh	r1, [r7, #10]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	4b3c      	ldr	r3, [pc, #240]	@ (8001ecc <send_DHCP_REQUEST+0x2e0>)
 8001dda:	7859      	ldrb	r1, [r3, #1]
 8001ddc:	1813      	adds	r3, r2, r0
 8001dde:	460a      	mov	r2, r1
 8001de0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001de4:	4b37      	ldr	r3, [pc, #220]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	897b      	ldrh	r3, [r7, #10]
 8001dea:	1c59      	adds	r1, r3, #1
 8001dec:	8179      	strh	r1, [r7, #10]
 8001dee:	4618      	mov	r0, r3
 8001df0:	4b36      	ldr	r3, [pc, #216]	@ (8001ecc <send_DHCP_REQUEST+0x2e0>)
 8001df2:	7899      	ldrb	r1, [r3, #2]
 8001df4:	1813      	adds	r3, r2, r0
 8001df6:	460a      	mov	r2, r1
 8001df8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001dfc:	4b31      	ldr	r3, [pc, #196]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	897b      	ldrh	r3, [r7, #10]
 8001e02:	1c59      	adds	r1, r3, #1
 8001e04:	8179      	strh	r1, [r7, #10]
 8001e06:	4618      	mov	r0, r3
 8001e08:	4b30      	ldr	r3, [pc, #192]	@ (8001ecc <send_DHCP_REQUEST+0x2e0>)
 8001e0a:	78d9      	ldrb	r1, [r3, #3]
 8001e0c:	1813      	adds	r3, r2, r0
 8001e0e:	460a      	mov	r2, r1
 8001e10:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001e14:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	897b      	ldrh	r3, [r7, #10]
 8001e1a:	1c59      	adds	r1, r3, #1
 8001e1c:	8179      	strh	r1, [r7, #10]
 8001e1e:	4413      	add	r3, r2
 8001e20:	2236      	movs	r2, #54	@ 0x36
 8001e22:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001e26:	4b27      	ldr	r3, [pc, #156]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	897b      	ldrh	r3, [r7, #10]
 8001e2c:	1c59      	adds	r1, r3, #1
 8001e2e:	8179      	strh	r1, [r7, #10]
 8001e30:	4413      	add	r3, r2
 8001e32:	2204      	movs	r2, #4
 8001e34:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001e38:	4b22      	ldr	r3, [pc, #136]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	897b      	ldrh	r3, [r7, #10]
 8001e3e:	1c59      	adds	r1, r3, #1
 8001e40:	8179      	strh	r1, [r7, #10]
 8001e42:	4618      	mov	r0, r3
 8001e44:	4b22      	ldr	r3, [pc, #136]	@ (8001ed0 <send_DHCP_REQUEST+0x2e4>)
 8001e46:	7819      	ldrb	r1, [r3, #0]
 8001e48:	1813      	adds	r3, r2, r0
 8001e4a:	460a      	mov	r2, r1
 8001e4c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001e50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	897b      	ldrh	r3, [r7, #10]
 8001e56:	1c59      	adds	r1, r3, #1
 8001e58:	8179      	strh	r1, [r7, #10]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <send_DHCP_REQUEST+0x2e4>)
 8001e5e:	7859      	ldrb	r1, [r3, #1]
 8001e60:	1813      	adds	r3, r2, r0
 8001e62:	460a      	mov	r2, r1
 8001e64:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001e68:	4b16      	ldr	r3, [pc, #88]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	897b      	ldrh	r3, [r7, #10]
 8001e6e:	1c59      	adds	r1, r3, #1
 8001e70:	8179      	strh	r1, [r7, #10]
 8001e72:	4618      	mov	r0, r3
 8001e74:	4b16      	ldr	r3, [pc, #88]	@ (8001ed0 <send_DHCP_REQUEST+0x2e4>)
 8001e76:	7899      	ldrb	r1, [r3, #2]
 8001e78:	1813      	adds	r3, r2, r0
 8001e7a:	460a      	mov	r2, r1
 8001e7c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001e80:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	897b      	ldrh	r3, [r7, #10]
 8001e86:	1c59      	adds	r1, r3, #1
 8001e88:	8179      	strh	r1, [r7, #10]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <send_DHCP_REQUEST+0x2e4>)
 8001e8e:	78d9      	ldrb	r1, [r3, #3]
 8001e90:	1813      	adds	r3, r2, r0
 8001e92:	460a      	mov	r2, r1
 8001e94:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001e98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	897b      	ldrh	r3, [r7, #10]
 8001e9e:	1c59      	adds	r1, r3, #1
 8001ea0:	8179      	strh	r1, [r7, #10]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	220c      	movs	r2, #12
 8001ea6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <send_DHCP_REQUEST+0x2d8>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	897b      	ldrh	r3, [r7, #10]
 8001eb0:	1c59      	adds	r1, r3, #1
 8001eb2:	8179      	strh	r1, [r7, #10]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e019      	b.n	8001ef6 <send_DHCP_REQUEST+0x30a>
 8001ec2:	bf00      	nop
 8001ec4:	20000e24 	.word	0x20000e24
 8001ec8:	20000e28 	.word	0x20000e28
 8001ecc:	20000e08 	.word	0x20000e08
 8001ed0:	20000dfc 	.word	0x20000dfc
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001ed4:	4b86      	ldr	r3, [pc, #536]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	897b      	ldrh	r3, [r7, #10]
 8001eda:	1c59      	adds	r1, r3, #1
 8001edc:	8179      	strh	r1, [r7, #10]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	4984      	ldr	r1, [pc, #528]	@ (80020f4 <send_DHCP_REQUEST+0x508>)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	440b      	add	r3, r1
 8001ee6:	7819      	ldrb	r1, [r3, #0]
 8001ee8:	1813      	adds	r3, r2, r0
 8001eea:	460a      	mov	r2, r1
 8001eec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4a7f      	ldr	r2, [pc, #508]	@ (80020f4 <send_DHCP_REQUEST+0x508>)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1e8      	bne.n	8001ed4 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001f02:	4b7d      	ldr	r3, [pc, #500]	@ (80020f8 <send_DHCP_REQUEST+0x50c>)
 8001f04:	78db      	ldrb	r3, [r3, #3]
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4b79      	ldr	r3, [pc, #484]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 8001f0c:	681c      	ldr	r4, [r3, #0]
 8001f0e:	897b      	ldrh	r3, [r7, #10]
 8001f10:	1c59      	adds	r1, r3, #1
 8001f12:	8179      	strh	r1, [r7, #10]
 8001f14:	461d      	mov	r5, r3
 8001f16:	4610      	mov	r0, r2
 8001f18:	f000 ff24 	bl	8002d64 <NibbleToHex>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	1963      	adds	r3, r4, r5
 8001f22:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001f26:	4b74      	ldr	r3, [pc, #464]	@ (80020f8 <send_DHCP_REQUEST+0x50c>)
 8001f28:	78da      	ldrb	r2, [r3, #3]
 8001f2a:	4b71      	ldr	r3, [pc, #452]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 8001f2c:	681c      	ldr	r4, [r3, #0]
 8001f2e:	897b      	ldrh	r3, [r7, #10]
 8001f30:	1c59      	adds	r1, r3, #1
 8001f32:	8179      	strh	r1, [r7, #10]
 8001f34:	461d      	mov	r5, r3
 8001f36:	4610      	mov	r0, r2
 8001f38:	f000 ff14 	bl	8002d64 <NibbleToHex>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	461a      	mov	r2, r3
 8001f40:	1963      	adds	r3, r4, r5
 8001f42:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001f46:	4b6c      	ldr	r3, [pc, #432]	@ (80020f8 <send_DHCP_REQUEST+0x50c>)
 8001f48:	791b      	ldrb	r3, [r3, #4]
 8001f4a:	091b      	lsrs	r3, r3, #4
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4b68      	ldr	r3, [pc, #416]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 8001f50:	681c      	ldr	r4, [r3, #0]
 8001f52:	897b      	ldrh	r3, [r7, #10]
 8001f54:	1c59      	adds	r1, r3, #1
 8001f56:	8179      	strh	r1, [r7, #10]
 8001f58:	461d      	mov	r5, r3
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	f000 ff02 	bl	8002d64 <NibbleToHex>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461a      	mov	r2, r3
 8001f64:	1963      	adds	r3, r4, r5
 8001f66:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001f6a:	4b63      	ldr	r3, [pc, #396]	@ (80020f8 <send_DHCP_REQUEST+0x50c>)
 8001f6c:	791a      	ldrb	r2, [r3, #4]
 8001f6e:	4b60      	ldr	r3, [pc, #384]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 8001f70:	681c      	ldr	r4, [r3, #0]
 8001f72:	897b      	ldrh	r3, [r7, #10]
 8001f74:	1c59      	adds	r1, r3, #1
 8001f76:	8179      	strh	r1, [r7, #10]
 8001f78:	461d      	mov	r5, r3
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	f000 fef2 	bl	8002d64 <NibbleToHex>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	1963      	adds	r3, r4, r5
 8001f86:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001f8a:	4b5b      	ldr	r3, [pc, #364]	@ (80020f8 <send_DHCP_REQUEST+0x50c>)
 8001f8c:	795b      	ldrb	r3, [r3, #5]
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4b57      	ldr	r3, [pc, #348]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 8001f94:	681c      	ldr	r4, [r3, #0]
 8001f96:	897b      	ldrh	r3, [r7, #10]
 8001f98:	1c59      	adds	r1, r3, #1
 8001f9a:	8179      	strh	r1, [r7, #10]
 8001f9c:	461d      	mov	r5, r3
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	f000 fee0 	bl	8002d64 <NibbleToHex>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	1963      	adds	r3, r4, r5
 8001faa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001fae:	4b52      	ldr	r3, [pc, #328]	@ (80020f8 <send_DHCP_REQUEST+0x50c>)
 8001fb0:	795a      	ldrb	r2, [r3, #5]
 8001fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 8001fb4:	681c      	ldr	r4, [r3, #0]
 8001fb6:	897b      	ldrh	r3, [r7, #10]
 8001fb8:	1c59      	adds	r1, r3, #1
 8001fba:	8179      	strh	r1, [r7, #10]
 8001fbc:	461d      	mov	r5, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f000 fed0 	bl	8002d64 <NibbleToHex>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	1963      	adds	r3, r4, r5
 8001fca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	b2d9      	uxtb	r1, r3
 8001fd2:	4b47      	ldr	r3, [pc, #284]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	8978      	ldrh	r0, [r7, #10]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	3307      	adds	r3, #7
 8001fdc:	1ac3      	subs	r3, r0, r3
 8001fde:	3106      	adds	r1, #6
 8001fe0:	b2c9      	uxtb	r1, r1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	460a      	mov	r2, r1
 8001fe6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001fea:	4b41      	ldr	r3, [pc, #260]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	897b      	ldrh	r3, [r7, #10]
 8001ff0:	1c59      	adds	r1, r3, #1
 8001ff2:	8179      	strh	r1, [r7, #10]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	2237      	movs	r2, #55	@ 0x37
 8001ff8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001ffc:	4b3c      	ldr	r3, [pc, #240]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	897b      	ldrh	r3, [r7, #10]
 8002002:	1c59      	adds	r1, r3, #1
 8002004:	8179      	strh	r1, [r7, #10]
 8002006:	4413      	add	r3, r2
 8002008:	2208      	movs	r2, #8
 800200a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800200e:	4b38      	ldr	r3, [pc, #224]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	897b      	ldrh	r3, [r7, #10]
 8002014:	1c59      	adds	r1, r3, #1
 8002016:	8179      	strh	r1, [r7, #10]
 8002018:	4413      	add	r3, r2
 800201a:	2201      	movs	r2, #1
 800201c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8002020:	4b33      	ldr	r3, [pc, #204]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	897b      	ldrh	r3, [r7, #10]
 8002026:	1c59      	adds	r1, r3, #1
 8002028:	8179      	strh	r1, [r7, #10]
 800202a:	4413      	add	r3, r2
 800202c:	2203      	movs	r2, #3
 800202e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8002032:	4b2f      	ldr	r3, [pc, #188]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	897b      	ldrh	r3, [r7, #10]
 8002038:	1c59      	adds	r1, r3, #1
 800203a:	8179      	strh	r1, [r7, #10]
 800203c:	4413      	add	r3, r2
 800203e:	2206      	movs	r2, #6
 8002040:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8002044:	4b2a      	ldr	r3, [pc, #168]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	897b      	ldrh	r3, [r7, #10]
 800204a:	1c59      	adds	r1, r3, #1
 800204c:	8179      	strh	r1, [r7, #10]
 800204e:	4413      	add	r3, r2
 8002050:	220f      	movs	r2, #15
 8002052:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8002056:	4b26      	ldr	r3, [pc, #152]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	897b      	ldrh	r3, [r7, #10]
 800205c:	1c59      	adds	r1, r3, #1
 800205e:	8179      	strh	r1, [r7, #10]
 8002060:	4413      	add	r3, r2
 8002062:	223a      	movs	r2, #58	@ 0x3a
 8002064:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8002068:	4b21      	ldr	r3, [pc, #132]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	897b      	ldrh	r3, [r7, #10]
 800206e:	1c59      	adds	r1, r3, #1
 8002070:	8179      	strh	r1, [r7, #10]
 8002072:	4413      	add	r3, r2
 8002074:	223b      	movs	r2, #59	@ 0x3b
 8002076:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 800207a:	4b1d      	ldr	r3, [pc, #116]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	897b      	ldrh	r3, [r7, #10]
 8002080:	1c59      	adds	r1, r3, #1
 8002082:	8179      	strh	r1, [r7, #10]
 8002084:	4413      	add	r3, r2
 8002086:	221f      	movs	r2, #31
 8002088:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 800208c:	4b18      	ldr	r3, [pc, #96]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	897b      	ldrh	r3, [r7, #10]
 8002092:	1c59      	adds	r1, r3, #1
 8002094:	8179      	strh	r1, [r7, #10]
 8002096:	4413      	add	r3, r2
 8002098:	2221      	movs	r2, #33	@ 0x21
 800209a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800209e:	4b14      	ldr	r3, [pc, #80]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	897b      	ldrh	r3, [r7, #10]
 80020a4:	1c59      	adds	r1, r3, #1
 80020a6:	8179      	strh	r1, [r7, #10]
 80020a8:	4413      	add	r3, r2
 80020aa:	22ff      	movs	r2, #255	@ 0xff
 80020ac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80020b0:	897b      	ldrh	r3, [r7, #10]
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	e009      	b.n	80020ca <send_DHCP_REQUEST+0x4de>
 80020b6:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4413      	add	r3, r2
 80020be:	33ec      	adds	r3, #236	@ 0xec
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3301      	adds	r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80020d0:	dbf1      	blt.n	80020b6 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80020d2:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <send_DHCP_REQUEST+0x510>)
 80020d4:	7818      	ldrb	r0, [r3, #0]
 80020d6:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <send_DHCP_REQUEST+0x504>)
 80020d8:	6819      	ldr	r1, [r3, #0]
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	2243      	movs	r2, #67	@ 0x43
 80020de:	9200      	str	r2, [sp, #0]
 80020e0:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80020e4:	f002 fe12 	bl	8004d0c <sendto>

}
 80020e8:	bf00      	nop
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bdb0      	pop	{r4, r5, r7, pc}
 80020f0:	20000e24 	.word	0x20000e24
 80020f4:	20000034 	.word	0x20000034
 80020f8:	20000e28 	.word	0x20000e28
 80020fc:	20000df9 	.word	0x20000df9

08002100 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 800210a:	f7ff fab3 	bl	8001674 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800210e:	2304      	movs	r3, #4
 8002110:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8002112:	4b9f      	ldr	r3, [pc, #636]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	330a      	adds	r3, #10
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800211c:	4b9c      	ldr	r3, [pc, #624]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	330a      	adds	r3, #10
 8002122:	3301      	adds	r3, #1
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8002128:	4b99      	ldr	r3, [pc, #612]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	897b      	ldrh	r3, [r7, #10]
 800212e:	1c59      	adds	r1, r3, #1
 8002130:	8179      	strh	r1, [r7, #10]
 8002132:	4413      	add	r3, r2
 8002134:	2235      	movs	r2, #53	@ 0x35
 8002136:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800213a:	4b95      	ldr	r3, [pc, #596]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	897b      	ldrh	r3, [r7, #10]
 8002140:	1c59      	adds	r1, r3, #1
 8002142:	8179      	strh	r1, [r7, #10]
 8002144:	4413      	add	r3, r2
 8002146:	2201      	movs	r2, #1
 8002148:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 800214c:	4b90      	ldr	r3, [pc, #576]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	897b      	ldrh	r3, [r7, #10]
 8002152:	1c59      	adds	r1, r3, #1
 8002154:	8179      	strh	r1, [r7, #10]
 8002156:	4413      	add	r3, r2
 8002158:	2204      	movs	r2, #4
 800215a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800215e:	4b8c      	ldr	r3, [pc, #560]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	897b      	ldrh	r3, [r7, #10]
 8002164:	1c59      	adds	r1, r3, #1
 8002166:	8179      	strh	r1, [r7, #10]
 8002168:	4413      	add	r3, r2
 800216a:	223d      	movs	r2, #61	@ 0x3d
 800216c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8002170:	4b87      	ldr	r3, [pc, #540]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	897b      	ldrh	r3, [r7, #10]
 8002176:	1c59      	adds	r1, r3, #1
 8002178:	8179      	strh	r1, [r7, #10]
 800217a:	4413      	add	r3, r2
 800217c:	2207      	movs	r2, #7
 800217e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002182:	4b83      	ldr	r3, [pc, #524]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	897b      	ldrh	r3, [r7, #10]
 8002188:	1c59      	adds	r1, r3, #1
 800218a:	8179      	strh	r1, [r7, #10]
 800218c:	4413      	add	r3, r2
 800218e:	2201      	movs	r2, #1
 8002190:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8002194:	4b7e      	ldr	r3, [pc, #504]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	897b      	ldrh	r3, [r7, #10]
 800219a:	1c59      	adds	r1, r3, #1
 800219c:	8179      	strh	r1, [r7, #10]
 800219e:	4618      	mov	r0, r3
 80021a0:	4b7c      	ldr	r3, [pc, #496]	@ (8002394 <send_DHCP_DECLINE+0x294>)
 80021a2:	7819      	ldrb	r1, [r3, #0]
 80021a4:	1813      	adds	r3, r2, r0
 80021a6:	460a      	mov	r2, r1
 80021a8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80021ac:	4b78      	ldr	r3, [pc, #480]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	897b      	ldrh	r3, [r7, #10]
 80021b2:	1c59      	adds	r1, r3, #1
 80021b4:	8179      	strh	r1, [r7, #10]
 80021b6:	4618      	mov	r0, r3
 80021b8:	4b76      	ldr	r3, [pc, #472]	@ (8002394 <send_DHCP_DECLINE+0x294>)
 80021ba:	7859      	ldrb	r1, [r3, #1]
 80021bc:	1813      	adds	r3, r2, r0
 80021be:	460a      	mov	r2, r1
 80021c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80021c4:	4b72      	ldr	r3, [pc, #456]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	897b      	ldrh	r3, [r7, #10]
 80021ca:	1c59      	adds	r1, r3, #1
 80021cc:	8179      	strh	r1, [r7, #10]
 80021ce:	4618      	mov	r0, r3
 80021d0:	4b70      	ldr	r3, [pc, #448]	@ (8002394 <send_DHCP_DECLINE+0x294>)
 80021d2:	7899      	ldrb	r1, [r3, #2]
 80021d4:	1813      	adds	r3, r2, r0
 80021d6:	460a      	mov	r2, r1
 80021d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80021dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	897b      	ldrh	r3, [r7, #10]
 80021e2:	1c59      	adds	r1, r3, #1
 80021e4:	8179      	strh	r1, [r7, #10]
 80021e6:	4618      	mov	r0, r3
 80021e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002394 <send_DHCP_DECLINE+0x294>)
 80021ea:	78d9      	ldrb	r1, [r3, #3]
 80021ec:	1813      	adds	r3, r2, r0
 80021ee:	460a      	mov	r2, r1
 80021f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80021f4:	4b66      	ldr	r3, [pc, #408]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	897b      	ldrh	r3, [r7, #10]
 80021fa:	1c59      	adds	r1, r3, #1
 80021fc:	8179      	strh	r1, [r7, #10]
 80021fe:	4618      	mov	r0, r3
 8002200:	4b64      	ldr	r3, [pc, #400]	@ (8002394 <send_DHCP_DECLINE+0x294>)
 8002202:	7919      	ldrb	r1, [r3, #4]
 8002204:	1813      	adds	r3, r2, r0
 8002206:	460a      	mov	r2, r1
 8002208:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800220c:	4b60      	ldr	r3, [pc, #384]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	897b      	ldrh	r3, [r7, #10]
 8002212:	1c59      	adds	r1, r3, #1
 8002214:	8179      	strh	r1, [r7, #10]
 8002216:	4618      	mov	r0, r3
 8002218:	4b5e      	ldr	r3, [pc, #376]	@ (8002394 <send_DHCP_DECLINE+0x294>)
 800221a:	7959      	ldrb	r1, [r3, #5]
 800221c:	1813      	adds	r3, r2, r0
 800221e:	460a      	mov	r2, r1
 8002220:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8002224:	4b5a      	ldr	r3, [pc, #360]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	897b      	ldrh	r3, [r7, #10]
 800222a:	1c59      	adds	r1, r3, #1
 800222c:	8179      	strh	r1, [r7, #10]
 800222e:	4413      	add	r3, r2
 8002230:	2232      	movs	r2, #50	@ 0x32
 8002232:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8002236:	4b56      	ldr	r3, [pc, #344]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	897b      	ldrh	r3, [r7, #10]
 800223c:	1c59      	adds	r1, r3, #1
 800223e:	8179      	strh	r1, [r7, #10]
 8002240:	4413      	add	r3, r2
 8002242:	2204      	movs	r2, #4
 8002244:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8002248:	4b51      	ldr	r3, [pc, #324]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	897b      	ldrh	r3, [r7, #10]
 800224e:	1c59      	adds	r1, r3, #1
 8002250:	8179      	strh	r1, [r7, #10]
 8002252:	4618      	mov	r0, r3
 8002254:	4b50      	ldr	r3, [pc, #320]	@ (8002398 <send_DHCP_DECLINE+0x298>)
 8002256:	7819      	ldrb	r1, [r3, #0]
 8002258:	1813      	adds	r3, r2, r0
 800225a:	460a      	mov	r2, r1
 800225c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8002260:	4b4b      	ldr	r3, [pc, #300]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	897b      	ldrh	r3, [r7, #10]
 8002266:	1c59      	adds	r1, r3, #1
 8002268:	8179      	strh	r1, [r7, #10]
 800226a:	4618      	mov	r0, r3
 800226c:	4b4a      	ldr	r3, [pc, #296]	@ (8002398 <send_DHCP_DECLINE+0x298>)
 800226e:	7859      	ldrb	r1, [r3, #1]
 8002270:	1813      	adds	r3, r2, r0
 8002272:	460a      	mov	r2, r1
 8002274:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8002278:	4b45      	ldr	r3, [pc, #276]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	897b      	ldrh	r3, [r7, #10]
 800227e:	1c59      	adds	r1, r3, #1
 8002280:	8179      	strh	r1, [r7, #10]
 8002282:	4618      	mov	r0, r3
 8002284:	4b44      	ldr	r3, [pc, #272]	@ (8002398 <send_DHCP_DECLINE+0x298>)
 8002286:	7899      	ldrb	r1, [r3, #2]
 8002288:	1813      	adds	r3, r2, r0
 800228a:	460a      	mov	r2, r1
 800228c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8002290:	4b3f      	ldr	r3, [pc, #252]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	897b      	ldrh	r3, [r7, #10]
 8002296:	1c59      	adds	r1, r3, #1
 8002298:	8179      	strh	r1, [r7, #10]
 800229a:	4618      	mov	r0, r3
 800229c:	4b3e      	ldr	r3, [pc, #248]	@ (8002398 <send_DHCP_DECLINE+0x298>)
 800229e:	78d9      	ldrb	r1, [r3, #3]
 80022a0:	1813      	adds	r3, r2, r0
 80022a2:	460a      	mov	r2, r1
 80022a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80022a8:	4b39      	ldr	r3, [pc, #228]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	897b      	ldrh	r3, [r7, #10]
 80022ae:	1c59      	adds	r1, r3, #1
 80022b0:	8179      	strh	r1, [r7, #10]
 80022b2:	4413      	add	r3, r2
 80022b4:	2236      	movs	r2, #54	@ 0x36
 80022b6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 80022ba:	4b35      	ldr	r3, [pc, #212]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	897b      	ldrh	r3, [r7, #10]
 80022c0:	1c59      	adds	r1, r3, #1
 80022c2:	8179      	strh	r1, [r7, #10]
 80022c4:	4413      	add	r3, r2
 80022c6:	2204      	movs	r2, #4
 80022c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80022cc:	4b30      	ldr	r3, [pc, #192]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	897b      	ldrh	r3, [r7, #10]
 80022d2:	1c59      	adds	r1, r3, #1
 80022d4:	8179      	strh	r1, [r7, #10]
 80022d6:	4618      	mov	r0, r3
 80022d8:	4b30      	ldr	r3, [pc, #192]	@ (800239c <send_DHCP_DECLINE+0x29c>)
 80022da:	7819      	ldrb	r1, [r3, #0]
 80022dc:	1813      	adds	r3, r2, r0
 80022de:	460a      	mov	r2, r1
 80022e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80022e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	897b      	ldrh	r3, [r7, #10]
 80022ea:	1c59      	adds	r1, r3, #1
 80022ec:	8179      	strh	r1, [r7, #10]
 80022ee:	4618      	mov	r0, r3
 80022f0:	4b2a      	ldr	r3, [pc, #168]	@ (800239c <send_DHCP_DECLINE+0x29c>)
 80022f2:	7859      	ldrb	r1, [r3, #1]
 80022f4:	1813      	adds	r3, r2, r0
 80022f6:	460a      	mov	r2, r1
 80022f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80022fc:	4b24      	ldr	r3, [pc, #144]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	897b      	ldrh	r3, [r7, #10]
 8002302:	1c59      	adds	r1, r3, #1
 8002304:	8179      	strh	r1, [r7, #10]
 8002306:	4618      	mov	r0, r3
 8002308:	4b24      	ldr	r3, [pc, #144]	@ (800239c <send_DHCP_DECLINE+0x29c>)
 800230a:	7899      	ldrb	r1, [r3, #2]
 800230c:	1813      	adds	r3, r2, r0
 800230e:	460a      	mov	r2, r1
 8002310:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8002314:	4b1e      	ldr	r3, [pc, #120]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	897b      	ldrh	r3, [r7, #10]
 800231a:	1c59      	adds	r1, r3, #1
 800231c:	8179      	strh	r1, [r7, #10]
 800231e:	4618      	mov	r0, r3
 8002320:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <send_DHCP_DECLINE+0x29c>)
 8002322:	78d9      	ldrb	r1, [r3, #3]
 8002324:	1813      	adds	r3, r2, r0
 8002326:	460a      	mov	r2, r1
 8002328:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 800232c:	4b18      	ldr	r3, [pc, #96]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	897b      	ldrh	r3, [r7, #10]
 8002332:	1c59      	adds	r1, r3, #1
 8002334:	8179      	strh	r1, [r7, #10]
 8002336:	4413      	add	r3, r2
 8002338:	22ff      	movs	r2, #255	@ 0xff
 800233a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800233e:	897b      	ldrh	r3, [r7, #10]
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	e009      	b.n	8002358 <send_DHCP_DECLINE+0x258>
 8002344:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	33ec      	adds	r3, #236	@ 0xec
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3301      	adds	r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800235e:	dbf1      	blt.n	8002344 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8002360:	23ff      	movs	r3, #255	@ 0xff
 8002362:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8002364:	23ff      	movs	r3, #255	@ 0xff
 8002366:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8002368:	23ff      	movs	r3, #255	@ 0xff
 800236a:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 800236c:	23ff      	movs	r3, #255	@ 0xff
 800236e:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8002370:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <send_DHCP_DECLINE+0x2a0>)
 8002372:	7818      	ldrb	r0, [r3, #0]
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <send_DHCP_DECLINE+0x290>)
 8002376:	6819      	ldr	r1, [r3, #0]
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	2243      	movs	r2, #67	@ 0x43
 800237c:	9200      	str	r2, [sp, #0]
 800237e:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8002382:	f002 fcc3 	bl	8004d0c <sendto>
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000e24 	.word	0x20000e24
 8002394:	20000e28 	.word	0x20000e28
 8002398:	20000e08 	.word	0x20000e08
 800239c:	20000dfc 	.word	0x20000dfc
 80023a0:	20000df9 	.word	0x20000df9

080023a4 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b089      	sub	sp, #36	@ 0x24
 80023a8:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 80023ae:	4ba1      	ldr	r3, [pc, #644]	@ (8002634 <parseDHCPMSG+0x290>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 f96d 	bl	8005692 <getSn_RX_RSR>
 80023b8:	4603      	mov	r3, r0
 80023ba:	823b      	strh	r3, [r7, #16]
 80023bc:	8a3b      	ldrh	r3, [r7, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d011      	beq.n	80023e6 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 80023c2:	4b9c      	ldr	r3, [pc, #624]	@ (8002634 <parseDHCPMSG+0x290>)
 80023c4:	7818      	ldrb	r0, [r3, #0]
 80023c6:	4b9c      	ldr	r3, [pc, #624]	@ (8002638 <parseDHCPMSG+0x294>)
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	1d3c      	adds	r4, r7, #4
 80023cc:	8a3a      	ldrh	r2, [r7, #16]
 80023ce:	1cbb      	adds	r3, r7, #2
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	4623      	mov	r3, r4
 80023d4:	f002 fdce 	bl	8004f74 <recvfrom>
 80023d8:	4603      	mov	r3, r0
 80023da:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 80023dc:	887b      	ldrh	r3, [r7, #2]
 80023de:	2b43      	cmp	r3, #67	@ 0x43
 80023e0:	f040 81ed 	bne.w	80027be <parseDHCPMSG+0x41a>
 80023e4:	e001      	b.n	80023ea <parseDHCPMSG+0x46>
   else return 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e1eb      	b.n	80027c2 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80023ea:	4b93      	ldr	r3, [pc, #588]	@ (8002638 <parseDHCPMSG+0x294>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	7f1a      	ldrb	r2, [r3, #28]
 80023f0:	4b92      	ldr	r3, [pc, #584]	@ (800263c <parseDHCPMSG+0x298>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d124      	bne.n	8002442 <parseDHCPMSG+0x9e>
 80023f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002638 <parseDHCPMSG+0x294>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	7f5a      	ldrb	r2, [r3, #29]
 80023fe:	4b8f      	ldr	r3, [pc, #572]	@ (800263c <parseDHCPMSG+0x298>)
 8002400:	785b      	ldrb	r3, [r3, #1]
 8002402:	429a      	cmp	r2, r3
 8002404:	d11d      	bne.n	8002442 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8002406:	4b8c      	ldr	r3, [pc, #560]	@ (8002638 <parseDHCPMSG+0x294>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	7f9a      	ldrb	r2, [r3, #30]
 800240c:	4b8b      	ldr	r3, [pc, #556]	@ (800263c <parseDHCPMSG+0x298>)
 800240e:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d116      	bne.n	8002442 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8002414:	4b88      	ldr	r3, [pc, #544]	@ (8002638 <parseDHCPMSG+0x294>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	7fda      	ldrb	r2, [r3, #31]
 800241a:	4b88      	ldr	r3, [pc, #544]	@ (800263c <parseDHCPMSG+0x298>)
 800241c:	78db      	ldrb	r3, [r3, #3]
 800241e:	429a      	cmp	r2, r3
 8002420:	d10f      	bne.n	8002442 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8002422:	4b85      	ldr	r3, [pc, #532]	@ (8002638 <parseDHCPMSG+0x294>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f893 2020 	ldrb.w	r2, [r3, #32]
 800242a:	4b84      	ldr	r3, [pc, #528]	@ (800263c <parseDHCPMSG+0x298>)
 800242c:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800242e:	429a      	cmp	r2, r3
 8002430:	d107      	bne.n	8002442 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8002432:	4b81      	ldr	r3, [pc, #516]	@ (8002638 <parseDHCPMSG+0x294>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800243a:	4b80      	ldr	r3, [pc, #512]	@ (800263c <parseDHCPMSG+0x298>)
 800243c:	795b      	ldrb	r3, [r3, #5]
 800243e:	429a      	cmp	r2, r3
 8002440:	d001      	beq.n	8002446 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8002442:	2300      	movs	r3, #0
 8002444:	e1bd      	b.n	80027c2 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8002446:	4b7e      	ldr	r3, [pc, #504]	@ (8002640 <parseDHCPMSG+0x29c>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10b      	bne.n	8002466 <parseDHCPMSG+0xc2>
 800244e:	4b7c      	ldr	r3, [pc, #496]	@ (8002640 <parseDHCPMSG+0x29c>)
 8002450:	785b      	ldrb	r3, [r3, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d107      	bne.n	8002466 <parseDHCPMSG+0xc2>
 8002456:	4b7a      	ldr	r3, [pc, #488]	@ (8002640 <parseDHCPMSG+0x29c>)
 8002458:	789b      	ldrb	r3, [r3, #2]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d103      	bne.n	8002466 <parseDHCPMSG+0xc2>
 800245e:	4b78      	ldr	r3, [pc, #480]	@ (8002640 <parseDHCPMSG+0x29c>)
 8002460:	78db      	ldrb	r3, [r3, #3]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d029      	beq.n	80024ba <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8002466:	793a      	ldrb	r2, [r7, #4]
 8002468:	4b75      	ldr	r3, [pc, #468]	@ (8002640 <parseDHCPMSG+0x29c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d10e      	bne.n	800248e <parseDHCPMSG+0xea>
 8002470:	797a      	ldrb	r2, [r7, #5]
 8002472:	4b73      	ldr	r3, [pc, #460]	@ (8002640 <parseDHCPMSG+0x29c>)
 8002474:	785b      	ldrb	r3, [r3, #1]
 8002476:	429a      	cmp	r2, r3
 8002478:	d109      	bne.n	800248e <parseDHCPMSG+0xea>
 800247a:	79ba      	ldrb	r2, [r7, #6]
 800247c:	4b70      	ldr	r3, [pc, #448]	@ (8002640 <parseDHCPMSG+0x29c>)
 800247e:	789b      	ldrb	r3, [r3, #2]
 8002480:	429a      	cmp	r2, r3
 8002482:	d104      	bne.n	800248e <parseDHCPMSG+0xea>
 8002484:	79fa      	ldrb	r2, [r7, #7]
 8002486:	4b6e      	ldr	r3, [pc, #440]	@ (8002640 <parseDHCPMSG+0x29c>)
 8002488:	78db      	ldrb	r3, [r3, #3]
 800248a:	429a      	cmp	r2, r3
 800248c:	d015      	beq.n	80024ba <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 800248e:	793a      	ldrb	r2, [r7, #4]
 8002490:	4b6c      	ldr	r3, [pc, #432]	@ (8002644 <parseDHCPMSG+0x2a0>)
 8002492:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8002494:	429a      	cmp	r2, r3
 8002496:	d10e      	bne.n	80024b6 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8002498:	797a      	ldrb	r2, [r7, #5]
 800249a:	4b6a      	ldr	r3, [pc, #424]	@ (8002644 <parseDHCPMSG+0x2a0>)
 800249c:	785b      	ldrb	r3, [r3, #1]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d109      	bne.n	80024b6 <parseDHCPMSG+0x112>
 80024a2:	79ba      	ldrb	r2, [r7, #6]
 80024a4:	4b67      	ldr	r3, [pc, #412]	@ (8002644 <parseDHCPMSG+0x2a0>)
 80024a6:	789b      	ldrb	r3, [r3, #2]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d104      	bne.n	80024b6 <parseDHCPMSG+0x112>
 80024ac:	79fa      	ldrb	r2, [r7, #7]
 80024ae:	4b65      	ldr	r3, [pc, #404]	@ (8002644 <parseDHCPMSG+0x2a0>)
 80024b0:	78db      	ldrb	r3, [r3, #3]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d001      	beq.n	80024ba <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e183      	b.n	80027c2 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 80024ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002638 <parseDHCPMSG+0x294>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	33f0      	adds	r3, #240	@ 0xf0
 80024c4:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 80024c6:	8a3b      	ldrh	r3, [r7, #16]
 80024c8:	3bf0      	subs	r3, #240	@ 0xf0
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4413      	add	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 80024d0:	e170      	b.n	80027b4 <parseDHCPMSG+0x410>

			switch ( *p ) {
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b36      	cmp	r3, #54	@ 0x36
 80024d8:	dc76      	bgt.n	80025c8 <parseDHCPMSG+0x224>
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f2c0 815d 	blt.w	800279a <parseDHCPMSG+0x3f6>
 80024e0:	2b36      	cmp	r3, #54	@ 0x36
 80024e2:	f200 815a 	bhi.w	800279a <parseDHCPMSG+0x3f6>
 80024e6:	a201      	add	r2, pc, #4	@ (adr r2, 80024ec <parseDHCPMSG+0x148>)
 80024e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ec:	080025d5 	.word	0x080025d5
 80024f0:	080025f5 	.word	0x080025f5
 80024f4:	0800279b 	.word	0x0800279b
 80024f8:	0800264d 	.word	0x0800264d
 80024fc:	0800279b 	.word	0x0800279b
 8002500:	0800279b 	.word	0x0800279b
 8002504:	08002699 	.word	0x08002699
 8002508:	0800279b 	.word	0x0800279b
 800250c:	0800279b 	.word	0x0800279b
 8002510:	0800279b 	.word	0x0800279b
 8002514:	0800279b 	.word	0x0800279b
 8002518:	0800279b 	.word	0x0800279b
 800251c:	0800279b 	.word	0x0800279b
 8002520:	0800279b 	.word	0x0800279b
 8002524:	0800279b 	.word	0x0800279b
 8002528:	0800279b 	.word	0x0800279b
 800252c:	0800279b 	.word	0x0800279b
 8002530:	0800279b 	.word	0x0800279b
 8002534:	0800279b 	.word	0x0800279b
 8002538:	0800279b 	.word	0x0800279b
 800253c:	0800279b 	.word	0x0800279b
 8002540:	0800279b 	.word	0x0800279b
 8002544:	0800279b 	.word	0x0800279b
 8002548:	0800279b 	.word	0x0800279b
 800254c:	0800279b 	.word	0x0800279b
 8002550:	0800279b 	.word	0x0800279b
 8002554:	0800279b 	.word	0x0800279b
 8002558:	0800279b 	.word	0x0800279b
 800255c:	0800279b 	.word	0x0800279b
 8002560:	0800279b 	.word	0x0800279b
 8002564:	0800279b 	.word	0x0800279b
 8002568:	0800279b 	.word	0x0800279b
 800256c:	0800279b 	.word	0x0800279b
 8002570:	0800279b 	.word	0x0800279b
 8002574:	0800279b 	.word	0x0800279b
 8002578:	0800279b 	.word	0x0800279b
 800257c:	0800279b 	.word	0x0800279b
 8002580:	0800279b 	.word	0x0800279b
 8002584:	0800279b 	.word	0x0800279b
 8002588:	0800279b 	.word	0x0800279b
 800258c:	0800279b 	.word	0x0800279b
 8002590:	0800279b 	.word	0x0800279b
 8002594:	0800279b 	.word	0x0800279b
 8002598:	0800279b 	.word	0x0800279b
 800259c:	0800279b 	.word	0x0800279b
 80025a0:	0800279b 	.word	0x0800279b
 80025a4:	0800279b 	.word	0x0800279b
 80025a8:	0800279b 	.word	0x0800279b
 80025ac:	0800279b 	.word	0x0800279b
 80025b0:	0800279b 	.word	0x0800279b
 80025b4:	0800279b 	.word	0x0800279b
 80025b8:	080026e5 	.word	0x080026e5
 80025bc:	0800279b 	.word	0x0800279b
 80025c0:	080025dd 	.word	0x080025dd
 80025c4:	08002741 	.word	0x08002741
 80025c8:	2bff      	cmp	r3, #255	@ 0xff
 80025ca:	f040 80e6 	bne.w	800279a <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	617b      	str	r3, [r7, #20]
   				break;
 80025d2:	e0ef      	b.n	80027b4 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3301      	adds	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
   				break;
 80025da:	e0eb      	b.n	80027b4 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3301      	adds	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
   				p++;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3301      	adds	r3, #1
 80025e6:	617b      	str	r3, [r7, #20]
   				type = *p++;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	617a      	str	r2, [r7, #20]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	74fb      	strb	r3, [r7, #19]
   				break;
 80025f2:	e0df      	b.n	80027b4 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3301      	adds	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
   				p++;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	3301      	adds	r3, #1
 80025fe:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	617a      	str	r2, [r7, #20]
 8002606:	781a      	ldrb	r2, [r3, #0]
 8002608:	4b0f      	ldr	r3, [pc, #60]	@ (8002648 <parseDHCPMSG+0x2a4>)
 800260a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	617a      	str	r2, [r7, #20]
 8002612:	781a      	ldrb	r2, [r3, #0]
 8002614:	4b0c      	ldr	r3, [pc, #48]	@ (8002648 <parseDHCPMSG+0x2a4>)
 8002616:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	617a      	str	r2, [r7, #20]
 800261e:	781a      	ldrb	r2, [r3, #0]
 8002620:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <parseDHCPMSG+0x2a4>)
 8002622:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	617a      	str	r2, [r7, #20]
 800262a:	781a      	ldrb	r2, [r3, #0]
 800262c:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <parseDHCPMSG+0x2a4>)
 800262e:	70da      	strb	r2, [r3, #3]
   				break;
 8002630:	e0c0      	b.n	80027b4 <parseDHCPMSG+0x410>
 8002632:	bf00      	nop
 8002634:	20000df9 	.word	0x20000df9
 8002638:	20000e24 	.word	0x20000e24
 800263c:	20000e28 	.word	0x20000e28
 8002640:	20000dfc 	.word	0x20000dfc
 8002644:	20000e00 	.word	0x20000e00
 8002648:	20000e10 	.word	0x20000e10
   			case routersOnSubnet :
   				p++;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3301      	adds	r3, #1
 8002650:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	617a      	str	r2, [r7, #20]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	617a      	str	r2, [r7, #20]
 8002662:	781a      	ldrb	r2, [r3, #0]
 8002664:	4b59      	ldr	r3, [pc, #356]	@ (80027cc <parseDHCPMSG+0x428>)
 8002666:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	617a      	str	r2, [r7, #20]
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	4b56      	ldr	r3, [pc, #344]	@ (80027cc <parseDHCPMSG+0x428>)
 8002672:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	617a      	str	r2, [r7, #20]
 800267a:	781a      	ldrb	r2, [r3, #0]
 800267c:	4b53      	ldr	r3, [pc, #332]	@ (80027cc <parseDHCPMSG+0x428>)
 800267e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	617a      	str	r2, [r7, #20]
 8002686:	781a      	ldrb	r2, [r3, #0]
 8002688:	4b50      	ldr	r3, [pc, #320]	@ (80027cc <parseDHCPMSG+0x428>)
 800268a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800268c:	7afb      	ldrb	r3, [r7, #11]
 800268e:	3b04      	subs	r3, #4
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	4413      	add	r3, r2
 8002694:	617b      	str	r3, [r7, #20]
   				break;
 8002696:	e08d      	b.n	80027b4 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	3301      	adds	r3, #1
 800269c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	617a      	str	r2, [r7, #20]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	617a      	str	r2, [r7, #20]
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	4b47      	ldr	r3, [pc, #284]	@ (80027d0 <parseDHCPMSG+0x42c>)
 80026b2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	617a      	str	r2, [r7, #20]
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	4b44      	ldr	r3, [pc, #272]	@ (80027d0 <parseDHCPMSG+0x42c>)
 80026be:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	617a      	str	r2, [r7, #20]
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	4b41      	ldr	r3, [pc, #260]	@ (80027d0 <parseDHCPMSG+0x42c>)
 80026ca:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	617a      	str	r2, [r7, #20]
 80026d2:	781a      	ldrb	r2, [r3, #0]
 80026d4:	4b3e      	ldr	r3, [pc, #248]	@ (80027d0 <parseDHCPMSG+0x42c>)
 80026d6:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 80026d8:	7afb      	ldrb	r3, [r7, #11]
 80026da:	3b04      	subs	r3, #4
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	4413      	add	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]
   				break;
 80026e2:	e067      	b.n	80027b4 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3301      	adds	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	617a      	str	r2, [r7, #20]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	617a      	str	r2, [r7, #20]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b35      	ldr	r3, [pc, #212]	@ (80027d4 <parseDHCPMSG+0x430>)
 8002700:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002702:	4b34      	ldr	r3, [pc, #208]	@ (80027d4 <parseDHCPMSG+0x430>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	021a      	lsls	r2, r3, #8
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	1c59      	adds	r1, r3, #1
 800270c:	6179      	str	r1, [r7, #20]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	4413      	add	r3, r2
 8002712:	4a30      	ldr	r2, [pc, #192]	@ (80027d4 <parseDHCPMSG+0x430>)
 8002714:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002716:	4b2f      	ldr	r3, [pc, #188]	@ (80027d4 <parseDHCPMSG+0x430>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	021a      	lsls	r2, r3, #8
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	1c59      	adds	r1, r3, #1
 8002720:	6179      	str	r1, [r7, #20]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	4413      	add	r3, r2
 8002726:	4a2b      	ldr	r2, [pc, #172]	@ (80027d4 <parseDHCPMSG+0x430>)
 8002728:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800272a:	4b2a      	ldr	r3, [pc, #168]	@ (80027d4 <parseDHCPMSG+0x430>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	021a      	lsls	r2, r3, #8
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	1c59      	adds	r1, r3, #1
 8002734:	6179      	str	r1, [r7, #20]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	4413      	add	r3, r2
 800273a:	4a26      	ldr	r2, [pc, #152]	@ (80027d4 <parseDHCPMSG+0x430>)
 800273c:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 800273e:	e039      	b.n	80027b4 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	617a      	str	r2, [r7, #20]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	617a      	str	r2, [r7, #20]
 8002756:	781a      	ldrb	r2, [r3, #0]
 8002758:	4b1f      	ldr	r3, [pc, #124]	@ (80027d8 <parseDHCPMSG+0x434>)
 800275a:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	617a      	str	r2, [r7, #20]
 8002762:	781a      	ldrb	r2, [r3, #0]
 8002764:	4b1c      	ldr	r3, [pc, #112]	@ (80027d8 <parseDHCPMSG+0x434>)
 8002766:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	617a      	str	r2, [r7, #20]
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	4b19      	ldr	r3, [pc, #100]	@ (80027d8 <parseDHCPMSG+0x434>)
 8002772:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	617a      	str	r2, [r7, #20]
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	4b16      	ldr	r3, [pc, #88]	@ (80027d8 <parseDHCPMSG+0x434>)
 800277e:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8002780:	793a      	ldrb	r2, [r7, #4]
 8002782:	4b16      	ldr	r3, [pc, #88]	@ (80027dc <parseDHCPMSG+0x438>)
 8002784:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8002786:	797a      	ldrb	r2, [r7, #5]
 8002788:	4b14      	ldr	r3, [pc, #80]	@ (80027dc <parseDHCPMSG+0x438>)
 800278a:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 800278c:	79ba      	ldrb	r2, [r7, #6]
 800278e:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <parseDHCPMSG+0x438>)
 8002790:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8002792:	79fa      	ldrb	r2, [r7, #7]
 8002794:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <parseDHCPMSG+0x438>)
 8002796:	70da      	strb	r2, [r3, #3]
   				break;
 8002798:	e00c      	b.n	80027b4 <parseDHCPMSG+0x410>
   			default :
   				p++;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	3301      	adds	r3, #1
 800279e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	617a      	str	r2, [r7, #20]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 80027aa:	7afb      	ldrb	r3, [r7, #11]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	4413      	add	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]
   				break;
 80027b2:	bf00      	nop
		while ( p < e ) {
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	f4ff ae8a 	bcc.w	80024d2 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 80027be:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	371c      	adds	r7, #28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd90      	pop	{r4, r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000e0c 	.word	0x20000e0c
 80027d0:	20000e14 	.word	0x20000e14
 80027d4:	2000002c 	.word	0x2000002c
 80027d8:	20000dfc 	.word	0x20000dfc
 80027dc:	20000e00 	.word	0x20000e00

080027e0 <DHCP_run>:

uint8_t DHCP_run(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 80027e6:	4b7f      	ldr	r3, [pc, #508]	@ (80029e4 <DHCP_run+0x204>)
 80027e8:	f993 3000 	ldrsb.w	r3, [r3]
 80027ec:	2b06      	cmp	r3, #6
 80027ee:	d101      	bne.n	80027f4 <DHCP_run+0x14>
 80027f0:	2305      	movs	r3, #5
 80027f2:	e0f3      	b.n	80029dc <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 80027f4:	4b7c      	ldr	r3, [pc, #496]	@ (80029e8 <DHCP_run+0x208>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	3301      	adds	r3, #1
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002802:	4618      	mov	r0, r3
 8002804:	f002 fda2 	bl	800534c <WIZCHIP_READ>
 8002808:	4603      	mov	r3, r0
 800280a:	2b22      	cmp	r3, #34	@ 0x22
 800280c:	d006      	beq.n	800281c <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 800280e:	4b76      	ldr	r3, [pc, #472]	@ (80029e8 <DHCP_run+0x208>)
 8002810:	7818      	ldrb	r0, [r3, #0]
 8002812:	2300      	movs	r3, #0
 8002814:	2244      	movs	r2, #68	@ 0x44
 8002816:	2102      	movs	r1, #2
 8002818:	f001 fe7a 	bl	8004510 <socket>

	ret = DHCP_RUNNING;
 800281c:	2301      	movs	r3, #1
 800281e:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8002820:	f7ff fdc0 	bl	80023a4 <parseDHCPMSG>
 8002824:	4603      	mov	r3, r0
 8002826:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8002828:	4b6e      	ldr	r3, [pc, #440]	@ (80029e4 <DHCP_run+0x204>)
 800282a:	f993 3000 	ldrsb.w	r3, [r3]
 800282e:	2b04      	cmp	r3, #4
 8002830:	f200 80d0 	bhi.w	80029d4 <DHCP_run+0x1f4>
 8002834:	a201      	add	r2, pc, #4	@ (adr r2, 800283c <DHCP_run+0x5c>)
 8002836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283a:	bf00      	nop
 800283c:	08002851 	.word	0x08002851
 8002840:	08002875 	.word	0x08002875
 8002844:	080028b9 	.word	0x080028b9
 8002848:	08002909 	.word	0x08002909
 800284c:	08002963 	.word	0x08002963
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8002850:	4b66      	ldr	r3, [pc, #408]	@ (80029ec <DHCP_run+0x20c>)
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8002856:	4b65      	ldr	r3, [pc, #404]	@ (80029ec <DHCP_run+0x20c>)
 8002858:	2200      	movs	r2, #0
 800285a:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 800285c:	4b63      	ldr	r3, [pc, #396]	@ (80029ec <DHCP_run+0x20c>)
 800285e:	2200      	movs	r2, #0
 8002860:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8002862:	4b62      	ldr	r3, [pc, #392]	@ (80029ec <DHCP_run+0x20c>)
 8002864:	2200      	movs	r2, #0
 8002866:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8002868:	f7fe fffa 	bl	8001860 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 800286c:	4b5d      	ldr	r3, [pc, #372]	@ (80029e4 <DHCP_run+0x204>)
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
   		break;
 8002872:	e0b2      	b.n	80029da <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8002874:	79bb      	ldrb	r3, [r7, #6]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d119      	bne.n	80028ae <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800287a:	4b5d      	ldr	r3, [pc, #372]	@ (80029f0 <DHCP_run+0x210>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	7c1a      	ldrb	r2, [r3, #16]
 8002880:	4b5a      	ldr	r3, [pc, #360]	@ (80029ec <DHCP_run+0x20c>)
 8002882:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8002884:	4b5a      	ldr	r3, [pc, #360]	@ (80029f0 <DHCP_run+0x210>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	7c5a      	ldrb	r2, [r3, #17]
 800288a:	4b58      	ldr	r3, [pc, #352]	@ (80029ec <DHCP_run+0x20c>)
 800288c:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 800288e:	4b58      	ldr	r3, [pc, #352]	@ (80029f0 <DHCP_run+0x210>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	7c9a      	ldrb	r2, [r3, #18]
 8002894:	4b55      	ldr	r3, [pc, #340]	@ (80029ec <DHCP_run+0x20c>)
 8002896:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8002898:	4b55      	ldr	r3, [pc, #340]	@ (80029f0 <DHCP_run+0x210>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	7cda      	ldrb	r2, [r3, #19]
 800289e:	4b53      	ldr	r3, [pc, #332]	@ (80029ec <DHCP_run+0x20c>)
 80028a0:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 80028a2:	f7ff f9a3 	bl	8001bec <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 80028a6:	4b4f      	ldr	r3, [pc, #316]	@ (80029e4 <DHCP_run+0x204>)
 80028a8:	2202      	movs	r2, #2
 80028aa:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 80028ac:	e095      	b.n	80029da <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80028ae:	f000 f8b1 	bl	8002a14 <check_DHCP_timeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	71fb      	strb	r3, [r7, #7]
         break;
 80028b6:	e090      	b.n	80029da <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 80028b8:	79bb      	ldrb	r3, [r7, #6]
 80028ba:	2b05      	cmp	r3, #5
 80028bc:	d116      	bne.n	80028ec <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 80028be:	f000 f909 	bl	8002ad4 <check_DHCP_leasedIP>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 80028c8:	4b4a      	ldr	r3, [pc, #296]	@ (80029f4 <DHCP_run+0x214>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4798      	blx	r3
					reset_DHCP_timeout();
 80028ce:	f000 f9d3 	bl	8002c78 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 80028d2:	4b44      	ldr	r3, [pc, #272]	@ (80029e4 <DHCP_run+0x204>)
 80028d4:	2203      	movs	r2, #3
 80028d6:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 80028d8:	e07f      	b.n	80029da <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 80028da:	f000 f9cd 	bl	8002c78 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 80028de:	4b46      	ldr	r3, [pc, #280]	@ (80029f8 <DHCP_run+0x218>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 80028e4:	4b3f      	ldr	r3, [pc, #252]	@ (80029e4 <DHCP_run+0x204>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
		break;
 80028ea:	e076      	b.n	80029da <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80028ec:	79bb      	ldrb	r3, [r7, #6]
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d105      	bne.n	80028fe <DHCP_run+0x11e>
				reset_DHCP_timeout();
 80028f2:	f000 f9c1 	bl	8002c78 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80028f6:	4b3b      	ldr	r3, [pc, #236]	@ (80029e4 <DHCP_run+0x204>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
		break;
 80028fc:	e06d      	b.n	80029da <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80028fe:	f000 f889 	bl	8002a14 <check_DHCP_timeout>
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
		break;
 8002906:	e068      	b.n	80029da <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8002908:	2304      	movs	r3, #4
 800290a:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 800290c:	4b3b      	ldr	r3, [pc, #236]	@ (80029fc <DHCP_run+0x21c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d060      	beq.n	80029d8 <DHCP_run+0x1f8>
 8002916:	4b39      	ldr	r3, [pc, #228]	@ (80029fc <DHCP_run+0x21c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	085a      	lsrs	r2, r3, #1
 800291c:	4b38      	ldr	r3, [pc, #224]	@ (8002a00 <DHCP_run+0x220>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d259      	bcs.n	80029d8 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8002928:	4b30      	ldr	r3, [pc, #192]	@ (80029ec <DHCP_run+0x20c>)
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	4b35      	ldr	r3, [pc, #212]	@ (8002a04 <DHCP_run+0x224>)
 800292e:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8002930:	4b2e      	ldr	r3, [pc, #184]	@ (80029ec <DHCP_run+0x20c>)
 8002932:	785a      	ldrb	r2, [r3, #1]
 8002934:	4b33      	ldr	r3, [pc, #204]	@ (8002a04 <DHCP_run+0x224>)
 8002936:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8002938:	4b2c      	ldr	r3, [pc, #176]	@ (80029ec <DHCP_run+0x20c>)
 800293a:	789a      	ldrb	r2, [r3, #2]
 800293c:	4b31      	ldr	r3, [pc, #196]	@ (8002a04 <DHCP_run+0x224>)
 800293e:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8002940:	4b2a      	ldr	r3, [pc, #168]	@ (80029ec <DHCP_run+0x20c>)
 8002942:	78da      	ldrb	r2, [r3, #3]
 8002944:	4b2f      	ldr	r3, [pc, #188]	@ (8002a04 <DHCP_run+0x224>)
 8002946:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8002948:	4b2f      	ldr	r3, [pc, #188]	@ (8002a08 <DHCP_run+0x228>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	3301      	adds	r3, #1
 800294e:	4a2e      	ldr	r2, [pc, #184]	@ (8002a08 <DHCP_run+0x228>)
 8002950:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8002952:	f7ff f94b 	bl	8001bec <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8002956:	f000 f98f 	bl	8002c78 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800295a:	4b22      	ldr	r3, [pc, #136]	@ (80029e4 <DHCP_run+0x204>)
 800295c:	2204      	movs	r2, #4
 800295e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002960:	e03a      	b.n	80029d8 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8002962:	2304      	movs	r3, #4
 8002964:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8002966:	79bb      	ldrb	r3, [r7, #6]
 8002968:	2b05      	cmp	r3, #5
 800296a:	d125      	bne.n	80029b8 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 800296c:	4b27      	ldr	r3, [pc, #156]	@ (8002a0c <DHCP_run+0x22c>)
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002972:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <DHCP_run+0x224>)
 8002974:	781a      	ldrb	r2, [r3, #0]
 8002976:	4b1d      	ldr	r3, [pc, #116]	@ (80029ec <DHCP_run+0x20c>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d111      	bne.n	80029a2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800297e:	4b21      	ldr	r3, [pc, #132]	@ (8002a04 <DHCP_run+0x224>)
 8002980:	785a      	ldrb	r2, [r3, #1]
 8002982:	4b1a      	ldr	r3, [pc, #104]	@ (80029ec <DHCP_run+0x20c>)
 8002984:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002986:	429a      	cmp	r2, r3
 8002988:	d10b      	bne.n	80029a2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800298a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a04 <DHCP_run+0x224>)
 800298c:	789a      	ldrb	r2, [r3, #2]
 800298e:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <DHCP_run+0x20c>)
 8002990:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d105      	bne.n	80029a2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8002996:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <DHCP_run+0x224>)
 8002998:	78da      	ldrb	r2, [r3, #3]
 800299a:	4b14      	ldr	r3, [pc, #80]	@ (80029ec <DHCP_run+0x20c>)
 800299c:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d004      	beq.n	80029ac <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 80029a2:	2303      	movs	r3, #3
 80029a4:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 80029a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a10 <DHCP_run+0x230>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 80029ac:	f000 f964 	bl	8002c78 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 80029b0:	4b0c      	ldr	r3, [pc, #48]	@ (80029e4 <DHCP_run+0x204>)
 80029b2:	2203      	movs	r2, #3
 80029b4:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 80029b6:	e010      	b.n	80029da <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80029b8:	79bb      	ldrb	r3, [r7, #6]
 80029ba:	2b06      	cmp	r3, #6
 80029bc:	d105      	bne.n	80029ca <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 80029be:	f000 f95b 	bl	8002c78 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80029c2:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <DHCP_run+0x204>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	701a      	strb	r2, [r3, #0]
	   	break;
 80029c8:	e007      	b.n	80029da <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80029ca:	f000 f823 	bl	8002a14 <check_DHCP_timeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
	   	break;
 80029d2:	e002      	b.n	80029da <DHCP_run+0x1fa>
		default :
   		break;
 80029d4:	bf00      	nop
 80029d6:	e000      	b.n	80029da <DHCP_run+0x1fa>
		break;
 80029d8:	bf00      	nop
	}

	return ret;
 80029da:	79fb      	ldrb	r3, [r7, #7]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000e18 	.word	0x20000e18
 80029e8:	20000df9 	.word	0x20000df9
 80029ec:	20000e08 	.word	0x20000e08
 80029f0:	20000e24 	.word	0x20000e24
 80029f4:	2000003c 	.word	0x2000003c
 80029f8:	20000044 	.word	0x20000044
 80029fc:	2000002c 	.word	0x2000002c
 8002a00:	20000e1c 	.word	0x20000e1c
 8002a04:	20000e04 	.word	0x20000e04
 8002a08:	20000e20 	.word	0x20000e20
 8002a0c:	20000e19 	.word	0x20000e19
 8002a10:	20000040 	.word	0x20000040

08002a14 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8002a1e:	4b29      	ldr	r3, [pc, #164]	@ (8002ac4 <check_DHCP_timeout+0xb0>)
 8002a20:	f993 3000 	ldrsb.w	r3, [r3]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	dc2d      	bgt.n	8002a84 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8002a28:	4b27      	ldr	r3, [pc, #156]	@ (8002ac8 <check_DHCP_timeout+0xb4>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b27      	ldr	r3, [pc, #156]	@ (8002acc <check_DHCP_timeout+0xb8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d242      	bcs.n	8002aba <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8002a34:	4b26      	ldr	r3, [pc, #152]	@ (8002ad0 <check_DHCP_timeout+0xbc>)
 8002a36:	f993 3000 	ldrsb.w	r3, [r3]
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d00c      	beq.n	8002a58 <check_DHCP_timeout+0x44>
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	dc0d      	bgt.n	8002a5e <check_DHCP_timeout+0x4a>
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d002      	beq.n	8002a4c <check_DHCP_timeout+0x38>
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d003      	beq.n	8002a52 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8002a4a:	e008      	b.n	8002a5e <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8002a4c:	f7fe ff08 	bl	8001860 <send_DHCP_DISCOVER>
				break;
 8002a50:	e006      	b.n	8002a60 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8002a52:	f7ff f8cb 	bl	8001bec <send_DHCP_REQUEST>
				break;
 8002a56:	e003      	b.n	8002a60 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8002a58:	f7ff f8c8 	bl	8001bec <send_DHCP_REQUEST>
				break;
 8002a5c:	e000      	b.n	8002a60 <check_DHCP_timeout+0x4c>
				break;
 8002a5e:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8002a60:	4b1a      	ldr	r3, [pc, #104]	@ (8002acc <check_DHCP_timeout+0xb8>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8002a66:	4b19      	ldr	r3, [pc, #100]	@ (8002acc <check_DHCP_timeout+0xb8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	330a      	adds	r3, #10
 8002a6c:	4a16      	ldr	r2, [pc, #88]	@ (8002ac8 <check_DHCP_timeout+0xb4>)
 8002a6e:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8002a70:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <check_DHCP_timeout+0xb0>)
 8002a72:	f993 3000 	ldrsb.w	r3, [r3]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	b25a      	sxtb	r2, r3
 8002a7e:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <check_DHCP_timeout+0xb0>)
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	e01a      	b.n	8002aba <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8002a84:	4b12      	ldr	r3, [pc, #72]	@ (8002ad0 <check_DHCP_timeout+0xbc>)
 8002a86:	f993 3000 	ldrsb.w	r3, [r3]
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d00c      	beq.n	8002aa8 <check_DHCP_timeout+0x94>
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	dc10      	bgt.n	8002ab4 <check_DHCP_timeout+0xa0>
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d002      	beq.n	8002a9c <check_DHCP_timeout+0x88>
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d006      	beq.n	8002aa8 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8002a9a:	e00b      	b.n	8002ab4 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <check_DHCP_timeout+0xbc>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	71fb      	strb	r3, [r7, #7]
				break;
 8002aa6:	e006      	b.n	8002ab6 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8002aa8:	f7fe feda 	bl	8001860 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002aac:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <check_DHCP_timeout+0xbc>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
				break;
 8002ab2:	e000      	b.n	8002ab6 <check_DHCP_timeout+0xa2>
				break;
 8002ab4:	bf00      	nop
		}
		reset_DHCP_timeout();
 8002ab6:	f000 f8df 	bl	8002c78 <reset_DHCP_timeout>
	}
	return ret;
 8002aba:	79fb      	ldrb	r3, [r7, #7]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000e19 	.word	0x20000e19
 8002ac8:	20000030 	.word	0x20000030
 8002acc:	20000e1c 	.word	0x20000e1c
 8002ad0:	20000e18 	.word	0x20000e18

08002ad4 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8002ada:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002ade:	f002 fc35 	bl	800534c <WIZCHIP_READ>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8002ae6:	2103      	movs	r1, #3
 8002ae8:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002aec:	f002 fc7a 	bl	80053e4 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8002af0:	4b13      	ldr	r3, [pc, #76]	@ (8002b40 <check_DHCP_leasedIP+0x6c>)
 8002af2:	7818      	ldrb	r0, [r3, #0]
 8002af4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <check_DHCP_leasedIP+0x70>)
 8002afc:	2211      	movs	r2, #17
 8002afe:	4912      	ldr	r1, [pc, #72]	@ (8002b48 <check_DHCP_leasedIP+0x74>)
 8002b00:	f002 f904 	bl	8004d0c <sendto>
 8002b04:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002b0e:	f002 fc69 	bl	80053e4 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f113 0f0d 	cmn.w	r3, #13
 8002b18:	d101      	bne.n	8002b1e <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00c      	b.n	8002b38 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8002b1e:	f7ff faef 	bl	8002100 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8002b22:	4b0a      	ldr	r3, [pc, #40]	@ (8002b4c <check_DHCP_leasedIP+0x78>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8002b28:	bf00      	nop
 8002b2a:	4b08      	ldr	r3, [pc, #32]	@ (8002b4c <check_DHCP_leasedIP+0x78>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d9f9      	bls.n	8002b2a <check_DHCP_leasedIP+0x56>

		return 0;
 8002b36:	2300      	movs	r3, #0
	}
}	
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000df9 	.word	0x20000df9
 8002b44:	20000e08 	.word	0x20000e08
 8002b48:	080176dc 	.word	0x080176dc
 8002b4c:	20000e1c 	.word	0x20000e1c

08002b50 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	6039      	str	r1, [r7, #0]
 8002b5a:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8002b60:	2206      	movs	r2, #6
 8002b62:	493f      	ldr	r1, [pc, #252]	@ (8002c60 <DHCP_init+0x110>)
 8002b64:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002b68:	f002 fc8a 	bl	8005480 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8002b6c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c60 <DHCP_init+0x110>)
 8002b6e:	781a      	ldrb	r2, [r3, #0]
 8002b70:	4b3b      	ldr	r3, [pc, #236]	@ (8002c60 <DHCP_init+0x110>)
 8002b72:	785b      	ldrb	r3, [r3, #1]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	4b39      	ldr	r3, [pc, #228]	@ (8002c60 <DHCP_init+0x110>)
 8002b7a:	789b      	ldrb	r3, [r3, #2]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	4b37      	ldr	r3, [pc, #220]	@ (8002c60 <DHCP_init+0x110>)
 8002b82:	78db      	ldrb	r3, [r3, #3]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	4b35      	ldr	r3, [pc, #212]	@ (8002c60 <DHCP_init+0x110>)
 8002b8a:	791b      	ldrb	r3, [r3, #4]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	4b33      	ldr	r3, [pc, #204]	@ (8002c60 <DHCP_init+0x110>)
 8002b92:	795b      	ldrb	r3, [r3, #5]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d117      	bne.n	8002bcc <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8002b9c:	4b30      	ldr	r3, [pc, #192]	@ (8002c60 <DHCP_init+0x110>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8002ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8002c60 <DHCP_init+0x110>)
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8002ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c60 <DHCP_init+0x110>)
 8002baa:	22dc      	movs	r2, #220	@ 0xdc
 8002bac:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8002bae:	4b2c      	ldr	r3, [pc, #176]	@ (8002c60 <DHCP_init+0x110>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c60 <DHCP_init+0x110>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8002bba:	4b29      	ldr	r3, [pc, #164]	@ (8002c60 <DHCP_init+0x110>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8002bc0:	2206      	movs	r2, #6
 8002bc2:	4927      	ldr	r1, [pc, #156]	@ (8002c60 <DHCP_init+0x110>)
 8002bc4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002bc8:	f002 fcba 	bl	8005540 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8002bcc:	4a25      	ldr	r2, [pc, #148]	@ (8002c64 <DHCP_init+0x114>)
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8002bd2:	4a25      	ldr	r2, [pc, #148]	@ (8002c68 <DHCP_init+0x118>)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8002bd8:	4b24      	ldr	r3, [pc, #144]	@ (8002c6c <DHCP_init+0x11c>)
 8002bda:	4a25      	ldr	r2, [pc, #148]	@ (8002c70 <DHCP_init+0x120>)
 8002bdc:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8002bde:	4b20      	ldr	r3, [pc, #128]	@ (8002c60 <DHCP_init+0x110>)
 8002be0:	78db      	ldrb	r3, [r3, #3]
 8002be2:	461a      	mov	r2, r3
 8002be4:	4b21      	ldr	r3, [pc, #132]	@ (8002c6c <DHCP_init+0x11c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4413      	add	r3, r2
 8002bea:	4a20      	ldr	r2, [pc, #128]	@ (8002c6c <DHCP_init+0x11c>)
 8002bec:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8002bee:	4b1c      	ldr	r3, [pc, #112]	@ (8002c60 <DHCP_init+0x110>)
 8002bf0:	791b      	ldrb	r3, [r3, #4]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c6c <DHCP_init+0x11c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8002c6c <DHCP_init+0x11c>)
 8002bfc:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8002bfe:	4b18      	ldr	r3, [pc, #96]	@ (8002c60 <DHCP_init+0x110>)
 8002c00:	795b      	ldrb	r3, [r3, #5]
 8002c02:	461a      	mov	r2, r3
 8002c04:	4b19      	ldr	r3, [pc, #100]	@ (8002c6c <DHCP_init+0x11c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4413      	add	r3, r2
 8002c0a:	4a18      	ldr	r2, [pc, #96]	@ (8002c6c <DHCP_init+0x11c>)
 8002c0c:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8002c0e:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <DHCP_init+0x110>)
 8002c10:	78da      	ldrb	r2, [r3, #3]
 8002c12:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <DHCP_init+0x110>)
 8002c14:	791b      	ldrb	r3, [r3, #4]
 8002c16:	4053      	eors	r3, r2
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <DHCP_init+0x110>)
 8002c1c:	795b      	ldrb	r3, [r3, #5]
 8002c1e:	4053      	eors	r3, r2
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b11      	ldr	r3, [pc, #68]	@ (8002c6c <DHCP_init+0x11c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4413      	add	r3, r2
 8002c2a:	4a10      	ldr	r2, [pc, #64]	@ (8002c6c <DHCP_init+0x11c>)
 8002c2c:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8002c2e:	f107 030c 	add.w	r3, r7, #12
 8002c32:	2204      	movs	r2, #4
 8002c34:	4619      	mov	r1, r3
 8002c36:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002c3a:	f002 fc81 	bl	8005540 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8002c3e:	f107 030c 	add.w	r3, r7, #12
 8002c42:	2204      	movs	r2, #4
 8002c44:	4619      	mov	r1, r3
 8002c46:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002c4a:	f002 fc79 	bl	8005540 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8002c4e:	f000 f813 	bl	8002c78 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8002c52:	4b08      	ldr	r3, [pc, #32]	@ (8002c74 <DHCP_init+0x124>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000e28 	.word	0x20000e28
 8002c64:	20000df9 	.word	0x20000df9
 8002c68:	20000e24 	.word	0x20000e24
 8002c6c:	20000e20 	.word	0x20000e20
 8002c70:	12345678 	.word	0x12345678
 8002c74:	20000e18 	.word	0x20000e18

08002c78 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <reset_DHCP_timeout+0x20>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8002c82:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <reset_DHCP_timeout+0x24>)
 8002c84:	220a      	movs	r2, #10
 8002c86:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8002c88:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <reset_DHCP_timeout+0x28>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	20000e1c 	.word	0x20000e1c
 8002c9c:	20000030 	.word	0x20000030
 8002ca0:	20000e19 	.word	0x20000e19

08002ca4 <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8002cac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce0 <getIPfromDHCP+0x3c>)
 8002cae:	781a      	ldrb	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	4a09      	ldr	r2, [pc, #36]	@ (8002ce0 <getIPfromDHCP+0x3c>)
 8002cba:	7852      	ldrb	r2, [r2, #1]
 8002cbc:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	4a07      	ldr	r2, [pc, #28]	@ (8002ce0 <getIPfromDHCP+0x3c>)
 8002cc4:	7892      	ldrb	r2, [r2, #2]
 8002cc6:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3303      	adds	r3, #3
 8002ccc:	4a04      	ldr	r2, [pc, #16]	@ (8002ce0 <getIPfromDHCP+0x3c>)
 8002cce:	78d2      	ldrb	r2, [r2, #3]
 8002cd0:	701a      	strb	r2, [r3, #0]
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000e08 	.word	0x20000e08

08002ce4 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8002cec:	4b0c      	ldr	r3, [pc, #48]	@ (8002d20 <getGWfromDHCP+0x3c>)
 8002cee:	781a      	ldrb	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	4a09      	ldr	r2, [pc, #36]	@ (8002d20 <getGWfromDHCP+0x3c>)
 8002cfa:	7852      	ldrb	r2, [r2, #1]
 8002cfc:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3302      	adds	r3, #2
 8002d02:	4a07      	ldr	r2, [pc, #28]	@ (8002d20 <getGWfromDHCP+0x3c>)
 8002d04:	7892      	ldrb	r2, [r2, #2]
 8002d06:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3303      	adds	r3, #3
 8002d0c:	4a04      	ldr	r2, [pc, #16]	@ (8002d20 <getGWfromDHCP+0x3c>)
 8002d0e:	78d2      	ldrb	r2, [r2, #3]
 8002d10:	701a      	strb	r2, [r3, #0]
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000e0c 	.word	0x20000e0c

08002d24 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <getSNfromDHCP+0x3c>)
 8002d2e:	781a      	ldrb	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3301      	adds	r3, #1
 8002d38:	4a09      	ldr	r2, [pc, #36]	@ (8002d60 <getSNfromDHCP+0x3c>)
 8002d3a:	7852      	ldrb	r2, [r2, #1]
 8002d3c:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3302      	adds	r3, #2
 8002d42:	4a07      	ldr	r2, [pc, #28]	@ (8002d60 <getSNfromDHCP+0x3c>)
 8002d44:	7892      	ldrb	r2, [r2, #2]
 8002d46:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3303      	adds	r3, #3
 8002d4c:	4a04      	ldr	r2, [pc, #16]	@ (8002d60 <getSNfromDHCP+0x3c>)
 8002d4e:	78d2      	ldrb	r2, [r2, #3]
 8002d50:	701a      	strb	r2, [r3, #0]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000e10 	.word	0x20000e10

08002d64 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	2b09      	cmp	r3, #9
 8002d7a:	d803      	bhi.n	8002d84 <NibbleToHex+0x20>
    return nibble + '0';
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	3330      	adds	r3, #48	@ 0x30
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	e002      	b.n	8002d8a <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	3337      	adds	r3, #55	@ 0x37
 8002d88:	b2db      	uxtb	r3, r3
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <make_http_response_head>:
void make_http_response_head(
	char * buf, 	/**< pointer to response header to be made */
	char type, 	/**< response type */
	uint32_t len	/**< size of response header */
	)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	460b      	mov	r3, r1
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	72fb      	strb	r3, [r7, #11]
	char * head;
	char tmp[10];
			
	/*  file type*/
	if 	(type == PTYPE_HTML) 		head = RES_HTMLHEAD_OK;
 8002da6:	7afb      	ldrb	r3, [r7, #11]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d102      	bne.n	8002db2 <make_http_response_head+0x1a>
 8002dac:	4b42      	ldr	r3, [pc, #264]	@ (8002eb8 <make_http_response_head+0x120>)
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	e061      	b.n	8002e76 <make_http_response_head+0xde>
	else if (type == PTYPE_GIF)		head = RES_GIFHEAD_OK;
 8002db2:	7afb      	ldrb	r3, [r7, #11]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d102      	bne.n	8002dbe <make_http_response_head+0x26>
 8002db8:	4b40      	ldr	r3, [pc, #256]	@ (8002ebc <make_http_response_head+0x124>)
 8002dba:	61fb      	str	r3, [r7, #28]
 8002dbc:	e05b      	b.n	8002e76 <make_http_response_head+0xde>
	else if (type == PTYPE_TEXT)	head = RES_TEXTHEAD_OK;
 8002dbe:	7afb      	ldrb	r3, [r7, #11]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d102      	bne.n	8002dca <make_http_response_head+0x32>
 8002dc4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ec0 <make_http_response_head+0x128>)
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	e055      	b.n	8002e76 <make_http_response_head+0xde>
	else if (type == PTYPE_JPEG)	head = RES_JPEGHEAD_OK;
 8002dca:	7afb      	ldrb	r3, [r7, #11]
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d102      	bne.n	8002dd6 <make_http_response_head+0x3e>
 8002dd0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ec4 <make_http_response_head+0x12c>)
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	e04f      	b.n	8002e76 <make_http_response_head+0xde>
	else if (type == PTYPE_FLASH)	head = RES_FLASHHEAD_OK;
 8002dd6:	7afb      	ldrb	r3, [r7, #11]
 8002dd8:	2b05      	cmp	r3, #5
 8002dda:	d102      	bne.n	8002de2 <make_http_response_head+0x4a>
 8002ddc:	4b3a      	ldr	r3, [pc, #232]	@ (8002ec8 <make_http_response_head+0x130>)
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	e049      	b.n	8002e76 <make_http_response_head+0xde>
	else if (type == PTYPE_XML) 	head =  RES_XMLHEAD_OK;
 8002de2:	7afb      	ldrb	r3, [r7, #11]
 8002de4:	2b09      	cmp	r3, #9
 8002de6:	d102      	bne.n	8002dee <make_http_response_head+0x56>
 8002de8:	4b38      	ldr	r3, [pc, #224]	@ (8002ecc <make_http_response_head+0x134>)
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	e043      	b.n	8002e76 <make_http_response_head+0xde>
	else if (type == PTYPE_CSS) 	head = RES_CSSHEAD_OK;
 8002dee:	7afb      	ldrb	r3, [r7, #11]
 8002df0:	2b0a      	cmp	r3, #10
 8002df2:	d102      	bne.n	8002dfa <make_http_response_head+0x62>
 8002df4:	4b36      	ldr	r3, [pc, #216]	@ (8002ed0 <make_http_response_head+0x138>)
 8002df6:	61fb      	str	r3, [r7, #28]
 8002df8:	e03d      	b.n	8002e76 <make_http_response_head+0xde>
	else if (type == PTYPE_JSON)	head = RES_JSONHEAD_OK;
 8002dfa:	7afb      	ldrb	r3, [r7, #11]
 8002dfc:	2b0c      	cmp	r3, #12
 8002dfe:	d102      	bne.n	8002e06 <make_http_response_head+0x6e>
 8002e00:	4b34      	ldr	r3, [pc, #208]	@ (8002ed4 <make_http_response_head+0x13c>)
 8002e02:	61fb      	str	r3, [r7, #28]
 8002e04:	e037      	b.n	8002e76 <make_http_response_head+0xde>
	else if (type == PTYPE_JS)		head = RES_JSHEAD_OK;
 8002e06:	7afb      	ldrb	r3, [r7, #11]
 8002e08:	2b0b      	cmp	r3, #11
 8002e0a:	d102      	bne.n	8002e12 <make_http_response_head+0x7a>
 8002e0c:	4b32      	ldr	r3, [pc, #200]	@ (8002ed8 <make_http_response_head+0x140>)
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	e031      	b.n	8002e76 <make_http_response_head+0xde>
	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK;
 8002e12:	7afb      	ldrb	r3, [r7, #11]
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d102      	bne.n	8002e1e <make_http_response_head+0x86>
 8002e18:	4b30      	ldr	r3, [pc, #192]	@ (8002edc <make_http_response_head+0x144>)
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	e02b      	b.n	8002e76 <make_http_response_head+0xde>
	else if (type == PTYPE_PNG)		head = RES_PNGHEAD_OK;
 8002e1e:	7afb      	ldrb	r3, [r7, #11]
 8002e20:	2b0d      	cmp	r3, #13
 8002e22:	d102      	bne.n	8002e2a <make_http_response_head+0x92>
 8002e24:	4b2e      	ldr	r3, [pc, #184]	@ (8002ee0 <make_http_response_head+0x148>)
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	e025      	b.n	8002e76 <make_http_response_head+0xde>
	else if (type == PTYPE_ICO)		head = RES_ICOHEAD_OK;
 8002e2a:	7afb      	ldrb	r3, [r7, #11]
 8002e2c:	2b0e      	cmp	r3, #14
 8002e2e:	d102      	bne.n	8002e36 <make_http_response_head+0x9e>
 8002e30:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee4 <make_http_response_head+0x14c>)
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	e01f      	b.n	8002e76 <make_http_response_head+0xde>
	else if (type == PTYPE_TTF)		head = RES_TTFHEAD_OK;
 8002e36:	7afb      	ldrb	r3, [r7, #11]
 8002e38:	2b14      	cmp	r3, #20
 8002e3a:	d102      	bne.n	8002e42 <make_http_response_head+0xaa>
 8002e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee8 <make_http_response_head+0x150>)
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	e019      	b.n	8002e76 <make_http_response_head+0xde>
	else if (type == PTYPE_OTF)		head = RES_OTFHEAD_OK;
 8002e42:	7afb      	ldrb	r3, [r7, #11]
 8002e44:	2b15      	cmp	r3, #21
 8002e46:	d102      	bne.n	8002e4e <make_http_response_head+0xb6>
 8002e48:	4b28      	ldr	r3, [pc, #160]	@ (8002eec <make_http_response_head+0x154>)
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	e013      	b.n	8002e76 <make_http_response_head+0xde>
	else if (type == PTYPE_WOFF)	head = RES_WOFFHEAD_OK;
 8002e4e:	7afb      	ldrb	r3, [r7, #11]
 8002e50:	2b16      	cmp	r3, #22
 8002e52:	d102      	bne.n	8002e5a <make_http_response_head+0xc2>
 8002e54:	4b26      	ldr	r3, [pc, #152]	@ (8002ef0 <make_http_response_head+0x158>)
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	e00d      	b.n	8002e76 <make_http_response_head+0xde>
	else if (type == PTYPE_EOT)		head = RES_EOTHEAD_OK;
 8002e5a:	7afb      	ldrb	r3, [r7, #11]
 8002e5c:	2b17      	cmp	r3, #23
 8002e5e:	d102      	bne.n	8002e66 <make_http_response_head+0xce>
 8002e60:	4b24      	ldr	r3, [pc, #144]	@ (8002ef4 <make_http_response_head+0x15c>)
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	e007      	b.n	8002e76 <make_http_response_head+0xde>
	else if (type == PTYPE_SVG)		head = RES_SVGHEAD_OK;
 8002e66:	7afb      	ldrb	r3, [r7, #11]
 8002e68:	2b18      	cmp	r3, #24
 8002e6a:	d102      	bne.n	8002e72 <make_http_response_head+0xda>
 8002e6c:	4b22      	ldr	r3, [pc, #136]	@ (8002ef8 <make_http_response_head+0x160>)
 8002e6e:	61fb      	str	r3, [r7, #28]
 8002e70:	e001      	b.n	8002e76 <make_http_response_head+0xde>
	{
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else head = NULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
#endif	

	sprintf(tmp, "%ld", len);
 8002e76:	f107 0310 	add.w	r3, r7, #16
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	491f      	ldr	r1, [pc, #124]	@ (8002efc <make_http_response_head+0x164>)
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 fbf0 	bl	8006664 <siprintf>
	strcpy(buf, head);
 8002e84:	69f9      	ldr	r1, [r7, #28]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f003 fe03 	bl	8006a92 <strcpy>
	strcat(buf, tmp);
 8002e8c:	f107 0310 	add.w	r3, r7, #16
 8002e90:	4619      	mov	r1, r3
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f003 fce6 	bl	8006864 <strcat>
	strcat(buf, "\r\n\r\n");
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f7fd f9ab 	bl	80001f4 <strlen>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	4a16      	ldr	r2, [pc, #88]	@ (8002f00 <make_http_response_head+0x168>)
 8002ea8:	6810      	ldr	r0, [r2, #0]
 8002eaa:	6018      	str	r0, [r3, #0]
 8002eac:	7912      	ldrb	r2, [r2, #4]
 8002eae:	711a      	strb	r2, [r3, #4]
}
 8002eb0:	bf00      	nop
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	080176f0 	.word	0x080176f0
 8002ebc:	08017744 	.word	0x08017744
 8002ec0:	08017780 	.word	0x08017780
 8002ec4:	080177bc 	.word	0x080177bc
 8002ec8:	080177f8 	.word	0x080177f8
 8002ecc:	08017848 	.word	0x08017848
 8002ed0:	0801789c 	.word	0x0801789c
 8002ed4:	080178d8 	.word	0x080178d8
 8002ed8:	0801791c 	.word	0x0801791c
 8002edc:	08017964 	.word	0x08017964
 8002ee0:	080179a0 	.word	0x080179a0
 8002ee4:	080179dc 	.word	0x080179dc
 8002ee8:	08017a1c 	.word	0x08017a1c
 8002eec:	08017a6c 	.word	0x08017a6c
 8002ef0:	08017abc 	.word	0x08017abc
 8002ef4:	08017b04 	.word	0x08017b04
 8002ef8:	08017b54 	.word	0x08017b54
 8002efc:	08017b94 	.word	0x08017b94
 8002f00:	08017b98 	.word	0x08017b98

08002f04 <find_http_uri_type>:
 */ 
void find_http_uri_type(
	uint8_t * type, 	/**< type to be returned */
	uint8_t * buff		/**< file name */
	) 
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char * buf;
	buf = (char *)buff;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	60fb      	str	r3, [r7, #12]

	if 	(strstr(buf, ".htm")	|| strstr(buf, ".html"))	*type = PTYPE_HTML;
 8002f12:	499f      	ldr	r1, [pc, #636]	@ (8003190 <find_http_uri_type+0x28c>)
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f003 fd23 	bl	8006960 <strstr>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d106      	bne.n	8002f2e <find_http_uri_type+0x2a>
 8002f20:	499c      	ldr	r1, [pc, #624]	@ (8003194 <find_http_uri_type+0x290>)
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f003 fd1c 	bl	8006960 <strstr>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <find_http_uri_type+0x32>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
 8002f34:	e127      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".gif"))							*type = PTYPE_GIF;
 8002f36:	4998      	ldr	r1, [pc, #608]	@ (8003198 <find_http_uri_type+0x294>)
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f003 fd11 	bl	8006960 <strstr>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <find_http_uri_type+0x48>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	701a      	strb	r2, [r3, #0]
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
	else 													*type = PTYPE_ERR;
}
 8002f4a:	e11c      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".text") 	|| strstr(buf,".txt"))	*type = PTYPE_TEXT;
 8002f4c:	4993      	ldr	r1, [pc, #588]	@ (800319c <find_http_uri_type+0x298>)
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f003 fd06 	bl	8006960 <strstr>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <find_http_uri_type+0x64>
 8002f5a:	4991      	ldr	r1, [pc, #580]	@ (80031a0 <find_http_uri_type+0x29c>)
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f003 fcff 	bl	8006960 <strstr>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <find_http_uri_type+0x6c>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e10a      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".jpeg") 	|| strstr(buf,".jpg"))	*type = PTYPE_JPEG;
 8002f70:	498c      	ldr	r1, [pc, #560]	@ (80031a4 <find_http_uri_type+0x2a0>)
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f003 fcf4 	bl	8006960 <strstr>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <find_http_uri_type+0x88>
 8002f7e:	498a      	ldr	r1, [pc, #552]	@ (80031a8 <find_http_uri_type+0x2a4>)
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f003 fced 	bl	8006960 <strstr>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <find_http_uri_type+0x90>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2204      	movs	r2, #4
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	e0f8      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".swf")) 							*type = PTYPE_FLASH;
 8002f94:	4985      	ldr	r1, [pc, #532]	@ (80031ac <find_http_uri_type+0x2a8>)
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f003 fce2 	bl	8006960 <strstr>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <find_http_uri_type+0xa6>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2205      	movs	r2, #5
 8002fa6:	701a      	strb	r2, [r3, #0]
}
 8002fa8:	e0ed      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".cgi") 	|| strstr(buf,".CGI"))	*type = PTYPE_CGI;
 8002faa:	4981      	ldr	r1, [pc, #516]	@ (80031b0 <find_http_uri_type+0x2ac>)
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f003 fcd7 	bl	8006960 <strstr>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d106      	bne.n	8002fc6 <find_http_uri_type+0xc2>
 8002fb8:	497e      	ldr	r1, [pc, #504]	@ (80031b4 <find_http_uri_type+0x2b0>)
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f003 fcd0 	bl	8006960 <strstr>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <find_http_uri_type+0xca>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2208      	movs	r2, #8
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	e0db      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".json") 	|| strstr(buf,".JSON"))	*type = PTYPE_JSON;
 8002fce:	497a      	ldr	r1, [pc, #488]	@ (80031b8 <find_http_uri_type+0x2b4>)
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f003 fcc5 	bl	8006960 <strstr>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <find_http_uri_type+0xe6>
 8002fdc:	4977      	ldr	r1, [pc, #476]	@ (80031bc <find_http_uri_type+0x2b8>)
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f003 fcbe 	bl	8006960 <strstr>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <find_http_uri_type+0xee>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	220c      	movs	r2, #12
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	e0c9      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".js") 	|| strstr(buf,".JS"))	*type = PTYPE_JS;
 8002ff2:	4973      	ldr	r1, [pc, #460]	@ (80031c0 <find_http_uri_type+0x2bc>)
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f003 fcb3 	bl	8006960 <strstr>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <find_http_uri_type+0x10a>
 8003000:	4970      	ldr	r1, [pc, #448]	@ (80031c4 <find_http_uri_type+0x2c0>)
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f003 fcac 	bl	8006960 <strstr>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <find_http_uri_type+0x112>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	220b      	movs	r2, #11
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e0b7      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".CGI") 	|| strstr(buf,".cgi"))	*type = PTYPE_CGI;
 8003016:	4967      	ldr	r1, [pc, #412]	@ (80031b4 <find_http_uri_type+0x2b0>)
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f003 fca1 	bl	8006960 <strstr>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d106      	bne.n	8003032 <find_http_uri_type+0x12e>
 8003024:	4962      	ldr	r1, [pc, #392]	@ (80031b0 <find_http_uri_type+0x2ac>)
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f003 fc9a 	bl	8006960 <strstr>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <find_http_uri_type+0x136>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2208      	movs	r2, #8
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	e0a5      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".xml") 	|| strstr(buf,".XML"))	*type = PTYPE_XML;
 800303a:	4963      	ldr	r1, [pc, #396]	@ (80031c8 <find_http_uri_type+0x2c4>)
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f003 fc8f 	bl	8006960 <strstr>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d106      	bne.n	8003056 <find_http_uri_type+0x152>
 8003048:	4960      	ldr	r1, [pc, #384]	@ (80031cc <find_http_uri_type+0x2c8>)
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f003 fc88 	bl	8006960 <strstr>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <find_http_uri_type+0x15a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2209      	movs	r2, #9
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	e093      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".css") 	|| strstr(buf,".CSS"))	*type = PTYPE_CSS;
 800305e:	495c      	ldr	r1, [pc, #368]	@ (80031d0 <find_http_uri_type+0x2cc>)
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f003 fc7d 	bl	8006960 <strstr>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <find_http_uri_type+0x176>
 800306c:	4959      	ldr	r1, [pc, #356]	@ (80031d4 <find_http_uri_type+0x2d0>)
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f003 fc76 	bl	8006960 <strstr>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <find_http_uri_type+0x17e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	220a      	movs	r2, #10
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	e081      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".png") 	|| strstr(buf,".PNG"))	*type = PTYPE_PNG;
 8003082:	4955      	ldr	r1, [pc, #340]	@ (80031d8 <find_http_uri_type+0x2d4>)
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f003 fc6b 	bl	8006960 <strstr>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d106      	bne.n	800309e <find_http_uri_type+0x19a>
 8003090:	4952      	ldr	r1, [pc, #328]	@ (80031dc <find_http_uri_type+0x2d8>)
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f003 fc64 	bl	8006960 <strstr>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <find_http_uri_type+0x1a2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	220d      	movs	r2, #13
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	e06f      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ico") 	|| strstr(buf,".ICO"))	*type = PTYPE_ICO;
 80030a6:	494e      	ldr	r1, [pc, #312]	@ (80031e0 <find_http_uri_type+0x2dc>)
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f003 fc59 	bl	8006960 <strstr>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d106      	bne.n	80030c2 <find_http_uri_type+0x1be>
 80030b4:	494b      	ldr	r1, [pc, #300]	@ (80031e4 <find_http_uri_type+0x2e0>)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f003 fc52 	bl	8006960 <strstr>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <find_http_uri_type+0x1c6>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	220e      	movs	r2, #14
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	e05d      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ttf") 	|| strstr(buf,".TTF"))	*type = PTYPE_TTF;
 80030ca:	4947      	ldr	r1, [pc, #284]	@ (80031e8 <find_http_uri_type+0x2e4>)
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f003 fc47 	bl	8006960 <strstr>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d106      	bne.n	80030e6 <find_http_uri_type+0x1e2>
 80030d8:	4944      	ldr	r1, [pc, #272]	@ (80031ec <find_http_uri_type+0x2e8>)
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f003 fc40 	bl	8006960 <strstr>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <find_http_uri_type+0x1ea>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2214      	movs	r2, #20
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e04b      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
 80030ee:	4940      	ldr	r1, [pc, #256]	@ (80031f0 <find_http_uri_type+0x2ec>)
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f003 fc35 	bl	8006960 <strstr>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d106      	bne.n	800310a <find_http_uri_type+0x206>
 80030fc:	493d      	ldr	r1, [pc, #244]	@ (80031f4 <find_http_uri_type+0x2f0>)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f003 fc2e 	bl	8006960 <strstr>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <find_http_uri_type+0x20e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2215      	movs	r2, #21
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	e039      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
 8003112:	4939      	ldr	r1, [pc, #228]	@ (80031f8 <find_http_uri_type+0x2f4>)
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f003 fc23 	bl	8006960 <strstr>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d106      	bne.n	800312e <find_http_uri_type+0x22a>
 8003120:	4936      	ldr	r1, [pc, #216]	@ (80031fc <find_http_uri_type+0x2f8>)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f003 fc1c 	bl	8006960 <strstr>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <find_http_uri_type+0x232>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2216      	movs	r2, #22
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	e027      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
 8003136:	4932      	ldr	r1, [pc, #200]	@ (8003200 <find_http_uri_type+0x2fc>)
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f003 fc11 	bl	8006960 <strstr>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d106      	bne.n	8003152 <find_http_uri_type+0x24e>
 8003144:	492f      	ldr	r1, [pc, #188]	@ (8003204 <find_http_uri_type+0x300>)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f003 fc0a 	bl	8006960 <strstr>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <find_http_uri_type+0x256>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2217      	movs	r2, #23
 8003156:	701a      	strb	r2, [r3, #0]
 8003158:	e015      	b.n	8003186 <find_http_uri_type+0x282>
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
 800315a:	492b      	ldr	r1, [pc, #172]	@ (8003208 <find_http_uri_type+0x304>)
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f003 fbff 	bl	8006960 <strstr>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d106      	bne.n	8003176 <find_http_uri_type+0x272>
 8003168:	4928      	ldr	r1, [pc, #160]	@ (800320c <find_http_uri_type+0x308>)
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f003 fbf8 	bl	8006960 <strstr>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <find_http_uri_type+0x27a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2218      	movs	r2, #24
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e003      	b.n	8003186 <find_http_uri_type+0x282>
	else 													*type = PTYPE_ERR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
}
 8003184:	e7ff      	b.n	8003186 <find_http_uri_type+0x282>
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	08017ba0 	.word	0x08017ba0
 8003194:	08017ba8 	.word	0x08017ba8
 8003198:	08017bb0 	.word	0x08017bb0
 800319c:	08017bb8 	.word	0x08017bb8
 80031a0:	08017bc0 	.word	0x08017bc0
 80031a4:	08017bc8 	.word	0x08017bc8
 80031a8:	08017bd0 	.word	0x08017bd0
 80031ac:	08017bd8 	.word	0x08017bd8
 80031b0:	08017be0 	.word	0x08017be0
 80031b4:	08017be8 	.word	0x08017be8
 80031b8:	08017bf0 	.word	0x08017bf0
 80031bc:	08017bf8 	.word	0x08017bf8
 80031c0:	08017c00 	.word	0x08017c00
 80031c4:	08017c04 	.word	0x08017c04
 80031c8:	08017c08 	.word	0x08017c08
 80031cc:	08017c10 	.word	0x08017c10
 80031d0:	08017c18 	.word	0x08017c18
 80031d4:	08017c20 	.word	0x08017c20
 80031d8:	08017c28 	.word	0x08017c28
 80031dc:	08017c30 	.word	0x08017c30
 80031e0:	08017c38 	.word	0x08017c38
 80031e4:	08017c40 	.word	0x08017c40
 80031e8:	08017c48 	.word	0x08017c48
 80031ec:	08017c50 	.word	0x08017c50
 80031f0:	08017c58 	.word	0x08017c58
 80031f4:	08017c60 	.word	0x08017c60
 80031f8:	08017c68 	.word	0x08017c68
 80031fc:	08017c70 	.word	0x08017c70
 8003200:	08017c78 	.word	0x08017c78
 8003204:	08017c80 	.word	0x08017c80
 8003208:	08017c88 	.word	0x08017c88
 800320c:	08017c90 	.word	0x08017c90

08003210 <parse_http_request>:
 */ 
void parse_http_request(
	st_http_request * request, 	/**< request to be returned */
	uint8_t * buf				/**< pointer to be parsed */
	)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  char * nexttok;
  nexttok = strtok((char*)buf," ");
 800321a:	4932      	ldr	r1, [pc, #200]	@ (80032e4 <parse_http_request+0xd4>)
 800321c:	6838      	ldr	r0, [r7, #0]
 800321e:	f003 fb43 	bl	80068a8 <strtok>
 8003222:	60f8      	str	r0, [r7, #12]
  if(!nexttok)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <parse_http_request+0x22>
  {
    request->METHOD = METHOD_ERR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
    return;
 8003230:	e054      	b.n	80032dc <parse_http_request+0xcc>
  }
  if(!strcmp(nexttok, "GET") || !strcmp(nexttok,"get"))
 8003232:	492d      	ldr	r1, [pc, #180]	@ (80032e8 <parse_http_request+0xd8>)
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f7fc ffd3 	bl	80001e0 <strcmp>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d006      	beq.n	800324e <parse_http_request+0x3e>
 8003240:	492a      	ldr	r1, [pc, #168]	@ (80032ec <parse_http_request+0xdc>)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f7fc ffcc 	bl	80001e0 <strcmp>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d108      	bne.n	8003260 <parse_http_request+0x50>
  {
    request->METHOD = METHOD_GET;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
    nexttok = strtok(NULL," ");
 8003254:	4923      	ldr	r1, [pc, #140]	@ (80032e4 <parse_http_request+0xd4>)
 8003256:	2000      	movs	r0, #0
 8003258:	f003 fb26 	bl	80068a8 <strtok>
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	e030      	b.n	80032c2 <parse_http_request+0xb2>

  }
  else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok,"head"))
 8003260:	4923      	ldr	r1, [pc, #140]	@ (80032f0 <parse_http_request+0xe0>)
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f7fc ffbc 	bl	80001e0 <strcmp>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <parse_http_request+0x6c>
 800326e:	4921      	ldr	r1, [pc, #132]	@ (80032f4 <parse_http_request+0xe4>)
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f7fc ffb5 	bl	80001e0 <strcmp>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d108      	bne.n	800328e <parse_http_request+0x7e>
  {
    request->METHOD = METHOD_HEAD;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
    nexttok = strtok(NULL," ");
 8003282:	4918      	ldr	r1, [pc, #96]	@ (80032e4 <parse_http_request+0xd4>)
 8003284:	2000      	movs	r0, #0
 8003286:	f003 fb0f 	bl	80068a8 <strtok>
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	e019      	b.n	80032c2 <parse_http_request+0xb2>

  }
  else if (!strcmp(nexttok, "POST") || !strcmp(nexttok,"post"))
 800328e:	491a      	ldr	r1, [pc, #104]	@ (80032f8 <parse_http_request+0xe8>)
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7fc ffa5 	bl	80001e0 <strcmp>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d006      	beq.n	80032aa <parse_http_request+0x9a>
 800329c:	4917      	ldr	r1, [pc, #92]	@ (80032fc <parse_http_request+0xec>)
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7fc ff9e 	bl	80001e0 <strcmp>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d108      	bne.n	80032bc <parse_http_request+0xac>
  {
    nexttok = strtok(NULL,"\0");
 80032aa:	4915      	ldr	r1, [pc, #84]	@ (8003300 <parse_http_request+0xf0>)
 80032ac:	2000      	movs	r0, #0
 80032ae:	f003 fafb 	bl	80068a8 <strtok>
 80032b2:	60f8      	str	r0, [r7, #12]
    request->METHOD = METHOD_POST;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2203      	movs	r2, #3
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e002      	b.n	80032c2 <parse_http_request+0xb2>
  }
  else
  {
    request->METHOD = METHOD_ERR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
  }

  if(!nexttok)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d103      	bne.n	80032d0 <parse_http_request+0xc0>
  {
    request->METHOD = METHOD_ERR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
    return;
 80032ce:	e005      	b.n	80032dc <parse_http_request+0xcc>
  }
  strcpy((char *)request->URI, nexttok);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3302      	adds	r3, #2
 80032d4:	68f9      	ldr	r1, [r7, #12]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f003 fbdb 	bl	8006a92 <strcpy>
}
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	08017c98 	.word	0x08017c98
 80032e8:	08017c9c 	.word	0x08017c9c
 80032ec:	08017ca0 	.word	0x08017ca0
 80032f0:	08017ca4 	.word	0x08017ca4
 80032f4:	08017cac 	.word	0x08017cac
 80032f8:	08017cb4 	.word	0x08017cb4
 80032fc:	08017cbc 	.word	0x08017cbc
 8003300:	08017cc4 	.word	0x08017cc4

08003304 <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t * uri, uint8_t * uri_buf)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
	uint8_t * uri_ptr;
	if(!uri) return 0;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <get_http_uri_name+0x14>
 8003314:	2300      	movs	r3, #0
 8003316:	e017      	b.n	8003348 <get_http_uri_name+0x44>

	strcpy((char *)uri_buf, (char *)uri);
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	6838      	ldr	r0, [r7, #0]
 800331c:	f003 fbb9 	bl	8006a92 <strcpy>

	uri_ptr = (uint8_t *)strtok((char *)uri_buf, " ?");
 8003320:	490b      	ldr	r1, [pc, #44]	@ (8003350 <get_http_uri_name+0x4c>)
 8003322:	6838      	ldr	r0, [r7, #0]
 8003324:	f003 fac0 	bl	80068a8 <strtok>
 8003328:	60f8      	str	r0, [r7, #12]

	if(strcmp((char *)uri_ptr,"/")) uri_ptr++;
 800332a:	490a      	ldr	r1, [pc, #40]	@ (8003354 <get_http_uri_name+0x50>)
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7fc ff57 	bl	80001e0 <strcmp>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <get_http_uri_name+0x3a>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	3301      	adds	r3, #1
 800333c:	60fb      	str	r3, [r7, #12]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 800333e:	68f9      	ldr	r1, [r7, #12]
 8003340:	6838      	ldr	r0, [r7, #0]
 8003342:	f003 fba6 	bl	8006a92 <strcpy>

#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	return 1;
 8003346:	2301      	movs	r3, #1
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	08017ce0 	.word	0x08017ce0
 8003354:	08017ce4 	.word	0x08017ce4

08003358 <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
void mid(char* src, char* s1, char* s2, char* sub)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
	char* sub1;
	char* sub2;
	uint16_t n;

	sub1=strstr((char*)src,(char*)s1);
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f003 faf9 	bl	8006960 <strstr>
 800336e:	61f8      	str	r0, [r7, #28]
	sub1+=strlen((char*)s1);
 8003370:	68b8      	ldr	r0, [r7, #8]
 8003372:	f7fc ff3f 	bl	80001f4 <strlen>
 8003376:	4602      	mov	r2, r0
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	4413      	add	r3, r2
 800337c:	61fb      	str	r3, [r7, #28]
	sub2=strstr((char*)sub1,(char*)s2);
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	69f8      	ldr	r0, [r7, #28]
 8003382:	f003 faed 	bl	8006960 <strstr>
 8003386:	61b8      	str	r0, [r7, #24]

	n=sub2-sub1;
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	82fb      	strh	r3, [r7, #22]
	strncpy((char*)sub,(char*)sub1,n);
 8003390:	8afb      	ldrh	r3, [r7, #22]
 8003392:	461a      	mov	r2, r3
 8003394:	69f9      	ldr	r1, [r7, #28]
 8003396:	6838      	ldr	r0, [r7, #0]
 8003398:	f003 fa73 	bl	8006882 <strncpy>
	sub[n]='\0';
 800339c:	8afb      	ldrh	r3, [r7, #22]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	4413      	add	r3, r2
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
}
 80033a6:	bf00      	nop
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 80033ae:	b480      	push	{r7}
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	bf00      	nop
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <default_wdt_reset>:
void default_wdt_reset(void) {;}
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <httpServer_Sockinit>:
void (*HTTPServer_ReStart)(void) = default_mcu_reset;
void (*HTTPServer_WDT_Reset)(void) = default_wdt_reset;

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	6039      	str	r1, [r7, #0]
 80033d6:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 80033d8:	2300      	movs	r3, #0
 80033da:	73fb      	strb	r3, [r7, #15]
 80033dc:	e009      	b.n	80033f2 <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	441a      	add	r2, r3
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	7811      	ldrb	r1, [r2, #0]
 80033e8:	4a07      	ldr	r2, [pc, #28]	@ (8003408 <httpServer_Sockinit+0x3c>)
 80033ea:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	3301      	adds	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d3f1      	bcc.n	80033de <httpServer_Sockinit+0x12>
	}
}
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	20000e30 	.word	0x20000e30

0800340c <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	4a03      	ldr	r2, [pc, #12]	@ (8003428 <getHTTPSocketNum+0x1c>)
 800341a:	5cd3      	ldrb	r3, [r2, r3]
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	20000e30 	.word	0x20000e30

0800342c <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
 800343a:	e00b      	b.n	8003454 <getHTTPSequenceNum+0x28>
		if(HTTPSock_Num[i] == socket) return i;
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	4a0b      	ldr	r2, [pc, #44]	@ (800346c <getHTTPSequenceNum+0x40>)
 8003440:	5cd3      	ldrb	r3, [r2, r3]
 8003442:	79fa      	ldrb	r2, [r7, #7]
 8003444:	429a      	cmp	r2, r3
 8003446:	d102      	bne.n	800344e <getHTTPSequenceNum+0x22>
 8003448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800344c:	e007      	b.n	800345e <getHTTPSequenceNum+0x32>
	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	3301      	adds	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	2b07      	cmp	r3, #7
 8003458:	d9f0      	bls.n	800343c <getHTTPSequenceNum+0x10>

	return -1;
 800345a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	20000e30 	.word	0x20000e30

08003470 <httpServer_init>:

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 8003480:	4a07      	ldr	r2, [pc, #28]	@ (80034a0 <httpServer_init+0x30>)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 8003486:	4a07      	ldr	r2, [pc, #28]	@ (80034a4 <httpServer_init+0x34>)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	6839      	ldr	r1, [r7, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff9b 	bl	80033cc <httpServer_Sockinit>
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000e48 	.word	0x20000e48
 80034a4:	20000e4c 	.word	0x20000e4c

080034a8 <reg_httpServer_cbfunc>:


/* Register the call back functions for HTTP Server */
void reg_httpServer_cbfunc(void(*mcu_reset)(void), void(*wdt_reset)(void))
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
	// Callback: HW Reset and WDT reset function for each MCU platforms
	if(mcu_reset) HTTPServer_ReStart = mcu_reset;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <reg_httpServer_cbfunc+0x16>
 80034b8:	4a07      	ldr	r2, [pc, #28]	@ (80034d8 <reg_httpServer_cbfunc+0x30>)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6013      	str	r3, [r2, #0]
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <reg_httpServer_cbfunc+0x22>
 80034c4:	4a05      	ldr	r2, [pc, #20]	@ (80034dc <reg_httpServer_cbfunc+0x34>)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6013      	str	r3, [r2, #0]
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000048 	.word	0x20000048
 80034dc:	2000004c 	.word	0x2000004c

080034e0 <httpServer_run>:


void httpServer_run(uint8_t seqnum)
{
 80034e0:	b590      	push	{r4, r7, lr}
 80034e2:	b089      	sub	sp, #36	@ 0x24
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	4603      	mov	r3, r0
 80034e8:	71fb      	strb	r3, [r7, #7]
	uint8_t s;	// socket number
	uint16_t len;
	uint32_t gettime = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]

#ifdef _HTTPSERVER_DEBUG_
	uint8_t destip[4] = {0, };
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]
	uint16_t destport = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	81fb      	strh	r3, [r7, #14]
#endif

	http_request = (st_http_request *)pHTTP_RX;		// Structure of HTTP Request
 80034f6:	4bc2      	ldr	r3, [pc, #776]	@ (8003800 <httpServer_run+0x320>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4ac2      	ldr	r2, [pc, #776]	@ (8003804 <httpServer_run+0x324>)
 80034fc:	6013      	str	r3, [r2, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 80034fe:	4bc2      	ldr	r3, [pc, #776]	@ (8003808 <httpServer_run+0x328>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4ac2      	ldr	r2, [pc, #776]	@ (800380c <httpServer_run+0x32c>)
 8003504:	6013      	str	r3, [r2, #0]

	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff ff7f 	bl	800340c <getHTTPSocketNum>
 800350e:	4603      	mov	r3, r0
 8003510:	737b      	strb	r3, [r7, #13]

	/* HTTP Service Start */
	switch(getSn_SR(s))
 8003512:	7b7b      	ldrb	r3, [r7, #13]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	3301      	adds	r3, #1
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800351e:	4618      	mov	r0, r3
 8003520:	f001 ff14 	bl	800534c <WIZCHIP_READ>
 8003524:	4603      	mov	r3, r0
 8003526:	2b1c      	cmp	r3, #28
 8003528:	f200 81ad 	bhi.w	8003886 <httpServer_run+0x3a6>
 800352c:	a201      	add	r2, pc, #4	@ (adr r2, 8003534 <httpServer_run+0x54>)
 800352e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003532:	bf00      	nop
 8003534:	08003851 	.word	0x08003851
 8003538:	08003887 	.word	0x08003887
 800353c:	08003887 	.word	0x08003887
 8003540:	08003887 	.word	0x08003887
 8003544:	08003887 	.word	0x08003887
 8003548:	08003887 	.word	0x08003887
 800354c:	08003887 	.word	0x08003887
 8003550:	08003887 	.word	0x08003887
 8003554:	08003887 	.word	0x08003887
 8003558:	08003887 	.word	0x08003887
 800355c:	08003887 	.word	0x08003887
 8003560:	08003887 	.word	0x08003887
 8003564:	08003887 	.word	0x08003887
 8003568:	08003887 	.word	0x08003887
 800356c:	08003887 	.word	0x08003887
 8003570:	08003887 	.word	0x08003887
 8003574:	08003887 	.word	0x08003887
 8003578:	08003887 	.word	0x08003887
 800357c:	08003887 	.word	0x08003887
 8003580:	0800387d 	.word	0x0800387d
 8003584:	08003887 	.word	0x08003887
 8003588:	08003887 	.word	0x08003887
 800358c:	08003887 	.word	0x08003887
 8003590:	080035a9 	.word	0x080035a9
 8003594:	08003887 	.word	0x08003887
 8003598:	08003887 	.word	0x08003887
 800359c:	08003887 	.word	0x08003887
 80035a0:	08003887 	.word	0x08003887
 80035a4:	0800383d 	.word	0x0800383d
	{
		case SOCK_ESTABLISHED:
			// Interrupt clear
			if(getSn_IR(s) & Sn_IR_CON)
 80035a8:	7b7b      	ldrb	r3, [r7, #13]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	3301      	adds	r3, #1
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 fec9 	bl	800534c <WIZCHIP_READ>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d009      	beq.n	80035d8 <httpServer_run+0xf8>
			{
				setSn_IR(s, Sn_IR_CON);
 80035c4:	7b7b      	ldrb	r3, [r7, #13]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	3301      	adds	r3, #1
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80035d0:	2101      	movs	r1, #1
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 ff06 	bl	80053e4 <WIZCHIP_WRITE>
			}

			// HTTP Process states
			switch(HTTPSock_Status[seqnum].sock_status)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	4a8d      	ldr	r2, [pc, #564]	@ (8003810 <httpServer_run+0x330>)
 80035dc:	2194      	movs	r1, #148	@ 0x94
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	f000 80db 	beq.w	80037a2 <httpServer_run+0x2c2>
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	f300 8105 	bgt.w	80037fc <httpServer_run+0x31c>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <httpServer_run+0x11e>
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	f000 80b2 	beq.w	8003760 <httpServer_run+0x280>
#endif
					http_disconnect(s);
					break;

				default :
					break;
 80035fc:	e0fe      	b.n	80037fc <httpServer_run+0x31c>
					if ((len = getSn_RX_RSR(s)) > 0)
 80035fe:	7b7b      	ldrb	r3, [r7, #13]
 8003600:	4618      	mov	r0, r3
 8003602:	f002 f846 	bl	8005692 <getSn_RX_RSR>
 8003606:	4603      	mov	r3, r0
 8003608:	82fb      	strh	r3, [r7, #22]
 800360a:	8afb      	ldrh	r3, [r7, #22]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8111 	beq.w	8003834 <httpServer_run+0x354>
						if (len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 8003612:	8afb      	ldrh	r3, [r7, #22]
 8003614:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003618:	d902      	bls.n	8003620 <httpServer_run+0x140>
 800361a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800361e:	82fb      	strh	r3, [r7, #22]
						len = recv(s, (uint8_t *)http_request, len);
 8003620:	4b78      	ldr	r3, [pc, #480]	@ (8003804 <httpServer_run+0x324>)
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	8afa      	ldrh	r2, [r7, #22]
 8003626:	7b7b      	ldrb	r3, [r7, #13]
 8003628:	4618      	mov	r0, r3
 800362a:	f001 fabb 	bl	8004ba4 <recv>
 800362e:	4603      	mov	r3, r0
 8003630:	82fb      	strh	r3, [r7, #22]
						*(((uint8_t *)http_request) + len) = '\0';
 8003632:	4b74      	ldr	r3, [pc, #464]	@ (8003804 <httpServer_run+0x324>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	8afb      	ldrh	r3, [r7, #22]
 8003638:	4413      	add	r3, r2
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]
						parse_http_request(parsed_http_request, (uint8_t *)http_request);
 800363e:	4b73      	ldr	r3, [pc, #460]	@ (800380c <httpServer_run+0x32c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a70      	ldr	r2, [pc, #448]	@ (8003804 <httpServer_run+0x324>)
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fde1 	bl	8003210 <parse_http_request>
						getSn_DIPR(s, destip);
 800364e:	7b7b      	ldrb	r3, [r7, #13]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	3301      	adds	r3, #1
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800365a:	4618      	mov	r0, r3
 800365c:	f107 0308 	add.w	r3, r7, #8
 8003660:	2204      	movs	r2, #4
 8003662:	4619      	mov	r1, r3
 8003664:	f001 ff0c 	bl	8005480 <WIZCHIP_READ_BUF>
						destport = getSn_DPORT(s);
 8003668:	7b7b      	ldrb	r3, [r7, #13]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	3301      	adds	r3, #1
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003674:	4618      	mov	r0, r3
 8003676:	f001 fe69 	bl	800534c <WIZCHIP_READ>
 800367a:	4603      	mov	r3, r0
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	b29c      	uxth	r4, r3
 8003680:	7b7b      	ldrb	r3, [r7, #13]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	3301      	adds	r3, #1
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 800368c:	4618      	mov	r0, r3
 800368e:	f001 fe5d 	bl	800534c <WIZCHIP_READ>
 8003692:	4603      	mov	r3, r0
 8003694:	4423      	add	r3, r4
 8003696:	81fb      	strh	r3, [r7, #14]
						printf("\r\n");
 8003698:	485e      	ldr	r0, [pc, #376]	@ (8003814 <httpServer_run+0x334>)
 800369a:	f002 ffdb 	bl	8006654 <puts>
						printf("> HTTPSocket[%d] : HTTP Request received ", s);
 800369e:	7b7b      	ldrb	r3, [r7, #13]
 80036a0:	4619      	mov	r1, r3
 80036a2:	485d      	ldr	r0, [pc, #372]	@ (8003818 <httpServer_run+0x338>)
 80036a4:	f002 ff6e 	bl	8006584 <iprintf>
						printf("from %d.%d.%d.%d : %d\r\n", destip[0], destip[1], destip[2], destip[3], destport);
 80036a8:	7a3b      	ldrb	r3, [r7, #8]
 80036aa:	4619      	mov	r1, r3
 80036ac:	7a7b      	ldrb	r3, [r7, #9]
 80036ae:	4618      	mov	r0, r3
 80036b0:	7abb      	ldrb	r3, [r7, #10]
 80036b2:	461c      	mov	r4, r3
 80036b4:	7afb      	ldrb	r3, [r7, #11]
 80036b6:	461a      	mov	r2, r3
 80036b8:	89fb      	ldrh	r3, [r7, #14]
 80036ba:	9301      	str	r3, [sp, #4]
 80036bc:	9200      	str	r2, [sp, #0]
 80036be:	4623      	mov	r3, r4
 80036c0:	4602      	mov	r2, r0
 80036c2:	4856      	ldr	r0, [pc, #344]	@ (800381c <httpServer_run+0x33c>)
 80036c4:	f002 ff5e 	bl	8006584 <iprintf>
						printf("> HTTPSocket[%d] : [State] STATE_HTTP_REQ_DONE\r\n", s);
 80036c8:	7b7b      	ldrb	r3, [r7, #13]
 80036ca:	4619      	mov	r1, r3
 80036cc:	4854      	ldr	r0, [pc, #336]	@ (8003820 <httpServer_run+0x340>)
 80036ce:	f002 ff59 	bl	8006584 <iprintf>
						http_process_handler(s, parsed_http_request);
 80036d2:	4b4e      	ldr	r3, [pc, #312]	@ (800380c <httpServer_run+0x32c>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	7b7b      	ldrb	r3, [r7, #13]
 80036d8:	4611      	mov	r1, r2
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fafe 	bl	8003cdc <http_process_handler>
						gettime = get_httpServer_timecount();
 80036e0:	f000 fda8 	bl	8004234 <get_httpServer_timecount>
 80036e4:	6138      	str	r0, [r7, #16]
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 80036e6:	e00c      	b.n	8003702 <httpServer_run+0x222>
							if((get_httpServer_timecount() - gettime) > 3)
 80036e8:	f000 fda4 	bl	8004234 <get_httpServer_timecount>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d905      	bls.n	8003702 <httpServer_run+0x222>
								printf("> HTTPSocket[%d] : [State] STATE_HTTP_REQ_DONE: TX Buffer clear timeout\r\n", s);
 80036f6:	7b7b      	ldrb	r3, [r7, #13]
 80036f8:	4619      	mov	r1, r3
 80036fa:	484a      	ldr	r0, [pc, #296]	@ (8003824 <httpServer_run+0x344>)
 80036fc:	f002 ff42 	bl	8006584 <iprintf>
								break;
 8003700:	e012      	b.n	8003728 <httpServer_run+0x248>
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 8003702:	7b7b      	ldrb	r3, [r7, #13]
 8003704:	4618      	mov	r0, r3
 8003706:	f001 ff7b 	bl	8005600 <getSn_TX_FSR>
 800370a:	4603      	mov	r3, r0
 800370c:	461c      	mov	r4, r3
 800370e:	7b7b      	ldrb	r3, [r7, #13]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	3301      	adds	r3, #1
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800371a:	4618      	mov	r0, r3
 800371c:	f001 fe16 	bl	800534c <WIZCHIP_READ>
 8003720:	4603      	mov	r3, r0
 8003722:	029b      	lsls	r3, r3, #10
 8003724:	429c      	cmp	r4, r3
 8003726:	d1df      	bne.n	80036e8 <httpServer_run+0x208>
						if(HTTPSock_Status[seqnum].file_len > 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	4a39      	ldr	r2, [pc, #228]	@ (8003810 <httpServer_run+0x330>)
 800372c:	2194      	movs	r1, #148	@ 0x94
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	3388      	adds	r3, #136	@ 0x88
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <httpServer_run+0x26e>
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	4a34      	ldr	r2, [pc, #208]	@ (8003810 <httpServer_run+0x330>)
 8003740:	2194      	movs	r1, #148	@ 0x94
 8003742:	fb01 f303 	mul.w	r3, r1, r3
 8003746:	4413      	add	r3, r2
 8003748:	2203      	movs	r2, #3
 800374a:	701a      	strb	r2, [r3, #0]
					break;
 800374c:	e072      	b.n	8003834 <httpServer_run+0x354>
						else HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	4a2f      	ldr	r2, [pc, #188]	@ (8003810 <httpServer_run+0x330>)
 8003752:	2194      	movs	r1, #148	@ 0x94
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	2204      	movs	r2, #4
 800375c:	701a      	strb	r2, [r3, #0]
					break;
 800375e:	e069      	b.n	8003834 <httpServer_run+0x354>
					printf("> HTTPSocket[%d] : [State] STATE_HTTP_RES_INPROC\r\n", s);
 8003760:	7b7b      	ldrb	r3, [r7, #13]
 8003762:	4619      	mov	r1, r3
 8003764:	4830      	ldr	r0, [pc, #192]	@ (8003828 <httpServer_run+0x348>)
 8003766:	f002 ff0d 	bl	8006584 <iprintf>
					send_http_response_body(s, 0, http_response, 0, 0);
 800376a:	4b30      	ldr	r3, [pc, #192]	@ (800382c <httpServer_run+0x34c>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	7b78      	ldrb	r0, [r7, #13]
 8003770:	2300      	movs	r3, #0
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	2300      	movs	r3, #0
 8003776:	2100      	movs	r1, #0
 8003778:	f000 f916 	bl	80039a8 <send_http_response_body>
					if(HTTPSock_Status[seqnum].file_len == 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	4a24      	ldr	r2, [pc, #144]	@ (8003810 <httpServer_run+0x330>)
 8003780:	2194      	movs	r1, #148	@ 0x94
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3388      	adds	r3, #136	@ 0x88
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d153      	bne.n	8003838 <httpServer_run+0x358>
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	4a1f      	ldr	r2, [pc, #124]	@ (8003810 <httpServer_run+0x330>)
 8003794:	2194      	movs	r1, #148	@ 0x94
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	2204      	movs	r2, #4
 800379e:	701a      	strb	r2, [r3, #0]
					break;
 80037a0:	e04a      	b.n	8003838 <httpServer_run+0x358>
					printf("> HTTPSocket[%d] : [State] STATE_HTTP_RES_DONE\r\n", s);
 80037a2:	7b7b      	ldrb	r3, [r7, #13]
 80037a4:	4619      	mov	r1, r3
 80037a6:	4822      	ldr	r0, [pc, #136]	@ (8003830 <httpServer_run+0x350>)
 80037a8:	f002 feec 	bl	8006584 <iprintf>
					HTTPSock_Status[seqnum].file_len = 0;
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	4a18      	ldr	r2, [pc, #96]	@ (8003810 <httpServer_run+0x330>)
 80037b0:	2194      	movs	r1, #148	@ 0x94
 80037b2:	fb01 f303 	mul.w	r3, r1, r3
 80037b6:	4413      	add	r3, r2
 80037b8:	3388      	adds	r3, #136	@ 0x88
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_offset = 0;
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	4a13      	ldr	r2, [pc, #76]	@ (8003810 <httpServer_run+0x330>)
 80037c2:	2194      	movs	r1, #148	@ 0x94
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	338c      	adds	r3, #140	@ 0x8c
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_start = 0;
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003810 <httpServer_run+0x330>)
 80037d4:	2194      	movs	r1, #148	@ 0x94
 80037d6:	fb01 f303 	mul.w	r3, r1, r3
 80037da:	4413      	add	r3, r2
 80037dc:	3384      	adds	r3, #132	@ 0x84
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003810 <httpServer_run+0x330>)
 80037e6:	2194      	movs	r1, #148	@ 0x94
 80037e8:	fb01 f303 	mul.w	r3, r1, r3
 80037ec:	4413      	add	r3, r2
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]
					http_disconnect(s);
 80037f2:	7b7b      	ldrb	r3, [r7, #13]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fa4f 	bl	8003c98 <http_disconnect>
					break;
 80037fa:	e01e      	b.n	800383a <httpServer_run+0x35a>
					break;
 80037fc:	bf00      	nop
 80037fe:	e045      	b.n	800388c <httpServer_run+0x3ac>
 8003800:	20000e4c 	.word	0x20000e4c
 8003804:	20000e38 	.word	0x20000e38
 8003808:	20000e48 	.word	0x20000e48
 800380c:	20000e3c 	.word	0x20000e3c
 8003810:	20000e54 	.word	0x20000e54
 8003814:	08017cec 	.word	0x08017cec
 8003818:	08017cf0 	.word	0x08017cf0
 800381c:	08017d1c 	.word	0x08017d1c
 8003820:	08017d34 	.word	0x08017d34
 8003824:	08017d68 	.word	0x08017d68
 8003828:	08017db4 	.word	0x08017db4
 800382c:	20000e40 	.word	0x20000e40
 8003830:	08017de8 	.word	0x08017de8
					break;
 8003834:	bf00      	nop
 8003836:	e029      	b.n	800388c <httpServer_run+0x3ac>
					break;
 8003838:	bf00      	nop
			}
			break;
 800383a:	e027      	b.n	800388c <httpServer_run+0x3ac>

		case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s);	// if a peer requests to close the current connection
 800383c:	7b7b      	ldrb	r3, [r7, #13]
 800383e:	4619      	mov	r1, r3
 8003840:	4814      	ldr	r0, [pc, #80]	@ (8003894 <httpServer_run+0x3b4>)
 8003842:	f002 fe9f 	bl	8006584 <iprintf>
#endif
			disconnect(s);
 8003846:	7b7b      	ldrb	r3, [r7, #13]
 8003848:	4618      	mov	r0, r3
 800384a:	f001 f83d 	bl	80048c8 <disconnect>
			break;
 800384e:	e01d      	b.n	800388c <httpServer_run+0x3ac>

		case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : CLOSED\r\n", s);
 8003850:	7b7b      	ldrb	r3, [r7, #13]
 8003852:	4619      	mov	r1, r3
 8003854:	4810      	ldr	r0, [pc, #64]	@ (8003898 <httpServer_run+0x3b8>)
 8003856:	f002 fe95 	bl	8006584 <iprintf>
#endif
			if(socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s)    /* Reinitialize the socket */
 800385a:	7b78      	ldrb	r0, [r7, #13]
 800385c:	2300      	movs	r3, #0
 800385e:	2250      	movs	r2, #80	@ 0x50
 8003860:	2101      	movs	r1, #1
 8003862:	f000 fe55 	bl	8004510 <socket>
 8003866:	4603      	mov	r3, r0
 8003868:	461a      	mov	r2, r3
 800386a:	7b7b      	ldrb	r3, [r7, #13]
 800386c:	429a      	cmp	r2, r3
 800386e:	d10c      	bne.n	800388a <httpServer_run+0x3aa>
			{
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : OPEN\r\n", s);
 8003870:	7b7b      	ldrb	r3, [r7, #13]
 8003872:	4619      	mov	r1, r3
 8003874:	4809      	ldr	r0, [pc, #36]	@ (800389c <httpServer_run+0x3bc>)
 8003876:	f002 fe85 	bl	8006584 <iprintf>
#endif
			}
			break;
 800387a:	e006      	b.n	800388a <httpServer_run+0x3aa>

		case SOCK_INIT:
			listen(s);
 800387c:	7b7b      	ldrb	r3, [r7, #13]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 ffc8 	bl	8004814 <listen>
			break;
 8003884:	e002      	b.n	800388c <httpServer_run+0x3ac>

		case SOCK_LISTEN:
			break;

		default :
			break;
 8003886:	bf00      	nop
 8003888:	e000      	b.n	800388c <httpServer_run+0x3ac>
			break;
 800388a:	bf00      	nop
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 800388c:	bf00      	nop
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	bd90      	pop	{r4, r7, pc}
 8003894:	08017e1c 	.word	0x08017e1c
 8003898:	08017e3c 	.word	0x08017e3c
 800389c:	08017e58 	.word	0x08017e58

080038a0 <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 80038a0:	b590      	push	{r4, r7, lr}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	603a      	str	r2, [r7, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	71fb      	strb	r3, [r7, #7]
 80038ae:	460b      	mov	r3, r1
 80038b0:	71bb      	strb	r3, [r7, #6]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80bb      	strh	r3, [r7, #4]
	switch(http_status)
 80038b6:	88bb      	ldrh	r3, [r7, #4]
 80038b8:	f5b3 7fca 	cmp.w	r3, #404	@ 0x194
 80038bc:	d032      	beq.n	8003924 <send_http_response_header+0x84>
 80038be:	f5b3 7fca 	cmp.w	r3, #404	@ 0x194
 80038c2:	dc3e      	bgt.n	8003942 <send_http_response_header+0xa2>
 80038c4:	2bc8      	cmp	r3, #200	@ 0xc8
 80038c6:	d003      	beq.n	80038d0 <send_http_response_header+0x30>
 80038c8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80038cc:	d01b      	beq.n	8003906 <send_http_response_header+0x66>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_NOT_FOUND\r\n", s);
#endif
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
			break;
		default:
			break;
 80038ce:	e038      	b.n	8003942 <send_http_response_header+0xa2>
			if((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 80038d0:	79bb      	ldrb	r3, [r7, #6]
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d00f      	beq.n	80038f6 <send_http_response_header+0x56>
 80038d6:	79bb      	ldrb	r3, [r7, #6]
 80038d8:	2b09      	cmp	r3, #9
 80038da:	d00c      	beq.n	80038f6 <send_http_response_header+0x56>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_OK\r\n", s);
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	4619      	mov	r1, r3
 80038e0:	4829      	ldr	r0, [pc, #164]	@ (8003988 <send_http_response_header+0xe8>)
 80038e2:	f002 fe4f 	bl	8006584 <iprintf>
				make_http_response_head((char*)http_response, content_type, body_len);
 80038e6:	4b29      	ldr	r3, [pc, #164]	@ (800398c <send_http_response_header+0xec>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	79b9      	ldrb	r1, [r7, #6]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fa52 	bl	8002d98 <make_http_response_head>
			break;
 80038f4:	e026      	b.n	8003944 <send_http_response_header+0xa4>
			printf("> HTTPSocket[%d] : HTTP Response Header - NONE / CGI or XML\r\n", s);
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	4619      	mov	r1, r3
 80038fa:	4825      	ldr	r0, [pc, #148]	@ (8003990 <send_http_response_header+0xf0>)
 80038fc:	f002 fe42 	bl	8006584 <iprintf>
				http_status = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	80bb      	strh	r3, [r7, #4]
			break;
 8003904:	e01e      	b.n	8003944 <send_http_response_header+0xa4>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_BAD_REQ\r\n", s);
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	4619      	mov	r1, r3
 800390a:	4822      	ldr	r0, [pc, #136]	@ (8003994 <send_http_response_header+0xf4>)
 800390c:	f002 fe3a 	bl	8006584 <iprintf>
			memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 8003910:	4b1e      	ldr	r3, [pc, #120]	@ (800398c <send_http_response_header+0xec>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a20      	ldr	r2, [pc, #128]	@ (8003998 <send_http_response_header+0xf8>)
 8003916:	4618      	mov	r0, r3
 8003918:	4611      	mov	r1, r2
 800391a:	2376      	movs	r3, #118	@ 0x76
 800391c:	461a      	mov	r2, r3
 800391e:	f003 f8c0 	bl	8006aa2 <memcpy>
			break;
 8003922:	e00f      	b.n	8003944 <send_http_response_header+0xa4>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_NOT_FOUND\r\n", s);
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	4619      	mov	r1, r3
 8003928:	481c      	ldr	r0, [pc, #112]	@ (800399c <send_http_response_header+0xfc>)
 800392a:	f002 fe2b 	bl	8006584 <iprintf>
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 800392e:	4b17      	ldr	r3, [pc, #92]	@ (800398c <send_http_response_header+0xec>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1b      	ldr	r2, [pc, #108]	@ (80039a0 <send_http_response_header+0x100>)
 8003934:	4618      	mov	r0, r3
 8003936:	4611      	mov	r1, r2
 8003938:	2399      	movs	r3, #153	@ 0x99
 800393a:	461a      	mov	r2, r3
 800393c:	f003 f8b1 	bl	8006aa2 <memcpy>
			break;
 8003940:	e000      	b.n	8003944 <send_http_response_header+0xa4>
			break;
 8003942:	bf00      	nop
	}

	// Send the HTTP Response 'header'
	if(http_status)
 8003944:	88bb      	ldrh	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d01a      	beq.n	8003980 <send_http_response_header+0xe0>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
 800394a:	79fc      	ldrb	r4, [r7, #7]
 800394c:	4b0f      	ldr	r3, [pc, #60]	@ (800398c <send_http_response_header+0xec>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7fc fc4f 	bl	80001f4 <strlen>
 8003956:	4603      	mov	r3, r0
 8003958:	b29b      	uxth	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	4621      	mov	r1, r4
 800395e:	4811      	ldr	r0, [pc, #68]	@ (80039a4 <send_http_response_header+0x104>)
 8003960:	f002 fe10 	bl	8006584 <iprintf>
#endif
		send(s, http_response, strlen((char *)http_response));
 8003964:	4b09      	ldr	r3, [pc, #36]	@ (800398c <send_http_response_header+0xec>)
 8003966:	681c      	ldr	r4, [r3, #0]
 8003968:	4b08      	ldr	r3, [pc, #32]	@ (800398c <send_http_response_header+0xec>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fc41 	bl	80001f4 <strlen>
 8003972:	4603      	mov	r3, r0
 8003974:	b29a      	uxth	r2, r3
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	4621      	mov	r1, r4
 800397a:	4618      	mov	r0, r3
 800397c:	f001 f81a 	bl	80049b4 <send>
	}
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bd90      	pop	{r4, r7, pc}
 8003988:	08017e74 	.word	0x08017e74
 800398c:	20000e40 	.word	0x20000e40
 8003990:	08017eac 	.word	0x08017eac
 8003994:	08017eec 	.word	0x08017eec
 8003998:	080185c0 	.word	0x080185c0
 800399c:	08017f28 	.word	0x08017f28
 80039a0:	08018524 	.word	0x08018524
 80039a4:	08017f68 	.word	0x08017f68

080039a8 <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t * uri_name, uint8_t * buf, uint32_t start_addr, uint32_t file_len)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	74fb      	strb	r3, [r7, #19]
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff fd34 	bl	800342c <getHTTPSequenceNum>
 80039c4:	4603      	mov	r3, r0
 80039c6:	74bb      	strb	r3, [r7, #18]
 80039c8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	f000 811b 	beq.w	8003c0a <send_http_response_body+0x262>

	// Send the HTTP Response 'body'; requested file
	if(!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 80039d4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80039d8:	4a8e      	ldr	r2, [pc, #568]	@ (8003c14 <send_http_response_body+0x26c>)
 80039da:	2194      	movs	r1, #148	@ 0x94
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	3388      	adds	r3, #136	@ 0x88
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d150      	bne.n	8003a8c <send_http_response_body+0xe4>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039f0:	d343      	bcc.n	8003a7a <send_http_response_body+0xd2>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 80039f2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80039f6:	4a87      	ldr	r2, [pc, #540]	@ (8003c14 <send_http_response_body+0x26c>)
 80039f8:	2194      	movs	r1, #148	@ 0x94
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	3384      	adds	r3, #132	@ 0x84
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 8003a06:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003a0a:	4a82      	ldr	r2, [pc, #520]	@ (8003c14 <send_http_response_body+0x26c>)
 8003a0c:	2194      	movs	r1, #148	@ 0x94
 8003a0e:	fb01 f303 	mul.w	r3, r1, r3
 8003a12:	4413      	add	r3, r2
 8003a14:	3388      	adds	r3, #136	@ 0x88
 8003a16:	6a3a      	ldr	r2, [r7, #32]
 8003a18:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 8003a1a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003a1e:	617b      	str	r3, [r7, #20]

/////////////////////////////////////////////////////////////////////////////////////////////////
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 8003a20:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003a24:	2294      	movs	r2, #148	@ 0x94
 8003a26:	fb02 f303 	mul.w	r3, r2, r3
 8003a2a:	4a7a      	ldr	r2, [pc, #488]	@ (8003c14 <send_http_response_body+0x26c>)
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3301      	adds	r3, #1
 8003a30:	2280      	movs	r2, #128	@ 0x80
 8003a32:	2100      	movs	r1, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f002 ff0d 	bl	8006854 <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 8003a3a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003a3e:	2294      	movs	r2, #148	@ 0x94
 8003a40:	fb02 f303 	mul.w	r3, r2, r3
 8003a44:	4a73      	ldr	r2, [pc, #460]	@ (8003c14 <send_http_response_body+0x26c>)
 8003a46:	4413      	add	r3, r2
 8003a48:	3301      	adds	r3, #1
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f003 f820 	bl	8006a92 <strcpy>
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - file name [ %s ]\r\n", s, HTTPSock_Status[get_seqnum].file_name);
 8003a52:	7bf9      	ldrb	r1, [r7, #15]
 8003a54:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003a58:	2294      	movs	r2, #148	@ 0x94
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	4a6d      	ldr	r2, [pc, #436]	@ (8003c14 <send_http_response_body+0x26c>)
 8003a60:	4413      	add	r3, r2
 8003a62:	3301      	adds	r3, #1
 8003a64:	461a      	mov	r2, r3
 8003a66:	486c      	ldr	r0, [pc, #432]	@ (8003c18 <send_http_response_body+0x270>)
 8003a68:	f002 fd8c 	bl	8006584 <iprintf>
#endif
/////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - file len [ %ld ]byte\r\n", s, file_len);
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	6a3a      	ldr	r2, [r7, #32]
 8003a70:	4619      	mov	r1, r3
 8003a72:	486a      	ldr	r0, [pc, #424]	@ (8003c1c <send_http_response_body+0x274>)
 8003a74:	f002 fd86 	bl	8006584 <iprintf>
 8003a78:	e03a      	b.n	8003af0 <send_http_response_body+0x148>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	617b      	str	r3, [r7, #20]

#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, send_len);
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4619      	mov	r1, r3
 8003a84:	4866      	ldr	r0, [pc, #408]	@ (8003c20 <send_http_response_body+0x278>)
 8003a86:	f002 fd7d 	bl	8006584 <iprintf>
 8003a8a:	e031      	b.n	8003af0 <send_http_response_body+0x148>
		if(HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 8003a8c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003a90:	4a60      	ldr	r2, [pc, #384]	@ (8003c14 <send_http_response_body+0x26c>)
 8003a92:	2194      	movs	r1, #148	@ 0x94
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	4413      	add	r3, r2
 8003a9a:	3388      	adds	r3, #136	@ 0x88
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003aa2:	495c      	ldr	r1, [pc, #368]	@ (8003c14 <send_http_response_body+0x26c>)
 8003aa4:	2094      	movs	r0, #148	@ 0x94
 8003aa6:	fb00 f303 	mul.w	r3, r0, r3
 8003aaa:	440b      	add	r3, r1
 8003aac:	338c      	adds	r3, #140	@ 0x8c
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	617b      	str	r3, [r7, #20]

		if(send_len > DATA_BUF_SIZE - 1)
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aba:	d303      	bcc.n	8003ac4 <send_http_response_body+0x11c>
		{
			send_len = DATA_BUF_SIZE - 1;
 8003abc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	e00f      	b.n	8003ae4 <send_http_response_body+0x13c>
			//HTTPSock_Status[get_seqnum]->file_offset += send_len;
		}
		else
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
 8003ac4:	7bf9      	ldrb	r1, [r7, #15]
 8003ac6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003aca:	4a52      	ldr	r2, [pc, #328]	@ (8003c14 <send_http_response_body+0x26c>)
 8003acc:	2094      	movs	r0, #148	@ 0x94
 8003ace:	fb00 f303 	mul.w	r3, r0, r3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3388      	adds	r3, #136	@ 0x88
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4851      	ldr	r0, [pc, #324]	@ (8003c20 <send_http_response_body+0x278>)
 8003adc:	f002 fd52 	bl	8006584 <iprintf>
#endif
			// Send process end
			flag_datasend_end = 1;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	74fb      	strb	r3, [r7, #19]
		}
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - send len [ %ld ]byte\r\n", s, send_len);
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	484e      	ldr	r0, [pc, #312]	@ (8003c24 <send_http_response_body+0x27c>)
 8003aec:	f002 fd4a 	bl	8006584 <iprintf>
	//HTTPSock_Status[get_seqnum]->storage_type == CODEFLASH
	//HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	//HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
/*****************************************************/

	if(HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 8003af0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003af4:	4a47      	ldr	r2, [pc, #284]	@ (8003c14 <send_http_response_body+0x26c>)
 8003af6:	2194      	movs	r1, #148	@ 0x94
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	4413      	add	r3, r2
 8003afe:	3390      	adds	r3, #144	@ 0x90
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d125      	bne.n	8003b52 <send_http_response_body+0x1aa>
	{
		if(HTTPSock_Status[get_seqnum].file_len) start_addr = HTTPSock_Status[get_seqnum].file_start;
 8003b06:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003b0a:	4a42      	ldr	r2, [pc, #264]	@ (8003c14 <send_http_response_body+0x26c>)
 8003b0c:	2194      	movs	r1, #148	@ 0x94
 8003b0e:	fb01 f303 	mul.w	r3, r1, r3
 8003b12:	4413      	add	r3, r2
 8003b14:	3388      	adds	r3, #136	@ 0x88
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d009      	beq.n	8003b30 <send_http_response_body+0x188>
 8003b1c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003b20:	4a3c      	ldr	r2, [pc, #240]	@ (8003c14 <send_http_response_body+0x26c>)
 8003b22:	2194      	movs	r1, #148	@ 0x94
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	3384      	adds	r3, #132	@ 0x84
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	b298      	uxth	r0, r3
 8003b34:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003b38:	4a36      	ldr	r2, [pc, #216]	@ (8003c14 <send_http_response_body+0x26c>)
 8003b3a:	2194      	movs	r1, #148	@ 0x94
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	338c      	adds	r3, #140	@ 0x8c
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	f000 fc1c 	bl	8004388 <read_userReg_webContent>
 8003b50:	e001      	b.n	8003b56 <send_http_response_body+0x1ae>
		*(buf+send_len+1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
	}
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4832      	ldr	r0, [pc, #200]	@ (8003c28 <send_http_response_body+0x280>)
 8003b5e:	f002 fd11 	bl	8006584 <iprintf>
#endif

	if(send_len) send(s, buf, send_len);
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <send_http_response_body+0x1d0>
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 ff1f 	bl	80049b4 <send>
 8003b76:	e001      	b.n	8003b7c <send_http_response_body+0x1d4>
	else flag_datasend_end = 1;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	74fb      	strb	r3, [r7, #19]

	if(flag_datasend_end)
 8003b7c:	7cfb      	ldrb	r3, [r7, #19]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d020      	beq.n	8003bc4 <send_http_response_body+0x21c>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 8003b82:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003b86:	4a23      	ldr	r2, [pc, #140]	@ (8003c14 <send_http_response_body+0x26c>)
 8003b88:	2194      	movs	r1, #148	@ 0x94
 8003b8a:	fb01 f303 	mul.w	r3, r1, r3
 8003b8e:	4413      	add	r3, r2
 8003b90:	3384      	adds	r3, #132	@ 0x84
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 8003b96:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003c14 <send_http_response_body+0x26c>)
 8003b9c:	2194      	movs	r1, #148	@ 0x94
 8003b9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3388      	adds	r3, #136	@ 0x88
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 8003baa:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003bae:	4a19      	ldr	r2, [pc, #100]	@ (8003c14 <send_http_response_body+0x26c>)
 8003bb0:	2194      	movs	r1, #148	@ 0x94
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	338c      	adds	r3, #140	@ 0x8c
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	74fb      	strb	r3, [r7, #19]
 8003bc2:	e023      	b.n	8003c0c <send_http_response_body+0x264>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 8003bc4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003bc8:	4a12      	ldr	r2, [pc, #72]	@ (8003c14 <send_http_response_body+0x26c>)
 8003bca:	2194      	movs	r1, #148	@ 0x94
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	338c      	adds	r3, #140	@ 0x8c
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	440a      	add	r2, r1
 8003bde:	490d      	ldr	r1, [pc, #52]	@ (8003c14 <send_http_response_body+0x26c>)
 8003be0:	2094      	movs	r0, #148	@ 0x94
 8003be2:	fb00 f303 	mul.w	r3, r0, r3
 8003be6:	440b      	add	r3, r1
 8003be8:	338c      	adds	r3, #140	@ 0x8c
 8003bea:	601a      	str	r2, [r3, #0]
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : HTTP Response body - offset [ %ld ]\r\n", s, HTTPSock_Status[get_seqnum].file_offset);
 8003bec:	7bf9      	ldrb	r1, [r7, #15]
 8003bee:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003bf2:	4a08      	ldr	r2, [pc, #32]	@ (8003c14 <send_http_response_body+0x26c>)
 8003bf4:	2094      	movs	r0, #148	@ 0x94
 8003bf6:	fb00 f303 	mul.w	r3, r0, r3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	338c      	adds	r3, #140	@ 0x8c
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	461a      	mov	r2, r3
 8003c02:	480a      	ldr	r0, [pc, #40]	@ (8003c2c <send_http_response_body+0x284>)
 8003c04:	f002 fcbe 	bl	8006584 <iprintf>
 8003c08:	e000      	b.n	8003c0c <send_http_response_body+0x264>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 8003c0a:	bf00      	nop
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
// ## 20141219 added end
}
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000e54 	.word	0x20000e54
 8003c18:	08017fa4 	.word	0x08017fa4
 8003c1c:	08017fe0 	.word	0x08017fe0
 8003c20:	08018020 	.word	0x08018020
 8003c24:	08018060 	.word	0x08018060
 8003c28:	080180a0 	.word	0x080180a0
 8003c2c:	080180dc 	.word	0x080180dc

08003c30 <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t * buf, uint8_t * http_body, uint16_t file_len)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	4613      	mov	r3, r2
 8003c42:	81bb      	strh	r3, [r7, #12]
	uint16_t send_len = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	480e      	ldr	r0, [pc, #56]	@ (8003c88 <send_http_response_cgi+0x58>)
 8003c4e:	f002 fc99 	bl	8006584 <iprintf>
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK, file_len, http_body);
 8003c52:	89ba      	ldrh	r2, [r7, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003c8c <send_http_response_cgi+0x5c>)
 8003c5c:	490c      	ldr	r1, [pc, #48]	@ (8003c90 <send_http_response_cgi+0x60>)
 8003c5e:	68b8      	ldr	r0, [r7, #8]
 8003c60:	f002 fd00 	bl	8006664 <siprintf>
 8003c64:	4603      	mov	r3, r0
 8003c66:	82fb      	strh	r3, [r7, #22]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	8afa      	ldrh	r2, [r7, #22]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4809      	ldr	r0, [pc, #36]	@ (8003c94 <send_http_response_cgi+0x64>)
 8003c70:	f002 fc88 	bl	8006584 <iprintf>
#endif

	send(s, buf, send_len);
 8003c74:	8afa      	ldrh	r2, [r7, #22]
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fe9a 	bl	80049b4 <send>
}
 8003c80:	bf00      	nop
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	08018118 	.word	0x08018118
 8003c8c:	08018150 	.word	0x08018150
 8003c90:	0801818c 	.word	0x0801818c
 8003c94:	08018198 	.word	0x08018198

08003c98 <http_disconnect>:


static int8_t http_disconnect(uint8_t sn)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
	setSn_CR(sn,Sn_CR_DISCON);
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003cae:	2108      	movs	r1, #8
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f001 fb97 	bl	80053e4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003cb6:	bf00      	nop
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f001 fb41 	bl	800534c <WIZCHIP_READ>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f3      	bne.n	8003cb8 <http_disconnect+0x20>

	return SOCK_OK;
 8003cd0:	2301      	movs	r3, #1
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <http_process_handler>:


static void http_process_handler(uint8_t s, st_http_request * p_http_request)
{
 8003cdc:	b5b0      	push	{r4, r5, r7, lr}
 8003cde:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8003ce2:	af02      	add	r7, sp, #8
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003cea:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003cee:	6019      	str	r1, [r3, #0]
 8003cf0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003cf4:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8003cf8:	701a      	strb	r2, [r3, #0]
	uint8_t * uri_name;
	uint32_t content_addr = 0;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
	uint16_t content_num = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
	uint32_t file_len = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

	uint8_t uri_buf[MAX_URI_SIZE]={0x00, };
 8003d0c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d10:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4618      	mov	r0, r3
 8003d22:	f002 fd97 	bl	8006854 <memset>

	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 8003d26:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d2a:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fb7b 	bl	800342c <getHTTPSequenceNum>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218
 8003d3c:	f997 3218 	ldrsb.w	r3, [r7, #536]	@ 0x218
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d44:	f000 8259 	beq.w	80041fa <http_process_handler+0x51e>

	http_status = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
	http_response = pHTTP_RX;
 8003d4e:	4bbf      	ldr	r3, [pc, #764]	@ (800404c <http_process_handler+0x370>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4abf      	ldr	r2, [pc, #764]	@ (8004050 <http_process_handler+0x374>)
 8003d54:	6013      	str	r3, [r2, #0]
	file_len = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

	//method Analyze
	switch (p_http_request->METHOD)
 8003d5c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d60:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	f000 8199 	beq.w	80040a0 <http_process_handler+0x3c4>
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	f300 8232 	bgt.w	80041d8 <http_process_handler+0x4fc>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <http_process_handler+0xac>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f2c0 822d 	blt.w	80041d8 <http_process_handler+0x4fc>
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	f200 8229 	bhi.w	80041d8 <http_process_handler+0x4fc>
 8003d86:	e010      	b.n	8003daa <http_process_handler+0xce>
	{
		case METHOD_ERR :
			http_status = STATUS_BAD_REQ;
 8003d88:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003d8c:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
			send_http_response_header(s, 0, 0, http_status);
 8003d90:	f8b7 221a 	ldrh.w	r2, [r7, #538]	@ 0x21a
 8003d94:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d98:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8003d9c:	7818      	ldrb	r0, [r3, #0]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	2200      	movs	r2, #0
 8003da2:	2100      	movs	r1, #0
 8003da4:	f7ff fd7c 	bl	80038a0 <send_http_response_header>
			break;
 8003da8:	e22a      	b.n	8004200 <http_process_handler+0x524>

		case METHOD_HEAD :
		case METHOD_GET :
			get_http_uri_name(p_http_request->URI, uri_buf);
 8003daa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003dae:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3302      	adds	r3, #2
 8003db6:	f107 020c 	add.w	r2, r7, #12
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff faa1 	bl	8003304 <get_http_uri_name>
			uri_name = uri_buf;
 8003dc2:	f107 030c 	add.w	r3, r7, #12
 8003dc6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

			if (!strcmp((char *)uri_name, "/")) strcpy((char *)uri_name, INITIAL_WEBPAGE);	// If URI is "/", respond by index.html
 8003dca:	49a2      	ldr	r1, [pc, #648]	@ (8004054 <http_process_handler+0x378>)
 8003dcc:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8003dd0:	f7fc fa06 	bl	80001e0 <strcmp>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10b      	bne.n	8003df2 <http_process_handler+0x116>
 8003dda:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003dde:	499e      	ldr	r1, [pc, #632]	@ (8004058 <http_process_handler+0x37c>)
 8003de0:	461a      	mov	r2, r3
 8003de2:	460b      	mov	r3, r1
 8003de4:	cb03      	ldmia	r3!, {r0, r1}
 8003de6:	6010      	str	r0, [r2, #0]
 8003de8:	6051      	str	r1, [r2, #4]
 8003dea:	8819      	ldrh	r1, [r3, #0]
 8003dec:	789b      	ldrb	r3, [r3, #2]
 8003dee:	8111      	strh	r1, [r2, #8]
 8003df0:	7293      	strb	r3, [r2, #10]
			if (!strcmp((char *)uri_name, "m")) strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 8003df2:	499a      	ldr	r1, [pc, #616]	@ (800405c <http_process_handler+0x380>)
 8003df4:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8003df8:	f7fc f9f2 	bl	80001e0 <strcmp>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10a      	bne.n	8003e18 <http_process_handler+0x13c>
 8003e02:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003e06:	4a96      	ldr	r2, [pc, #600]	@ (8004060 <http_process_handler+0x384>)
 8003e08:	461c      	mov	r4, r3
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003e0e:	6020      	str	r0, [r4, #0]
 8003e10:	6061      	str	r1, [r4, #4]
 8003e12:	60a2      	str	r2, [r4, #8]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	7323      	strb	r3, [r4, #12]
			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
 8003e18:	4992      	ldr	r1, [pc, #584]	@ (8004064 <http_process_handler+0x388>)
 8003e1a:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8003e1e:	f7fc f9df 	bl	80001e0 <strcmp>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10b      	bne.n	8003e40 <http_process_handler+0x164>
 8003e28:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003e2c:	4a8e      	ldr	r2, [pc, #568]	@ (8004068 <http_process_handler+0x38c>)
 8003e2e:	461d      	mov	r5, r3
 8003e30:	4614      	mov	r4, r2
 8003e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e34:	6028      	str	r0, [r5, #0]
 8003e36:	6069      	str	r1, [r5, #4]
 8003e38:	60aa      	str	r2, [r5, #8]
 8003e3a:	60eb      	str	r3, [r5, #12]
 8003e3c:	8823      	ldrh	r3, [r4, #0]
 8003e3e:	822b      	strh	r3, [r5, #16]


			if (!strcmp((char *)uri_name, "sys_off.html"))
 8003e40:	498a      	ldr	r1, [pc, #552]	@ (800406c <http_process_handler+0x390>)
 8003e42:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8003e46:	f7fc f9cb 	bl	80001e0 <strcmp>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d102      	bne.n	8003e56 <http_process_handler+0x17a>
			{
				//Do something e.g. turn off motor or LED etc
				printf("SYSTEM OFF\n\r");
 8003e50:	4887      	ldr	r0, [pc, #540]	@ (8004070 <http_process_handler+0x394>)
 8003e52:	f002 fb97 	bl	8006584 <iprintf>
			}

			if (!strcmp((char *)uri_name, "index.html"))
 8003e56:	4980      	ldr	r1, [pc, #512]	@ (8004058 <http_process_handler+0x37c>)
 8003e58:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8003e5c:	f7fc f9c0 	bl	80001e0 <strcmp>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d102      	bne.n	8003e6c <http_process_handler+0x190>
			{
				//Do something e.g. turn off motor or LED etc
				printf("SYSTEM ON\n\r");
 8003e66:	4883      	ldr	r0, [pc, #524]	@ (8004074 <http_process_handler+0x398>)
 8003e68:	f002 fb8c 	bl	8006584 <iprintf>
			}

			if (!strcmp((char *)uri_name, "status.html"))
 8003e6c:	4982      	ldr	r1, [pc, #520]	@ (8004078 <http_process_handler+0x39c>)
 8003e6e:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8003e72:	f7fc f9b5 	bl	80001e0 <strcmp>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d102      	bne.n	8003e82 <http_process_handler+0x1a6>
			{
				//Do something e.g. turn off motor or LED etc
				printf("Analyzing system status...\n\r");
 8003e7c:	487f      	ldr	r0, [pc, #508]	@ (800407c <http_process_handler+0x3a0>)
 8003e7e:	f002 fb81 	bl	8006584 <iprintf>
			}
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 8003e82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e86:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	f8d7 1214 	ldr.w	r1, [r7, #532]	@ 0x214
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff f836 	bl	8002f04 <find_http_uri_type>

#ifdef _HTTPSERVER_DEBUG_
			printf("\r\n> HTTPSocket[%d] : HTTP Method GET\r\n", s);
 8003e98:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e9c:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4876      	ldr	r0, [pc, #472]	@ (8004080 <http_process_handler+0x3a4>)
 8003ea6:	f002 fb6d 	bl	8006584 <iprintf>
			printf("> HTTPSocket[%d] : Request Type = %d\r\n", s, p_http_request->TYPE);
 8003eaa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003eae:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8003eb2:	7819      	ldrb	r1, [r3, #0]
 8003eb4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003eb8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	785b      	ldrb	r3, [r3, #1]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4870      	ldr	r0, [pc, #448]	@ (8004084 <http_process_handler+0x3a8>)
 8003ec4:	f002 fb5e 	bl	8006584 <iprintf>
			printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
 8003ec8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ecc:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	486b      	ldr	r0, [pc, #428]	@ (8004088 <http_process_handler+0x3ac>)
 8003eda:	f002 fb53 	bl	8006584 <iprintf>
#endif

			if(p_http_request->TYPE == PTYPE_CGI)
 8003ede:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ee2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	785b      	ldrb	r3, [r3, #1]
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d131      	bne.n	8003f52 <http_process_handler+0x276>
			{
				content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 8003eee:	4b67      	ldr	r3, [pc, #412]	@ (800408c <http_process_handler+0x3b0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f507 7203 	add.w	r2, r7, #524	@ 0x20c
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8003efc:	f000 fa82 	bl	8004404 <http_get_cgi_handler>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 8003f06:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d015      	beq.n	8003f3a <http_process_handler+0x25e>
 8003f0e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003f12:	f240 72be 	movw	r2, #1982	@ 0x7be
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d80f      	bhi.n	8003f3a <http_process_handler+0x25e>
				{
					send_http_response_cgi(s, http_response, pHTTP_TX, (uint16_t)file_len);
 8003f1a:	4b4d      	ldr	r3, [pc, #308]	@ (8004050 <http_process_handler+0x374>)
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800408c <http_process_handler+0x3b0>)
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003f26:	b29c      	uxth	r4, r3
 8003f28:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003f2c:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8003f30:	7818      	ldrb	r0, [r3, #0]
 8003f32:	4623      	mov	r3, r4
 8003f34:	f7ff fe7c 	bl	8003c30 <send_http_response_cgi>
				if(http_status == STATUS_OK)
				{
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
				}
			}
			break;
 8003f38:	e161      	b.n	80041fe <http_process_handler+0x522>
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 8003f3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003f3e:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8003f42:	7818      	ldrb	r0, [r3, #0]
 8003f44:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2108      	movs	r1, #8
 8003f4c:	f7ff fca8 	bl	80038a0 <send_http_response_header>
			break;
 8003f50:	e155      	b.n	80041fe <http_process_handler+0x522>
				if(find_userReg_webContent(uri_buf, &content_num, &file_len))
 8003f52:	f507 7203 	add.w	r2, r7, #524	@ 0x20c
 8003f56:	f207 2112 	addw	r1, r7, #530	@ 0x212
 8003f5a:	f107 030c 	add.w	r3, r7, #12
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 f9d6 	bl	8004310 <find_userReg_webContent>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d011      	beq.n	8003f8e <http_process_handler+0x2b2>
					content_found = 1; // Web content found in code flash memory
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
					content_addr = (uint32_t)content_num;
 8003f70:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 8003f74:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
					HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 8003f78:	f997 3218 	ldrsb.w	r3, [r7, #536]	@ 0x218
 8003f7c:	4a44      	ldr	r2, [pc, #272]	@ (8004090 <http_process_handler+0x3b4>)
 8003f7e:	2194      	movs	r1, #148	@ 0x94
 8003f80:	fb01 f303 	mul.w	r3, r1, r3
 8003f84:	4413      	add	r3, r2
 8003f86:	3390      	adds	r3, #144	@ 0x90
 8003f88:	2201      	movs	r2, #1
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	e002      	b.n	8003f94 <http_process_handler+0x2b8>
					content_found = 0; // fail to find content
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
				if(!content_found)
 8003f94:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10d      	bne.n	8003fb8 <http_process_handler+0x2dc>
					printf("> HTTPSocket[%d] : Unknown Page Request\r\n", s);
 8003f9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003fa0:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	483a      	ldr	r0, [pc, #232]	@ (8004094 <http_process_handler+0x3b8>)
 8003faa:	f002 faeb 	bl	8006584 <iprintf>
					http_status = STATUS_NOT_FOUND;
 8003fae:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8003fb2:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
 8003fb6:	e011      	b.n	8003fdc <http_process_handler+0x300>
					printf("> HTTPSocket[%d] : Find Content [%s] ok - Start [%ld] len [ %ld ]byte\r\n", s, uri_name, content_addr, file_len);
 8003fb8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003fbc:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8003fc0:	7819      	ldrb	r1, [r3, #0]
 8003fc2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003fcc:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8003fd0:	4831      	ldr	r0, [pc, #196]	@ (8004098 <http_process_handler+0x3bc>)
 8003fd2:	f002 fad7 	bl	8006584 <iprintf>
					http_status = STATUS_OK;
 8003fd6:	23c8      	movs	r3, #200	@ 0xc8
 8003fd8:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
				if(http_status)
 8003fdc:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01c      	beq.n	800401e <http_process_handler+0x342>
					printf("> HTTPSocket[%d] : Requested content len = [ %ld ]byte\r\n", s, file_len);
 8003fe4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003fe8:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4829      	ldr	r0, [pc, #164]	@ (800409c <http_process_handler+0x3c0>)
 8003ff6:	f002 fac5 	bl	8006584 <iprintf>
					send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 8003ffa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ffe:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	7859      	ldrb	r1, [r3, #1]
 8004006:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 800400a:	f8b7 421a 	ldrh.w	r4, [r7, #538]	@ 0x21a
 800400e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004012:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8004016:	7818      	ldrb	r0, [r3, #0]
 8004018:	4623      	mov	r3, r4
 800401a:	f7ff fc41 	bl	80038a0 <send_http_response_header>
				if(http_status == STATUS_OK)
 800401e:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8004022:	2bc8      	cmp	r3, #200	@ 0xc8
 8004024:	f040 80eb 	bne.w	80041fe <http_process_handler+0x522>
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 8004028:	4b09      	ldr	r3, [pc, #36]	@ (8004050 <http_process_handler+0x374>)
 800402a:	6819      	ldr	r1, [r3, #0]
 800402c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8004030:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004034:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8004038:	7810      	ldrb	r0, [r2, #0]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004040:	460a      	mov	r2, r1
 8004042:	f8d7 1214 	ldr.w	r1, [r7, #532]	@ 0x214
 8004046:	f7ff fcaf 	bl	80039a8 <send_http_response_body>
			break;
 800404a:	e0d8      	b.n	80041fe <http_process_handler+0x522>
 800404c:	20000e4c 	.word	0x20000e4c
 8004050:	20000e40 	.word	0x20000e40
 8004054:	080181e0 	.word	0x080181e0
 8004058:	080181e4 	.word	0x080181e4
 800405c:	080181f0 	.word	0x080181f0
 8004060:	080181f4 	.word	0x080181f4
 8004064:	08018204 	.word	0x08018204
 8004068:	0801820c 	.word	0x0801820c
 800406c:	08018220 	.word	0x08018220
 8004070:	08018230 	.word	0x08018230
 8004074:	08018240 	.word	0x08018240
 8004078:	0801824c 	.word	0x0801824c
 800407c:	08018258 	.word	0x08018258
 8004080:	08018278 	.word	0x08018278
 8004084:	080182a0 	.word	0x080182a0
 8004088:	080182c8 	.word	0x080182c8
 800408c:	20000e48 	.word	0x20000e48
 8004090:	20000e54 	.word	0x20000e54
 8004094:	080182f0 	.word	0x080182f0
 8004098:	0801831c 	.word	0x0801831c
 800409c:	08018364 	.word	0x08018364

		case METHOD_POST :
			mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 80040a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040a4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	1c98      	adds	r0, r3, #2
 80040ac:	f107 030c 	add.w	r3, r7, #12
 80040b0:	4a55      	ldr	r2, [pc, #340]	@ (8004208 <http_process_handler+0x52c>)
 80040b2:	4956      	ldr	r1, [pc, #344]	@ (800420c <http_process_handler+0x530>)
 80040b4:	f7ff f950 	bl	8003358 <mid>
			uri_name = uri_buf;
 80040b8:	f107 030c 	add.w	r3, r7, #12
 80040bc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Check file type (HTML, TEXT, GIF, JPEG are included)
 80040c0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040c4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3301      	adds	r3, #1
 80040cc:	f8d7 1214 	ldr.w	r1, [r7, #532]	@ 0x214
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe ff17 	bl	8002f04 <find_http_uri_type>

#ifdef _HTTPSERVER_DEBUG_
			printf("\r\n> HTTPSocket[%d] : HTTP Method POST\r\n", s);
 80040d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040da:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	4619      	mov	r1, r3
 80040e2:	484b      	ldr	r0, [pc, #300]	@ (8004210 <http_process_handler+0x534>)
 80040e4:	f002 fa4e 	bl	8006584 <iprintf>
			printf("> HTTPSocket[%d] : Request URI = %s ", s, uri_name);
 80040e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040ec:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80040f6:	4619      	mov	r1, r3
 80040f8:	4846      	ldr	r0, [pc, #280]	@ (8004214 <http_process_handler+0x538>)
 80040fa:	f002 fa43 	bl	8006584 <iprintf>
			printf("Type = %d\r\n", p_http_request->TYPE);
 80040fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004102:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	4619      	mov	r1, r3
 800410c:	4842      	ldr	r0, [pc, #264]	@ (8004218 <http_process_handler+0x53c>)
 800410e:	f002 fa39 	bl	8006584 <iprintf>
#endif

			if(p_http_request->TYPE == PTYPE_CGI)	// HTTP POST Method; CGI Process
 8004112:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004116:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	785b      	ldrb	r3, [r3, #1]
 800411e:	2b08      	cmp	r3, #8
 8004120:	d14d      	bne.n	80041be <http_process_handler+0x4e2>
			{
				content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 8004122:	4b3e      	ldr	r3, [pc, #248]	@ (800421c <http_process_handler+0x540>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 800412a:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 800412e:	f5a1 7108 	sub.w	r1, r1, #544	@ 0x220
 8004132:	6809      	ldr	r1, [r1, #0]
 8004134:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8004138:	f000 f990 	bl	800445c <http_post_cgi_handler>
 800413c:	4603      	mov	r3, r0
 800413e:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found?"Content found":"Content not found", file_len);
 8004142:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004146:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 800414a:	7819      	ldrb	r1, [r3, #0]
 800414c:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <http_process_handler+0x47c>
 8004154:	4a32      	ldr	r2, [pc, #200]	@ (8004220 <http_process_handler+0x544>)
 8004156:	e000      	b.n	800415a <http_process_handler+0x47e>
 8004158:	4a32      	ldr	r2, [pc, #200]	@ (8004224 <http_process_handler+0x548>)
 800415a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800415e:	4832      	ldr	r0, [pc, #200]	@ (8004228 <http_process_handler+0x54c>)
 8004160:	f002 fa10 	bl	8006584 <iprintf>
#endif
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 8004164:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01c      	beq.n	80041a6 <http_process_handler+0x4ca>
 800416c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8004170:	f240 72be 	movw	r2, #1982	@ 0x7be
 8004174:	4293      	cmp	r3, r2
 8004176:	d816      	bhi.n	80041a6 <http_process_handler+0x4ca>
				{
					send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 8004178:	4b2c      	ldr	r3, [pc, #176]	@ (800422c <http_process_handler+0x550>)
 800417a:	6819      	ldr	r1, [r3, #0]
 800417c:	4b27      	ldr	r3, [pc, #156]	@ (800421c <http_process_handler+0x540>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8004184:	b29c      	uxth	r4, r3
 8004186:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800418a:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 800418e:	7818      	ldrb	r0, [r3, #0]
 8004190:	4623      	mov	r3, r4
 8004192:	f7ff fd4d 	bl	8003c30 <send_http_response_cgi>

					// Reset the H/W for apply to the change configuration information
					if(content_found == HTTP_RESET) HTTPServer_ReStart();
 8004196:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 800419a:	2b02      	cmp	r3, #2
 800419c:	d11b      	bne.n	80041d6 <http_process_handler+0x4fa>
 800419e:	4b24      	ldr	r3, [pc, #144]	@ (8004230 <http_process_handler+0x554>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4798      	blx	r3
 80041a4:	e017      	b.n	80041d6 <http_process_handler+0x4fa>
				}
				else
				{
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 80041a6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80041aa:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80041ae:	7818      	ldrb	r0, [r3, #0]
 80041b0:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80041b4:	2200      	movs	r2, #0
 80041b6:	2108      	movs	r1, #8
 80041b8:	f7ff fb72 	bl	80038a0 <send_http_response_header>
			}
			else	// HTTP POST Method; Content not found
			{
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
			}
			break;
 80041bc:	e020      	b.n	8004200 <http_process_handler+0x524>
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 80041be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80041c2:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80041c6:	7818      	ldrb	r0, [r3, #0]
 80041c8:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80041cc:	2200      	movs	r2, #0
 80041ce:	2100      	movs	r1, #0
 80041d0:	f7ff fb66 	bl	80038a0 <send_http_response_header>
			break;
 80041d4:	e014      	b.n	8004200 <http_process_handler+0x524>
 80041d6:	e013      	b.n	8004200 <http_process_handler+0x524>

		default :
			http_status = STATUS_BAD_REQ;
 80041d8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80041dc:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
			send_http_response_header(s, 0, 0, http_status);
 80041e0:	f8b7 221a 	ldrh.w	r2, [r7, #538]	@ 0x21a
 80041e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80041e8:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80041ec:	7818      	ldrb	r0, [r3, #0]
 80041ee:	4613      	mov	r3, r2
 80041f0:	2200      	movs	r2, #0
 80041f2:	2100      	movs	r1, #0
 80041f4:	f7ff fb54 	bl	80038a0 <send_http_response_header>
			break;
 80041f8:	e002      	b.n	8004200 <http_process_handler+0x524>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 80041fa:	bf00      	nop
 80041fc:	e000      	b.n	8004200 <http_process_handler+0x524>
			break;
 80041fe:	bf00      	nop
	}
}
 8004200:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004204:	46bd      	mov	sp, r7
 8004206:	bdb0      	pop	{r4, r5, r7, pc}
 8004208:	080183a0 	.word	0x080183a0
 800420c:	080181e0 	.word	0x080181e0
 8004210:	080183a8 	.word	0x080183a8
 8004214:	080183d0 	.word	0x080183d0
 8004218:	080183f8 	.word	0x080183f8
 800421c:	20000e40 	.word	0x20000e40
 8004220:	08018404 	.word	0x08018404
 8004224:	08018414 	.word	0x08018414
 8004228:	08018428 	.word	0x08018428
 800422c:	20000e48 	.word	0x20000e48
 8004230:	20000048 	.word	0x20000048

08004234 <get_httpServer_timecount>:
{
	httpServer_tick_1s++;
}

uint32_t get_httpServer_timecount(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
	return httpServer_tick_1s;
 8004238:	4b03      	ldr	r3, [pc, #12]	@ (8004248 <get_httpServer_timecount+0x14>)
 800423a:	681b      	ldr	r3, [r3, #0]
}
 800423c:	4618      	mov	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	20000e50 	.word	0x20000e50

0800424c <reg_httpServer_webContent>:

void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 800424c:	b590      	push	{r4, r7, lr}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d04e      	beq.n	80042fa <reg_httpServer_webContent+0xae>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d04b      	beq.n	80042fa <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 8004262:	4b29      	ldr	r3, [pc, #164]	@ (8004308 <reg_httpServer_webContent+0xbc>)
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	2b13      	cmp	r3, #19
 8004268:	d849      	bhi.n	80042fe <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fb ffc2 	bl	80001f4 <strlen>
 8004270:	4603      	mov	r3, r0
 8004272:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 8004274:	6838      	ldr	r0, [r7, #0]
 8004276:	f7fb ffbd 	bl	80001f4 <strlen>
 800427a:	60b8      	str	r0, [r7, #8]

	web_content[total_content_cnt].content_name = malloc(name_len+1);
 800427c:	89fb      	ldrh	r3, [r7, #14]
 800427e:	3301      	adds	r3, #1
 8004280:	461a      	mov	r2, r3
 8004282:	4b21      	ldr	r3, [pc, #132]	@ (8004308 <reg_httpServer_webContent+0xbc>)
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	461c      	mov	r4, r3
 8004288:	4610      	mov	r0, r2
 800428a:	f002 f803 	bl	8006294 <malloc>
 800428e:	4603      	mov	r3, r0
 8004290:	4619      	mov	r1, r3
 8004292:	4a1e      	ldr	r2, [pc, #120]	@ (800430c <reg_httpServer_webContent+0xc0>)
 8004294:	4623      	mov	r3, r4
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	4423      	add	r3, r4
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	6019      	str	r1, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 80042a0:	4b19      	ldr	r3, [pc, #100]	@ (8004308 <reg_httpServer_webContent+0xbc>)
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	4619      	mov	r1, r3
 80042a6:	4a19      	ldr	r2, [pc, #100]	@ (800430c <reg_httpServer_webContent+0xc0>)
 80042a8:	460b      	mov	r3, r1
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	440b      	add	r3, r1
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f002 fbeb 	bl	8006a92 <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 80042bc:	4b12      	ldr	r3, [pc, #72]	@ (8004308 <reg_httpServer_webContent+0xbc>)
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	4619      	mov	r1, r3
 80042c2:	4a12      	ldr	r2, [pc, #72]	@ (800430c <reg_httpServer_webContent+0xc0>)
 80042c4:	460b      	mov	r3, r1
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	440b      	add	r3, r1
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	3304      	adds	r3, #4
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 80042d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004308 <reg_httpServer_webContent+0xbc>)
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	4619      	mov	r1, r3
 80042da:	4a0c      	ldr	r2, [pc, #48]	@ (800430c <reg_httpServer_webContent+0xc0>)
 80042dc:	460b      	mov	r3, r1
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	440b      	add	r3, r1
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	3308      	adds	r3, #8
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 80042ec:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <reg_httpServer_webContent+0xbc>)
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	3301      	adds	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	4b04      	ldr	r3, [pc, #16]	@ (8004308 <reg_httpServer_webContent+0xbc>)
 80042f6:	801a      	strh	r2, [r3, #0]
 80042f8:	e002      	b.n	8004300 <reg_httpServer_webContent+0xb4>
		return;
 80042fa:	bf00      	nop
 80042fc:	e000      	b.n	8004300 <reg_httpServer_webContent+0xb4>
		return;
 80042fe:	bf00      	nop
}
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	bd90      	pop	{r4, r7, pc}
 8004306:	bf00      	nop
 8004308:	20000e44 	.word	0x20000e44
 800430c:	200012f4 	.word	0x200012f4

08004310 <find_userReg_webContent>:

	return ret;
}

uint8_t find_userReg_webContent(uint8_t * content_name, uint16_t * content_num, uint32_t * file_len)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 800431c:	2300      	movs	r3, #0
 800431e:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < total_content_cnt; i++)
 8004320:	2300      	movs	r3, #0
 8004322:	82fb      	strh	r3, [r7, #22]
 8004324:	e022      	b.n	800436c <find_userReg_webContent+0x5c>
	{
		if(!strcmp((char *)content_name, (char *)web_content[i].content_name))
 8004326:	8afa      	ldrh	r2, [r7, #22]
 8004328:	4915      	ldr	r1, [pc, #84]	@ (8004380 <find_userReg_webContent+0x70>)
 800432a:	4613      	mov	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4619      	mov	r1, r3
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f7fb ff51 	bl	80001e0 <strcmp>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d110      	bne.n	8004366 <find_userReg_webContent+0x56>
		{
			*file_len = web_content[i].content_len;
 8004344:	8afa      	ldrh	r2, [r7, #22]
 8004346:	490e      	ldr	r1, [pc, #56]	@ (8004380 <find_userReg_webContent+0x70>)
 8004348:	4613      	mov	r3, r2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	3304      	adds	r3, #4
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	601a      	str	r2, [r3, #0]
			*content_num = i;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	8afa      	ldrh	r2, [r7, #22]
 800435e:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 8004360:	2301      	movs	r3, #1
 8004362:	757b      	strb	r3, [r7, #21]
			break;
 8004364:	e007      	b.n	8004376 <find_userReg_webContent+0x66>
	for(i = 0; i < total_content_cnt; i++)
 8004366:	8afb      	ldrh	r3, [r7, #22]
 8004368:	3301      	adds	r3, #1
 800436a:	82fb      	strh	r3, [r7, #22]
 800436c:	4b05      	ldr	r3, [pc, #20]	@ (8004384 <find_userReg_webContent+0x74>)
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	8afa      	ldrh	r2, [r7, #22]
 8004372:	429a      	cmp	r2, r3
 8004374:	d3d7      	bcc.n	8004326 <find_userReg_webContent+0x16>
		}
	}
	return ret;
 8004376:	7d7b      	ldrb	r3, [r7, #21]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	200012f4 	.word	0x200012f4
 8004384:	20000e44 	.word	0x20000e44

08004388 <read_userReg_webContent>:


uint16_t read_userReg_webContent(uint16_t content_num, uint8_t * buf, uint32_t offset, uint16_t size)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	461a      	mov	r2, r3
 8004394:	4603      	mov	r3, r0
 8004396:	81fb      	strh	r3, [r7, #14]
 8004398:	4613      	mov	r3, r2
 800439a:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	827b      	strh	r3, [r7, #18]
	uint8_t * ptr;

	if(content_num > total_content_cnt) return 0;
 80043a0:	4b16      	ldr	r3, [pc, #88]	@ (80043fc <read_userReg_webContent+0x74>)
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	89fa      	ldrh	r2, [r7, #14]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d901      	bls.n	80043ae <read_userReg_webContent+0x26>
 80043aa:	2300      	movs	r3, #0
 80043ac:	e021      	b.n	80043f2 <read_userReg_webContent+0x6a>

	ptr = web_content[content_num].content;
 80043ae:	89fa      	ldrh	r2, [r7, #14]
 80043b0:	4913      	ldr	r1, [pc, #76]	@ (8004400 <read_userReg_webContent+0x78>)
 80043b2:	4613      	mov	r3, r2
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	3308      	adds	r3, #8
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	617b      	str	r3, [r7, #20]
	if(offset) ptr += offset;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <read_userReg_webContent+0x48>
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4413      	add	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 80043d0:	89bb      	ldrh	r3, [r7, #12]
 80043d2:	461a      	mov	r2, r3
 80043d4:	6979      	ldr	r1, [r7, #20]
 80043d6:	68b8      	ldr	r0, [r7, #8]
 80043d8:	f002 fa53 	bl	8006882 <strncpy>
	*(buf+size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 80043dc:	89bb      	ldrh	r3, [r7, #12]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	4413      	add	r3, r2
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 80043e6:	68b8      	ldr	r0, [r7, #8]
 80043e8:	f7fb ff04 	bl	80001f4 <strlen>
 80043ec:	4603      	mov	r3, r0
 80043ee:	827b      	strh	r3, [r7, #18]
	return ret;
 80043f0:	8a7b      	ldrh	r3, [r7, #18]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000e44 	.word	0x20000e44
 8004400:	200012f4 	.word	0x200012f4

08004404 <http_get_cgi_handler>:
#include <string.h>
#include <stdlib.h>
#include "httpUtil.h"

uint8_t http_get_cgi_handler(uint8_t * uri_name, uint8_t * buf, uint32_t * file_len)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 8004410:	2301      	movs	r3, #1
 8004412:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	82bb      	strh	r3, [r7, #20]

	if(predefined_get_cgi_processor(uri_name, buf, &len))
 8004418:	f107 0314 	add.w	r3, r7, #20
 800441c:	461a      	mov	r2, r3
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f859 	bl	80044d8 <predefined_get_cgi_processor>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d108      	bne.n	800443e <http_get_cgi_handler+0x3a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 800442c:	490a      	ldr	r1, [pc, #40]	@ (8004458 <http_get_cgi_handler+0x54>)
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f7fb fed6 	bl	80001e0 <strcmp>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <http_get_cgi_handler+0x3a>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 800443a:	2300      	movs	r3, #0
 800443c:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 800443e:	7dfb      	ldrb	r3, [r7, #23]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <http_get_cgi_handler+0x48>
 8004444:	8abb      	ldrh	r3, [r7, #20]
 8004446:	461a      	mov	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	601a      	str	r2, [r3, #0]
	return ret;
 800444c:	7dfb      	ldrb	r3, [r7, #23]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	08018514 	.word	0x08018514

0800445c <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t * uri_name, st_http_request * p_http_request, uint8_t * buf, uint32_t * file_len)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 800446a:	2301      	movs	r3, #1
 800446c:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 800446e:	2300      	movs	r3, #0
 8004470:	82bb      	strh	r3, [r7, #20]
	uint8_t val = 0;
 8004472:	2300      	movs	r3, #0
 8004474:	75bb      	strb	r3, [r7, #22]

	if(predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	1c99      	adds	r1, r3, #2
 800447a:	f107 0314 	add.w	r3, r7, #20
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f836 	bl	80044f2 <predefined_set_cgi_processor>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d114      	bne.n	80044b6 <http_post_cgi_handler+0x5a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 800448c:	4910      	ldr	r1, [pc, #64]	@ (80044d0 <http_post_cgi_handler+0x74>)
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f7fb fea6 	bl	80001e0 <strcmp>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10b      	bne.n	80044b2 <http_post_cgi_handler+0x56>
	{
		// To do
		val = 1;
 800449a:	2301      	movs	r3, #1
 800449c:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 800449e:	7dbb      	ldrb	r3, [r7, #22]
 80044a0:	461a      	mov	r2, r3
 80044a2:	490c      	ldr	r1, [pc, #48]	@ (80044d4 <http_post_cgi_handler+0x78>)
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f002 f8dd 	bl	8006664 <siprintf>
 80044aa:	4603      	mov	r3, r0
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	82bb      	strh	r3, [r7, #20]
 80044b0:	e001      	b.n	80044b6 <http_post_cgi_handler+0x5a>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 80044b2:	2300      	movs	r3, #0
 80044b4:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <http_post_cgi_handler+0x68>
 80044bc:	8abb      	ldrh	r3, [r7, #20]
 80044be:	461a      	mov	r2, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	601a      	str	r2, [r3, #0]
	return ret;
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	08018514 	.word	0x08018514
 80044d4:	08018520 	.word	0x08018520

080044d8 <predefined_get_cgi_processor>:

uint8_t predefined_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
	;
}
 80044e4:	bf00      	nop
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <predefined_set_cgi_processor>:

uint8_t predefined_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * en)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	603b      	str	r3, [r7, #0]
	;
}
 8004500:	bf00      	nop
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	4604      	mov	r4, r0
 8004518:	4608      	mov	r0, r1
 800451a:	4611      	mov	r1, r2
 800451c:	461a      	mov	r2, r3
 800451e:	4623      	mov	r3, r4
 8004520:	71fb      	strb	r3, [r7, #7]
 8004522:	4603      	mov	r3, r0
 8004524:	71bb      	strb	r3, [r7, #6]
 8004526:	460b      	mov	r3, r1
 8004528:	80bb      	strh	r3, [r7, #4]
 800452a:	4613      	mov	r3, r2
 800452c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	2b08      	cmp	r3, #8
 8004532:	d902      	bls.n	800453a <socket+0x2a>
 8004534:	f04f 33ff 	mov.w	r3, #4294967295
 8004538:	e0f0      	b.n	800471c <socket+0x20c>
	switch(protocol)
 800453a:	79bb      	ldrb	r3, [r7, #6]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d005      	beq.n	800454c <socket+0x3c>
 8004540:	2b00      	cmp	r3, #0
 8004542:	dd11      	ble.n	8004568 <socket+0x58>
 8004544:	3b02      	subs	r3, #2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d80e      	bhi.n	8004568 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800454a:	e011      	b.n	8004570 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800454c:	f107 030c 	add.w	r3, r7, #12
 8004550:	2204      	movs	r2, #4
 8004552:	4619      	mov	r1, r3
 8004554:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004558:	f000 ff92 	bl	8005480 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d105      	bne.n	800456e <socket+0x5e>
 8004562:	f06f 0302 	mvn.w	r3, #2
 8004566:	e0d9      	b.n	800471c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8004568:	f06f 0304 	mvn.w	r3, #4
 800456c:	e0d6      	b.n	800471c <socket+0x20c>
	    break;
 800456e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <socket+0x70>
 800457a:	f06f 0305 	mvn.w	r3, #5
 800457e:	e0cd      	b.n	800471c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d028      	beq.n	80045d8 <socket+0xc8>
	{
   	switch(protocol)
 8004586:	79bb      	ldrb	r3, [r7, #6]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d002      	beq.n	8004592 <socket+0x82>
 800458c:	2b02      	cmp	r3, #2
 800458e:	d008      	beq.n	80045a2 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004590:	e022      	b.n	80045d8 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004598:	2b00      	cmp	r3, #0
 800459a:	d11a      	bne.n	80045d2 <socket+0xc2>
 800459c:	f06f 0305 	mvn.w	r3, #5
 80045a0:	e0bc      	b.n	800471c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d006      	beq.n	80045ba <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80045ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	db02      	blt.n	80045ba <socket+0xaa>
 80045b4:	f06f 0305 	mvn.w	r3, #5
 80045b8:	e0b0      	b.n	800471c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80045c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	db04      	blt.n	80045d6 <socket+0xc6>
 80045cc:	f06f 0305 	mvn.w	r3, #5
 80045d0:	e0a4      	b.n	800471c <socket+0x20c>
   	      break;
 80045d2:	bf00      	nop
 80045d4:	e000      	b.n	80045d8 <socket+0xc8>
   	      break;
 80045d6:	bf00      	nop
   	}
   }
	close(sn);
 80045d8:	79fb      	ldrb	r3, [r7, #7]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f8ac 	bl	8004738 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	3301      	adds	r3, #1
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	4618      	mov	r0, r3
 80045ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045ee:	f023 030f 	bic.w	r3, r3, #15
 80045f2:	b25a      	sxtb	r2, r3
 80045f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	b25b      	sxtb	r3, r3
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	4619      	mov	r1, r3
 8004600:	f000 fef0 	bl	80053e4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8004604:	88bb      	ldrh	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d110      	bne.n	800462c <socket+0x11c>
	{
	   port = sock_any_port++;
 800460a:	4b46      	ldr	r3, [pc, #280]	@ (8004724 <socket+0x214>)
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	b291      	uxth	r1, r2
 8004612:	4a44      	ldr	r2, [pc, #272]	@ (8004724 <socket+0x214>)
 8004614:	8011      	strh	r1, [r2, #0]
 8004616:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004618:	4b42      	ldr	r3, [pc, #264]	@ (8004724 <socket+0x214>)
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8004620:	4293      	cmp	r3, r2
 8004622:	d103      	bne.n	800462c <socket+0x11c>
 8004624:	4b3f      	ldr	r3, [pc, #252]	@ (8004724 <socket+0x214>)
 8004626:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800462a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	3301      	adds	r3, #1
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004638:	461a      	mov	r2, r3
 800463a:	88bb      	ldrh	r3, [r7, #4]
 800463c:	0a1b      	lsrs	r3, r3, #8
 800463e:	b29b      	uxth	r3, r3
 8004640:	b2db      	uxtb	r3, r3
 8004642:	4619      	mov	r1, r3
 8004644:	4610      	mov	r0, r2
 8004646:	f000 fecd 	bl	80053e4 <WIZCHIP_WRITE>
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	3301      	adds	r3, #1
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004656:	461a      	mov	r2, r3
 8004658:	88bb      	ldrh	r3, [r7, #4]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f000 fec0 	bl	80053e4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	3301      	adds	r3, #1
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004670:	2101      	movs	r1, #1
 8004672:	4618      	mov	r0, r3
 8004674:	f000 feb6 	bl	80053e4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004678:	bf00      	nop
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	3301      	adds	r3, #1
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fe60 	bl	800534c <WIZCHIP_READ>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f3      	bne.n	800467a <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	2201      	movs	r2, #1
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	b21b      	sxth	r3, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	b21a      	sxth	r2, r3
 80046a0:	4b21      	ldr	r3, [pc, #132]	@ (8004728 <socket+0x218>)
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	b21b      	sxth	r3, r3
 80046a6:	4013      	ands	r3, r2
 80046a8:	b21b      	sxth	r3, r3
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004728 <socket+0x218>)
 80046ae:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	f003 0201 	and.w	r2, r3, #1
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	b21a      	sxth	r2, r3
 80046be:	4b1a      	ldr	r3, [pc, #104]	@ (8004728 <socket+0x218>)
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b21b      	sxth	r3, r3
 80046c4:	4313      	orrs	r3, r2
 80046c6:	b21b      	sxth	r3, r3
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	4b17      	ldr	r3, [pc, #92]	@ (8004728 <socket+0x218>)
 80046cc:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	2201      	movs	r2, #1
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	b21b      	sxth	r3, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	b21a      	sxth	r2, r3
 80046dc:	4b13      	ldr	r3, [pc, #76]	@ (800472c <socket+0x21c>)
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b21b      	sxth	r3, r3
 80046e2:	4013      	ands	r3, r2
 80046e4:	b21b      	sxth	r3, r3
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	4b10      	ldr	r3, [pc, #64]	@ (800472c <socket+0x21c>)
 80046ea:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	4a10      	ldr	r2, [pc, #64]	@ (8004730 <socket+0x220>)
 80046f0:	2100      	movs	r1, #0
 80046f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004734 <socket+0x224>)
 80046fa:	2100      	movs	r1, #0
 80046fc:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80046fe:	bf00      	nop
 8004700:	79fb      	ldrb	r3, [r7, #7]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	3301      	adds	r3, #1
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fe1d 	bl	800534c <WIZCHIP_READ>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f3      	beq.n	8004700 <socket+0x1f0>
   return (int8_t)sn;
 8004718:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	bd90      	pop	{r4, r7, pc}
 8004724:	20000050 	.word	0x20000050
 8004728:	200013e4 	.word	0x200013e4
 800472c:	200013e6 	.word	0x200013e6
 8004730:	200013e8 	.word	0x200013e8
 8004734:	200013f8 	.word	0x200013f8

08004738 <close>:

int8_t close(uint8_t sn)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	2b08      	cmp	r3, #8
 8004746:	d902      	bls.n	800474e <close+0x16>
 8004748:	f04f 33ff 	mov.w	r3, #4294967295
 800474c:	e055      	b.n	80047fa <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	3301      	adds	r3, #1
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800475a:	2110      	movs	r1, #16
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fe41 	bl	80053e4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8004762:	bf00      	nop
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	3301      	adds	r3, #1
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fdeb 	bl	800534c <WIZCHIP_READ>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f3      	bne.n	8004764 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	3301      	adds	r3, #1
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004788:	211f      	movs	r1, #31
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fe2a 	bl	80053e4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	2201      	movs	r2, #1
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	b21b      	sxth	r3, r3
 800479a:	43db      	mvns	r3, r3
 800479c:	b21a      	sxth	r2, r3
 800479e:	4b19      	ldr	r3, [pc, #100]	@ (8004804 <close+0xcc>)
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	b21b      	sxth	r3, r3
 80047a4:	4013      	ands	r3, r2
 80047a6:	b21b      	sxth	r3, r3
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	4b16      	ldr	r3, [pc, #88]	@ (8004804 <close+0xcc>)
 80047ac:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80047ae:	79fb      	ldrb	r3, [r7, #7]
 80047b0:	2201      	movs	r2, #1
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	b21b      	sxth	r3, r3
 80047b8:	43db      	mvns	r3, r3
 80047ba:	b21a      	sxth	r2, r3
 80047bc:	4b12      	ldr	r3, [pc, #72]	@ (8004808 <close+0xd0>)
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	b21b      	sxth	r3, r3
 80047c2:	4013      	ands	r3, r2
 80047c4:	b21b      	sxth	r3, r3
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004808 <close+0xd0>)
 80047ca:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80047cc:	79fb      	ldrb	r3, [r7, #7]
 80047ce:	4a0f      	ldr	r2, [pc, #60]	@ (800480c <close+0xd4>)
 80047d0:	2100      	movs	r1, #0
 80047d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004810 <close+0xd8>)
 80047da:	2100      	movs	r1, #0
 80047dc:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80047de:	bf00      	nop
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	3301      	adds	r3, #1
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fdad 	bl	800534c <WIZCHIP_READ>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f3      	bne.n	80047e0 <close+0xa8>
	return SOCK_OK;
 80047f8:	2301      	movs	r3, #1
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	200013e4 	.word	0x200013e4
 8004808:	200013e6 	.word	0x200013e6
 800480c:	200013e8 	.word	0x200013e8
 8004810:	200013f8 	.word	0x200013f8

08004814 <listen>:

int8_t listen(uint8_t sn)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	2b08      	cmp	r3, #8
 8004822:	d902      	bls.n	800482a <listen+0x16>
 8004824:	f04f 33ff 	mov.w	r3, #4294967295
 8004828:	e049      	b.n	80048be <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	3301      	adds	r3, #1
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fd8a 	bl	800534c <WIZCHIP_READ>
 8004838:	4603      	mov	r3, r0
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	2b01      	cmp	r3, #1
 8004840:	d002      	beq.n	8004848 <listen+0x34>
 8004842:	f06f 0304 	mvn.w	r3, #4
 8004846:	e03a      	b.n	80048be <listen+0xaa>
	CHECK_SOCKINIT();
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	3301      	adds	r3, #1
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fd79 	bl	800534c <WIZCHIP_READ>
 800485a:	4603      	mov	r3, r0
 800485c:	2b13      	cmp	r3, #19
 800485e:	d002      	beq.n	8004866 <listen+0x52>
 8004860:	f06f 0302 	mvn.w	r3, #2
 8004864:	e02b      	b.n	80048be <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	3301      	adds	r3, #1
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004872:	2102      	movs	r1, #2
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fdb5 	bl	80053e4 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800487a:	bf00      	nop
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	3301      	adds	r3, #1
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fd5f 	bl	800534c <WIZCHIP_READ>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f3      	bne.n	800487c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8004894:	e006      	b.n	80048a4 <listen+0x90>
   {
         close(sn);
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff ff4d 	bl	8004738 <close>
         return SOCKERR_SOCKCLOSED;
 800489e:	f06f 0303 	mvn.w	r3, #3
 80048a2:	e00c      	b.n	80048be <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	3301      	adds	r3, #1
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fd4b 	bl	800534c <WIZCHIP_READ>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b14      	cmp	r3, #20
 80048ba:	d1ec      	bne.n	8004896 <listen+0x82>
   }
   return SOCK_OK;
 80048bc:	2301      	movs	r3, #1
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d902      	bls.n	80048de <disconnect+0x16>
 80048d8:	f04f 33ff 	mov.w	r3, #4294967295
 80048dc:	e062      	b.n	80049a4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	3301      	adds	r3, #1
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fd30 	bl	800534c <WIZCHIP_READ>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d002      	beq.n	80048fc <disconnect+0x34>
 80048f6:	f06f 0304 	mvn.w	r3, #4
 80048fa:	e053      	b.n	80049a4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 80048fc:	79fb      	ldrb	r3, [r7, #7]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	3301      	adds	r3, #1
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004908:	2108      	movs	r1, #8
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fd6a 	bl	80053e4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004910:	bf00      	nop
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	3301      	adds	r3, #1
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fd14 	bl	800534c <WIZCHIP_READ>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f3      	bne.n	8004912 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	2201      	movs	r2, #1
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	b21b      	sxth	r3, r3
 8004934:	43db      	mvns	r3, r3
 8004936:	b21a      	sxth	r2, r3
 8004938:	4b1c      	ldr	r3, [pc, #112]	@ (80049ac <disconnect+0xe4>)
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b21b      	sxth	r3, r3
 800493e:	4013      	ands	r3, r2
 8004940:	b21b      	sxth	r3, r3
 8004942:	b29a      	uxth	r2, r3
 8004944:	4b19      	ldr	r3, [pc, #100]	@ (80049ac <disconnect+0xe4>)
 8004946:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004948:	4b19      	ldr	r3, [pc, #100]	@ (80049b0 <disconnect+0xe8>)
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	fa42 f303 	asr.w	r3, r2, r3
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d016      	beq.n	800498a <disconnect+0xc2>
 800495c:	2300      	movs	r3, #0
 800495e:	e021      	b.n	80049a4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	3301      	adds	r3, #1
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fced 	bl	800534c <WIZCHIP_READ>
 8004972:	4603      	mov	r3, r0
 8004974:	f003 0308 	and.w	r3, r3, #8
 8004978:	2b00      	cmp	r3, #0
 800497a:	d006      	beq.n	800498a <disconnect+0xc2>
	   {
	      close(sn);
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff feda 	bl	8004738 <close>
	      return SOCKERR_TIMEOUT;
 8004984:	f06f 030c 	mvn.w	r3, #12
 8004988:	e00c      	b.n	80049a4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	3301      	adds	r3, #1
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fcd8 	bl	800534c <WIZCHIP_READ>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1de      	bne.n	8004960 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80049a2:	2301      	movs	r3, #1
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	200013e6 	.word	0x200013e6
 80049b0:	200013e4 	.word	0x200013e4

080049b4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	6039      	str	r1, [r7, #0]
 80049be:	71fb      	strb	r3, [r7, #7]
 80049c0:	4613      	mov	r3, r2
 80049c2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d902      	bls.n	80049d8 <send+0x24>
 80049d2:	f04f 33ff 	mov.w	r3, #4294967295
 80049d6:	e0dd      	b.n	8004b94 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	3301      	adds	r3, #1
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fcb3 	bl	800534c <WIZCHIP_READ>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d002      	beq.n	80049f6 <send+0x42>
 80049f0:	f06f 0304 	mvn.w	r3, #4
 80049f4:	e0ce      	b.n	8004b94 <send+0x1e0>
   CHECK_SOCKDATA();
 80049f6:	88bb      	ldrh	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d102      	bne.n	8004a02 <send+0x4e>
 80049fc:	f06f 030d 	mvn.w	r3, #13
 8004a00:	e0c8      	b.n	8004b94 <send+0x1e0>
   tmp = getSn_SR(sn);
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	3301      	adds	r3, #1
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fc9c 	bl	800534c <WIZCHIP_READ>
 8004a14:	4603      	mov	r3, r0
 8004a16:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	2b17      	cmp	r3, #23
 8004a1c:	d005      	beq.n	8004a2a <send+0x76>
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	2b1c      	cmp	r3, #28
 8004a22:	d002      	beq.n	8004a2a <send+0x76>
 8004a24:	f06f 0306 	mvn.w	r3, #6
 8004a28:	e0b4      	b.n	8004b94 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8004a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8004b9c <send+0x1e8>)
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	fa42 f303 	asr.w	r3, r2, r3
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d039      	beq.n	8004ab2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	3301      	adds	r3, #1
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fc7e 	bl	800534c <WIZCHIP_READ>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d019      	beq.n	8004a96 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	3301      	adds	r3, #1
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004a6e:	2110      	movs	r1, #16
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fcb7 	bl	80053e4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	b21b      	sxth	r3, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	b21a      	sxth	r2, r3
 8004a84:	4b45      	ldr	r3, [pc, #276]	@ (8004b9c <send+0x1e8>)
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	b21b      	sxth	r3, r3
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	b21b      	sxth	r3, r3
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	4b42      	ldr	r3, [pc, #264]	@ (8004b9c <send+0x1e8>)
 8004a92:	801a      	strh	r2, [r3, #0]
 8004a94:	e00d      	b.n	8004ab2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d006      	beq.n	8004aae <send+0xfa>
      {
         close(sn);
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fe48 	bl	8004738 <close>
         return SOCKERR_TIMEOUT;
 8004aa8:	f06f 030c 	mvn.w	r3, #12
 8004aac:	e072      	b.n	8004b94 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e070      	b.n	8004b94 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fc44 	bl	800534c <WIZCHIP_READ>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	029b      	lsls	r3, r3, #10
 8004ac8:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004aca:	88ba      	ldrh	r2, [r7, #4]
 8004acc:	89bb      	ldrh	r3, [r7, #12]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d901      	bls.n	8004ad6 <send+0x122>
 8004ad2:	89bb      	ldrh	r3, [r7, #12]
 8004ad4:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fd91 	bl	8005600 <getSn_TX_FSR>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fc2c 	bl	800534c <WIZCHIP_READ>
 8004af4:	4603      	mov	r3, r0
 8004af6:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	2b17      	cmp	r3, #23
 8004afc:	d009      	beq.n	8004b12 <send+0x15e>
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b1c      	cmp	r3, #28
 8004b02:	d006      	beq.n	8004b12 <send+0x15e>
      {
         close(sn);
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff fe16 	bl	8004738 <close>
         return SOCKERR_SOCKSTATUS;
 8004b0c:	f06f 0306 	mvn.w	r3, #6
 8004b10:	e040      	b.n	8004b94 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004b12:	4b23      	ldr	r3, [pc, #140]	@ (8004ba0 <send+0x1ec>)
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	fa42 f303 	asr.w	r3, r2, r3
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <send+0x17e>
 8004b26:	88ba      	ldrh	r2, [r7, #4]
 8004b28:	89bb      	ldrh	r3, [r7, #12]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d901      	bls.n	8004b32 <send+0x17e>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e030      	b.n	8004b94 <send+0x1e0>
      if(len <= freesize) break;
 8004b32:	88ba      	ldrh	r2, [r7, #4]
 8004b34:	89bb      	ldrh	r3, [r7, #12]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d900      	bls.n	8004b3c <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8004b3a:	e7cc      	b.n	8004ad6 <send+0x122>
      if(len <= freesize) break;
 8004b3c:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004b3e:	88ba      	ldrh	r2, [r7, #4]
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	6839      	ldr	r1, [r7, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fded 	bl	8005724 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	3301      	adds	r3, #1
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004b56:	2120      	movs	r1, #32
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fc43 	bl	80053e4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8004b5e:	bf00      	nop
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	3301      	adds	r3, #1
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fbed 	bl	800534c <WIZCHIP_READ>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f3      	bne.n	8004b60 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	b21a      	sxth	r2, r3
 8004b82:	4b06      	ldr	r3, [pc, #24]	@ (8004b9c <send+0x1e8>)
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	b21b      	sxth	r3, r3
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	b21b      	sxth	r3, r3
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	4b03      	ldr	r3, [pc, #12]	@ (8004b9c <send+0x1e8>)
 8004b90:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004b92:	88bb      	ldrh	r3, [r7, #4]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	200013e6 	.word	0x200013e6
 8004ba0:	200013e4 	.word	0x200013e4

08004ba4 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	6039      	str	r1, [r7, #0]
 8004bae:	71fb      	strb	r3, [r7, #7]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d902      	bls.n	8004bc8 <recv+0x24>
 8004bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc6:	e09b      	b.n	8004d00 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	3301      	adds	r3, #1
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fbbb 	bl	800534c <WIZCHIP_READ>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d002      	beq.n	8004be6 <recv+0x42>
 8004be0:	f06f 0304 	mvn.w	r3, #4
 8004be4:	e08c      	b.n	8004d00 <recv+0x15c>
   CHECK_SOCKDATA();
 8004be6:	88bb      	ldrh	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <recv+0x4e>
 8004bec:	f06f 030d 	mvn.w	r3, #13
 8004bf0:	e086      	b.n	8004d00 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fba4 	bl	800534c <WIZCHIP_READ>
 8004c04:	4603      	mov	r3, r0
 8004c06:	029b      	lsls	r3, r3, #10
 8004c08:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8004c0a:	89ba      	ldrh	r2, [r7, #12]
 8004c0c:	88bb      	ldrh	r3, [r7, #4]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d201      	bcs.n	8004c16 <recv+0x72>
 8004c12:	89bb      	ldrh	r3, [r7, #12]
 8004c14:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fd3a 	bl	8005692 <getSn_RX_RSR>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	3301      	adds	r3, #1
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fb8c 	bl	800534c <WIZCHIP_READ>
 8004c34:	4603      	mov	r3, r0
 8004c36:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	2b17      	cmp	r3, #23
 8004c3c:	d026      	beq.n	8004c8c <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	2b1c      	cmp	r3, #28
 8004c42:	d11c      	bne.n	8004c7e <recv+0xda>
            {
               if(recvsize != 0) break;
 8004c44:	89bb      	ldrh	r3, [r7, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d133      	bne.n	8004cb2 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fcd7 	bl	8005600 <getSn_TX_FSR>
 8004c52:	4603      	mov	r3, r0
 8004c54:	461c      	mov	r4, r3
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fb72 	bl	800534c <WIZCHIP_READ>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	029b      	lsls	r3, r3, #10
 8004c6c:	429c      	cmp	r4, r3
 8004c6e:	d10d      	bne.n	8004c8c <recv+0xe8>
               {
                  close(sn);
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff fd60 	bl	8004738 <close>
                  return SOCKERR_SOCKSTATUS;
 8004c78:	f06f 0306 	mvn.w	r3, #6
 8004c7c:	e040      	b.n	8004d00 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff fd59 	bl	8004738 <close>
               return SOCKERR_SOCKSTATUS;
 8004c86:	f06f 0306 	mvn.w	r3, #6
 8004c8a:	e039      	b.n	8004d00 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8004c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004d08 <recv+0x164>)
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	fa42 f303 	asr.w	r3, r2, r3
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d004      	beq.n	8004caa <recv+0x106>
 8004ca0:	89bb      	ldrh	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <recv+0x106>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e02a      	b.n	8004d00 <recv+0x15c>
         if(recvsize != 0) break;
 8004caa:	89bb      	ldrh	r3, [r7, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d102      	bne.n	8004cb6 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8004cb0:	e7b1      	b.n	8004c16 <recv+0x72>
               if(recvsize != 0) break;
 8004cb2:	bf00      	nop
 8004cb4:	e000      	b.n	8004cb8 <recv+0x114>
         if(recvsize != 0) break;
 8004cb6:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8004cb8:	89ba      	ldrh	r2, [r7, #12]
 8004cba:	88bb      	ldrh	r3, [r7, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d201      	bcs.n	8004cc4 <recv+0x120>
 8004cc0:	89bb      	ldrh	r3, [r7, #12]
 8004cc2:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8004cc4:	88ba      	ldrh	r2, [r7, #4]
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	6839      	ldr	r1, [r7, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fd84 	bl	80057d8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8004cd0:	79fb      	ldrb	r3, [r7, #7]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004cdc:	2140      	movs	r1, #64	@ 0x40
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fb80 	bl	80053e4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004ce4:	bf00      	nop
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	3301      	adds	r3, #1
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fb2a 	bl	800534c <WIZCHIP_READ>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f3      	bne.n	8004ce6 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004cfe:	88bb      	ldrh	r3, [r7, #4]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd90      	pop	{r4, r7, pc}
 8004d08:	200013e4 	.word	0x200013e4

08004d0c <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	4603      	mov	r3, r0
 8004d18:	73fb      	strb	r3, [r7, #15]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d902      	bls.n	8004d32 <sendto+0x26>
 8004d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d30:	e11a      	b.n	8004f68 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	3301      	adds	r3, #1
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fb06 	bl	800534c <WIZCHIP_READ>
 8004d40:	4603      	mov	r3, r0
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	3b02      	subs	r3, #2
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d902      	bls.n	8004d52 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004d4c:	f06f 0304 	mvn.w	r3, #4
 8004d50:	e10a      	b.n	8004f68 <sendto+0x25c>
         break;
 8004d52:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004d54:	89bb      	ldrh	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d102      	bne.n	8004d60 <sendto+0x54>
 8004d5a:	f06f 030d 	mvn.w	r3, #13
 8004d5e:	e103      	b.n	8004f68 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	3201      	adds	r2, #1
 8004d6e:	7812      	ldrb	r2, [r2, #0]
 8004d70:	4413      	add	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	3202      	adds	r2, #2
 8004d7c:	7812      	ldrb	r2, [r2, #0]
 8004d7e:	4413      	add	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	021b      	lsls	r3, r3, #8
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	3203      	adds	r2, #3
 8004d8a:	7812      	ldrb	r2, [r2, #0]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10e      	bne.n	8004db4 <sendto+0xa8>
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fad4 	bl	800534c <WIZCHIP_READ>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d002      	beq.n	8004db4 <sendto+0xa8>
 8004dae:	f06f 030b 	mvn.w	r3, #11
 8004db2:	e0d9      	b.n	8004f68 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8004db4:	8c3b      	ldrh	r3, [r7, #32]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10e      	bne.n	8004dd8 <sendto+0xcc>
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fac2 	bl	800534c <WIZCHIP_READ>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d002      	beq.n	8004dd8 <sendto+0xcc>
 8004dd2:	f06f 030a 	mvn.w	r3, #10
 8004dd6:	e0c7      	b.n	8004f68 <sendto+0x25c>
   tmp = getSn_SR(sn);
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	3301      	adds	r3, #1
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fab1 	bl	800534c <WIZCHIP_READ>
 8004dea:	4603      	mov	r3, r0
 8004dec:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
 8004df0:	2b42      	cmp	r3, #66	@ 0x42
 8004df2:	d008      	beq.n	8004e06 <sendto+0xfa>
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	2b22      	cmp	r3, #34	@ 0x22
 8004df8:	d005      	beq.n	8004e06 <sendto+0xfa>
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
 8004dfc:	2b32      	cmp	r3, #50	@ 0x32
 8004dfe:	d002      	beq.n	8004e06 <sendto+0xfa>
 8004e00:	f06f 0306 	mvn.w	r3, #6
 8004e04:	e0b0      	b.n	8004f68 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004e12:	2204      	movs	r2, #4
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fb92 	bl	8005540 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	3301      	adds	r3, #1
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e28:	461a      	mov	r2, r3
 8004e2a:	8c3b      	ldrh	r3, [r7, #32]
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	4619      	mov	r1, r3
 8004e34:	4610      	mov	r0, r2
 8004e36:	f000 fad5 	bl	80053e4 <WIZCHIP_WRITE>
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	3301      	adds	r3, #1
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8004e46:	461a      	mov	r2, r3
 8004e48:	8c3b      	ldrh	r3, [r7, #32]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	f000 fac8 	bl	80053e4 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	3301      	adds	r3, #1
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fa73 	bl	800534c <WIZCHIP_READ>
 8004e66:	4603      	mov	r3, r0
 8004e68:	029b      	lsls	r3, r3, #10
 8004e6a:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004e6c:	89ba      	ldrh	r2, [r7, #12]
 8004e6e:	8abb      	ldrh	r3, [r7, #20]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d901      	bls.n	8004e78 <sendto+0x16c>
 8004e74:	8abb      	ldrh	r3, [r7, #20]
 8004e76:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fbc0 	bl	8005600 <getSn_TX_FSR>
 8004e80:	4603      	mov	r3, r0
 8004e82:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	3301      	adds	r3, #1
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fa5b 	bl	800534c <WIZCHIP_READ>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d102      	bne.n	8004ea2 <sendto+0x196>
 8004e9c:	f06f 0303 	mvn.w	r3, #3
 8004ea0:	e062      	b.n	8004f68 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004ea2:	4b33      	ldr	r3, [pc, #204]	@ (8004f70 <sendto+0x264>)
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	fa42 f303 	asr.w	r3, r2, r3
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <sendto+0x1b6>
 8004eb6:	89ba      	ldrh	r2, [r7, #12]
 8004eb8:	8abb      	ldrh	r3, [r7, #20]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d901      	bls.n	8004ec2 <sendto+0x1b6>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e052      	b.n	8004f68 <sendto+0x25c>
      if(len <= freesize) break;
 8004ec2:	89ba      	ldrh	r2, [r7, #12]
 8004ec4:	8abb      	ldrh	r3, [r7, #20]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d900      	bls.n	8004ecc <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8004eca:	e7d5      	b.n	8004e78 <sendto+0x16c>
      if(len <= freesize) break;
 8004ecc:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8004ece:	89ba      	ldrh	r2, [r7, #12]
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	68b9      	ldr	r1, [r7, #8]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 fc25 	bl	8005724 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	3301      	adds	r3, #1
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ee6:	2120      	movs	r1, #32
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 fa7b 	bl	80053e4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004eee:	bf00      	nop
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fa25 	bl	800534c <WIZCHIP_READ>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1f3      	bne.n	8004ef0 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fa19 	bl	800534c <WIZCHIP_READ>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	f003 031f 	and.w	r3, r3, #31
 8004f20:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00c      	beq.n	8004f46 <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	3301      	adds	r3, #1
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004f38:	2110      	movs	r1, #16
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fa52 	bl	80053e4 <WIZCHIP_WRITE>
         break;
 8004f40:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004f42:	89bb      	ldrh	r3, [r7, #12]
 8004f44:	e010      	b.n	8004f68 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0db      	beq.n	8004f08 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	3301      	adds	r3, #1
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004f5c:	2108      	movs	r1, #8
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fa40 	bl	80053e4 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8004f64:	f06f 030c 	mvn.w	r3, #12
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	200013e4 	.word	0x200013e4

08004f74 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	607b      	str	r3, [r7, #4]
 8004f7e:	4603      	mov	r3, r0
 8004f80:	73fb      	strb	r3, [r7, #15]
 8004f82:	4613      	mov	r3, r2
 8004f84:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d902      	bls.n	8004f96 <recvfrom+0x22>
 8004f90:	f04f 33ff 	mov.w	r3, #4294967295
 8004f94:	e1d2      	b.n	800533c <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f9d4 	bl	800534c <WIZCHIP_READ>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	777b      	strb	r3, [r7, #29]
 8004fa8:	7f7b      	ldrb	r3, [r7, #29]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	3b02      	subs	r3, #2
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d902      	bls.n	8004fba <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004fb4:	f06f 0304 	mvn.w	r3, #4
 8004fb8:	e1c0      	b.n	800533c <recvfrom+0x3c8>
         break;
 8004fba:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004fbc:	89bb      	ldrh	r3, [r7, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d102      	bne.n	8004fc8 <recvfrom+0x54>
 8004fc2:	f06f 030d 	mvn.w	r3, #13
 8004fc6:	e1b9      	b.n	800533c <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	4a87      	ldr	r2, [pc, #540]	@ (80051e8 <recvfrom+0x274>)
 8004fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d128      	bne.n	8005026 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fb5b 	bl	8005692 <getSn_RX_RSR>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 f9ad 	bl	800534c <WIZCHIP_READ>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <recvfrom+0x8a>
 8004ff8:	f06f 0303 	mvn.w	r3, #3
 8004ffc:	e19e      	b.n	800533c <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8004ffe:	4b7b      	ldr	r3, [pc, #492]	@ (80051ec <recvfrom+0x278>)
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	fa42 f303 	asr.w	r3, r2, r3
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d004      	beq.n	800501c <recvfrom+0xa8>
 8005012:	8bfb      	ldrh	r3, [r7, #30]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <recvfrom+0xa8>
 8005018:	2300      	movs	r3, #0
 800501a:	e18f      	b.n	800533c <recvfrom+0x3c8>
         if(pack_len != 0) break;
 800501c:	8bfb      	ldrh	r3, [r7, #30]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d100      	bne.n	8005024 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8005022:	e7d7      	b.n	8004fd4 <recvfrom+0x60>
         if(pack_len != 0) break;
 8005024:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8005026:	7f7b      	ldrb	r3, [r7, #29]
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	2b04      	cmp	r3, #4
 800502e:	d078      	beq.n	8005122 <recvfrom+0x1ae>
 8005030:	2b04      	cmp	r3, #4
 8005032:	f300 8140 	bgt.w	80052b6 <recvfrom+0x342>
 8005036:	2b02      	cmp	r3, #2
 8005038:	d003      	beq.n	8005042 <recvfrom+0xce>
 800503a:	2b03      	cmp	r3, #3
 800503c:	f000 80da 	beq.w	80051f4 <recvfrom+0x280>
 8005040:	e139      	b.n	80052b6 <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	4a68      	ldr	r2, [pc, #416]	@ (80051e8 <recvfrom+0x274>)
 8005046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d151      	bne.n	80050f2 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 800504e:	f107 0114 	add.w	r1, r7, #20
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	2208      	movs	r2, #8
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fbbe 	bl	80057d8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	3301      	adds	r3, #1
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005068:	2140      	movs	r1, #64	@ 0x40
 800506a:	4618      	mov	r0, r3
 800506c:	f000 f9ba 	bl	80053e4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8005070:	bf00      	nop
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	3301      	adds	r3, #1
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800507e:	4618      	mov	r0, r3
 8005080:	f000 f964 	bl	800534c <WIZCHIP_READ>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f3      	bne.n	8005072 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800508a:	7d3a      	ldrb	r2, [r7, #20]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3301      	adds	r3, #1
 8005094:	7d7a      	ldrb	r2, [r7, #21]
 8005096:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3302      	adds	r3, #2
 800509c:	7dba      	ldrb	r2, [r7, #22]
 800509e:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3303      	adds	r3, #3
 80050a4:	7dfa      	ldrb	r2, [r7, #23]
 80050a6:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80050a8:	7e3b      	ldrb	r3, [r7, #24]
 80050aa:	461a      	mov	r2, r3
 80050ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ae:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80050b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	021b      	lsls	r3, r3, #8
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	7e7a      	ldrb	r2, [r7, #25]
 80050ba:	4413      	add	r3, r2
 80050bc:	b29a      	uxth	r2, r3
 80050be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c0:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80050c2:	7eba      	ldrb	r2, [r7, #26]
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	4611      	mov	r1, r2
 80050c8:	4a47      	ldr	r2, [pc, #284]	@ (80051e8 <recvfrom+0x274>)
 80050ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	4a45      	ldr	r2, [pc, #276]	@ (80051e8 <recvfrom+0x274>)
 80050d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	b29a      	uxth	r2, r3
 80050da:	7efb      	ldrb	r3, [r7, #27]
 80050dc:	4619      	mov	r1, r3
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	440a      	add	r2, r1
 80050e2:	b291      	uxth	r1, r2
 80050e4:	4a40      	ldr	r2, [pc, #256]	@ (80051e8 <recvfrom+0x274>)
 80050e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	4a40      	ldr	r2, [pc, #256]	@ (80051f0 <recvfrom+0x27c>)
 80050ee:	2180      	movs	r1, #128	@ 0x80
 80050f0:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	4a3c      	ldr	r2, [pc, #240]	@ (80051e8 <recvfrom+0x274>)
 80050f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050fa:	89ba      	ldrh	r2, [r7, #12]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d202      	bcs.n	8005106 <recvfrom+0x192>
 8005100:	89bb      	ldrh	r3, [r7, #12]
 8005102:	83fb      	strh	r3, [r7, #30]
 8005104:	e004      	b.n	8005110 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	4a37      	ldr	r2, [pc, #220]	@ (80051e8 <recvfrom+0x274>)
 800510a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800510e:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8005110:	8bfb      	ldrh	r3, [r7, #30]
 8005112:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8005114:	8bfa      	ldrh	r2, [r7, #30]
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	68b9      	ldr	r1, [r7, #8]
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fb5c 	bl	80057d8 <wiz_recv_data>
			break;
 8005120:	e0d5      	b.n	80052ce <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	4a30      	ldr	r2, [pc, #192]	@ (80051e8 <recvfrom+0x274>)
 8005126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d145      	bne.n	80051ba <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 800512e:	f107 0114 	add.w	r1, r7, #20
 8005132:	7bfb      	ldrb	r3, [r7, #15]
 8005134:	2202      	movs	r2, #2
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fb4e 	bl	80057d8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	3301      	adds	r3, #1
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005148:	2140      	movs	r1, #64	@ 0x40
 800514a:	4618      	mov	r0, r3
 800514c:	f000 f94a 	bl	80053e4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8005150:	bf00      	nop
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	3301      	adds	r3, #1
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800515e:	4618      	mov	r0, r3
 8005160:	f000 f8f4 	bl	800534c <WIZCHIP_READ>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f3      	bne.n	8005152 <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800516a:	7d3a      	ldrb	r2, [r7, #20]
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	4611      	mov	r1, r2
 8005170:	4a1d      	ldr	r2, [pc, #116]	@ (80051e8 <recvfrom+0x274>)
 8005172:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	4a1b      	ldr	r2, [pc, #108]	@ (80051e8 <recvfrom+0x274>)
 800517a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800517e:	021b      	lsls	r3, r3, #8
 8005180:	b29b      	uxth	r3, r3
 8005182:	7d7a      	ldrb	r2, [r7, #21]
 8005184:	4413      	add	r3, r2
 8005186:	b29a      	uxth	r2, r3
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	3a02      	subs	r2, #2
 800518c:	b291      	uxth	r1, r2
 800518e:	4a16      	ldr	r2, [pc, #88]	@ (80051e8 <recvfrom+0x274>)
 8005190:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	4a14      	ldr	r2, [pc, #80]	@ (80051e8 <recvfrom+0x274>)
 8005198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800519c:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d906      	bls.n	80051b2 <recvfrom+0x23e>
   			{
   			   close(sn);
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff fac6 	bl	8004738 <close>
   			   return SOCKFATAL_PACKLEN;
 80051ac:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 80051b0:	e0c4      	b.n	800533c <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	4a0e      	ldr	r2, [pc, #56]	@ (80051f0 <recvfrom+0x27c>)
 80051b6:	2180      	movs	r1, #128	@ 0x80
 80051b8:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	4a0a      	ldr	r2, [pc, #40]	@ (80051e8 <recvfrom+0x274>)
 80051be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051c2:	89ba      	ldrh	r2, [r7, #12]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d202      	bcs.n	80051ce <recvfrom+0x25a>
 80051c8:	89bb      	ldrh	r3, [r7, #12]
 80051ca:	83fb      	strh	r3, [r7, #30]
 80051cc:	e004      	b.n	80051d8 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	4a05      	ldr	r2, [pc, #20]	@ (80051e8 <recvfrom+0x274>)
 80051d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051d6:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80051d8:	8bfa      	ldrh	r2, [r7, #30]
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	68b9      	ldr	r1, [r7, #8]
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fafa 	bl	80057d8 <wiz_recv_data>
		   break;
 80051e4:	e073      	b.n	80052ce <recvfrom+0x35a>
 80051e6:	bf00      	nop
 80051e8:	200013e8 	.word	0x200013e8
 80051ec:	200013e4 	.word	0x200013e4
 80051f0:	200013f8 	.word	0x200013f8
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	4a53      	ldr	r2, [pc, #332]	@ (8005344 <recvfrom+0x3d0>)
 80051f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d144      	bne.n	800528a <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 8005200:	f107 0114 	add.w	r1, r7, #20
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2206      	movs	r2, #6
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fae5 	bl	80057d8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800520e:	7bfb      	ldrb	r3, [r7, #15]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	3301      	adds	r3, #1
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800521a:	2140      	movs	r1, #64	@ 0x40
 800521c:	4618      	mov	r0, r3
 800521e:	f000 f8e1 	bl	80053e4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8005222:	bf00      	nop
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	3301      	adds	r3, #1
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005230:	4618      	mov	r0, r3
 8005232:	f000 f88b 	bl	800534c <WIZCHIP_READ>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f3      	bne.n	8005224 <recvfrom+0x2b0>
   			addr[0] = head[0];
 800523c:	7d3a      	ldrb	r2, [r7, #20]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3301      	adds	r3, #1
 8005246:	7d7a      	ldrb	r2, [r7, #21]
 8005248:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3302      	adds	r3, #2
 800524e:	7dba      	ldrb	r2, [r7, #22]
 8005250:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3303      	adds	r3, #3
 8005256:	7dfa      	ldrb	r2, [r7, #23]
 8005258:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800525a:	7e3a      	ldrb	r2, [r7, #24]
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	4611      	mov	r1, r2
 8005260:	4a38      	ldr	r2, [pc, #224]	@ (8005344 <recvfrom+0x3d0>)
 8005262:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	4a36      	ldr	r2, [pc, #216]	@ (8005344 <recvfrom+0x3d0>)
 800526a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	b29a      	uxth	r2, r3
 8005272:	7e7b      	ldrb	r3, [r7, #25]
 8005274:	4619      	mov	r1, r3
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	440a      	add	r2, r1
 800527a:	b291      	uxth	r1, r2
 800527c:	4a31      	ldr	r2, [pc, #196]	@ (8005344 <recvfrom+0x3d0>)
 800527e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	4a30      	ldr	r2, [pc, #192]	@ (8005348 <recvfrom+0x3d4>)
 8005286:	2180      	movs	r1, #128	@ 0x80
 8005288:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	4a2d      	ldr	r2, [pc, #180]	@ (8005344 <recvfrom+0x3d0>)
 800528e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005292:	89ba      	ldrh	r2, [r7, #12]
 8005294:	429a      	cmp	r2, r3
 8005296:	d202      	bcs.n	800529e <recvfrom+0x32a>
 8005298:	89bb      	ldrh	r3, [r7, #12]
 800529a:	83fb      	strh	r3, [r7, #30]
 800529c:	e004      	b.n	80052a8 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	4a28      	ldr	r2, [pc, #160]	@ (8005344 <recvfrom+0x3d0>)
 80052a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052a6:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80052a8:	8bfa      	ldrh	r2, [r7, #30]
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fa92 	bl	80057d8 <wiz_recv_data>
			break;
 80052b4:	e00b      	b.n	80052ce <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80052b6:	8bfa      	ldrh	r2, [r7, #30]
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	4611      	mov	r1, r2
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fae5 	bl	800588c <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	491f      	ldr	r1, [pc, #124]	@ (8005344 <recvfrom+0x3d0>)
 80052c6:	8bfa      	ldrh	r2, [r7, #30]
 80052c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80052cc:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	3301      	adds	r3, #1
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80052da:	2140      	movs	r1, #64	@ 0x40
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 f881 	bl	80053e4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80052e2:	bf00      	nop
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	3301      	adds	r3, #1
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 f82b 	bl	800534c <WIZCHIP_READ>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f3      	bne.n	80052e4 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
 80052fe:	4a11      	ldr	r2, [pc, #68]	@ (8005344 <recvfrom+0x3d0>)
 8005300:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	8bfa      	ldrh	r2, [r7, #30]
 8005308:	1a8a      	subs	r2, r1, r2
 800530a:	b291      	uxth	r1, r2
 800530c:	4a0d      	ldr	r2, [pc, #52]	@ (8005344 <recvfrom+0x3d0>)
 800530e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8005312:	7bfb      	ldrb	r3, [r7, #15]
 8005314:	4a0b      	ldr	r2, [pc, #44]	@ (8005344 <recvfrom+0x3d0>)
 8005316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d009      	beq.n	8005332 <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	4a09      	ldr	r2, [pc, #36]	@ (8005348 <recvfrom+0x3d4>)
 8005322:	5cd2      	ldrb	r2, [r2, r3]
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	b2d1      	uxtb	r1, r2
 800532c:	4a06      	ldr	r2, [pc, #24]	@ (8005348 <recvfrom+0x3d4>)
 800532e:	54d1      	strb	r1, [r2, r3]
 8005330:	e003      	b.n	800533a <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	4a04      	ldr	r2, [pc, #16]	@ (8005348 <recvfrom+0x3d4>)
 8005336:	2100      	movs	r1, #0
 8005338:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800533a:	8bfb      	ldrh	r3, [r7, #30]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	200013e8 	.word	0x200013e8
 8005348:	200013f8 	.word	0x200013f8

0800534c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8005354:	4b22      	ldr	r3, [pc, #136]	@ (80053e0 <WIZCHIP_READ+0x94>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	4798      	blx	r3
   WIZCHIP.CS._select();
 800535a:	4b21      	ldr	r3, [pc, #132]	@ (80053e0 <WIZCHIP_READ+0x94>)
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005360:	4b1f      	ldr	r3, [pc, #124]	@ (80053e0 <WIZCHIP_READ+0x94>)
 8005362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <WIZCHIP_READ+0x24>
 8005368:	4b1d      	ldr	r3, [pc, #116]	@ (80053e0 <WIZCHIP_READ+0x94>)
 800536a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536c:	2b00      	cmp	r3, #0
 800536e:	d114      	bne.n	800539a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005370:	4b1b      	ldr	r3, [pc, #108]	@ (80053e0 <WIZCHIP_READ+0x94>)
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	0c12      	lsrs	r2, r2, #16
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	4610      	mov	r0, r2
 800537c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800537e:	4b18      	ldr	r3, [pc, #96]	@ (80053e0 <WIZCHIP_READ+0x94>)
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	0a12      	lsrs	r2, r2, #8
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	4610      	mov	r0, r2
 800538a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800538c:	4b14      	ldr	r3, [pc, #80]	@ (80053e0 <WIZCHIP_READ+0x94>)
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	4610      	mov	r0, r2
 8005396:	4798      	blx	r3
 8005398:	e011      	b.n	80053be <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	0a1b      	lsrs	r3, r3, #8
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80053b0:	4b0b      	ldr	r3, [pc, #44]	@ (80053e0 <WIZCHIP_READ+0x94>)
 80053b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b4:	f107 020c 	add.w	r2, r7, #12
 80053b8:	2103      	movs	r1, #3
 80053ba:	4610      	mov	r0, r2
 80053bc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80053be:	4b08      	ldr	r3, [pc, #32]	@ (80053e0 <WIZCHIP_READ+0x94>)
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	4798      	blx	r3
 80053c4:	4603      	mov	r3, r0
 80053c6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80053c8:	4b05      	ldr	r3, [pc, #20]	@ (80053e0 <WIZCHIP_READ+0x94>)
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80053ce:	4b04      	ldr	r3, [pc, #16]	@ (80053e0 <WIZCHIP_READ+0x94>)
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	4798      	blx	r3
   return ret;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000054 	.word	0x20000054

080053e4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	460b      	mov	r3, r1
 80053ee:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80053f0:	4b22      	ldr	r3, [pc, #136]	@ (800547c <WIZCHIP_WRITE+0x98>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80053f6:	4b21      	ldr	r3, [pc, #132]	@ (800547c <WIZCHIP_WRITE+0x98>)
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f043 0304 	orr.w	r3, r3, #4
 8005402:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005404:	4b1d      	ldr	r3, [pc, #116]	@ (800547c <WIZCHIP_WRITE+0x98>)
 8005406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005408:	2b00      	cmp	r3, #0
 800540a:	d119      	bne.n	8005440 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800540c:	4b1b      	ldr	r3, [pc, #108]	@ (800547c <WIZCHIP_WRITE+0x98>)
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	0c12      	lsrs	r2, r2, #16
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	4610      	mov	r0, r2
 8005418:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800541a:	4b18      	ldr	r3, [pc, #96]	@ (800547c <WIZCHIP_WRITE+0x98>)
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	0a12      	lsrs	r2, r2, #8
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	4610      	mov	r0, r2
 8005426:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005428:	4b14      	ldr	r3, [pc, #80]	@ (800547c <WIZCHIP_WRITE+0x98>)
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	4610      	mov	r0, r2
 8005432:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8005434:	4b11      	ldr	r3, [pc, #68]	@ (800547c <WIZCHIP_WRITE+0x98>)
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	78fa      	ldrb	r2, [r7, #3]
 800543a:	4610      	mov	r0, r2
 800543c:	4798      	blx	r3
 800543e:	e013      	b.n	8005468 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	0c1b      	lsrs	r3, r3, #16
 8005444:	b2db      	uxtb	r3, r3
 8005446:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	0a1b      	lsrs	r3, r3, #8
 800544c:	b2db      	uxtb	r3, r3
 800544e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800545a:	4b08      	ldr	r3, [pc, #32]	@ (800547c <WIZCHIP_WRITE+0x98>)
 800545c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545e:	f107 020c 	add.w	r2, r7, #12
 8005462:	2104      	movs	r1, #4
 8005464:	4610      	mov	r0, r2
 8005466:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005468:	4b04      	ldr	r3, [pc, #16]	@ (800547c <WIZCHIP_WRITE+0x98>)
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800546e:	4b03      	ldr	r3, [pc, #12]	@ (800547c <WIZCHIP_WRITE+0x98>)
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	4798      	blx	r3
}
 8005474:	bf00      	nop
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	20000054 	.word	0x20000054

08005480 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005480:	b590      	push	{r4, r7, lr}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	4613      	mov	r3, r2
 800548c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800548e:	4b2b      	ldr	r3, [pc, #172]	@ (800553c <WIZCHIP_READ_BUF+0xbc>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005494:	4b29      	ldr	r3, [pc, #164]	@ (800553c <WIZCHIP_READ_BUF+0xbc>)
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800549a:	4b28      	ldr	r3, [pc, #160]	@ (800553c <WIZCHIP_READ_BUF+0xbc>)
 800549c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <WIZCHIP_READ_BUF+0x2a>
 80054a2:	4b26      	ldr	r3, [pc, #152]	@ (800553c <WIZCHIP_READ_BUF+0xbc>)
 80054a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d126      	bne.n	80054f8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80054aa:	4b24      	ldr	r3, [pc, #144]	@ (800553c <WIZCHIP_READ_BUF+0xbc>)
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	0c12      	lsrs	r2, r2, #16
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	4610      	mov	r0, r2
 80054b6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80054b8:	4b20      	ldr	r3, [pc, #128]	@ (800553c <WIZCHIP_READ_BUF+0xbc>)
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	0a12      	lsrs	r2, r2, #8
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	4610      	mov	r0, r2
 80054c4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80054c6:	4b1d      	ldr	r3, [pc, #116]	@ (800553c <WIZCHIP_READ_BUF+0xbc>)
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	4610      	mov	r0, r2
 80054d0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80054d2:	2300      	movs	r3, #0
 80054d4:	82fb      	strh	r3, [r7, #22]
 80054d6:	e00a      	b.n	80054ee <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80054d8:	4b18      	ldr	r3, [pc, #96]	@ (800553c <WIZCHIP_READ_BUF+0xbc>)
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	8afa      	ldrh	r2, [r7, #22]
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	188c      	adds	r4, r1, r2
 80054e2:	4798      	blx	r3
 80054e4:	4603      	mov	r3, r0
 80054e6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80054e8:	8afb      	ldrh	r3, [r7, #22]
 80054ea:	3301      	adds	r3, #1
 80054ec:	82fb      	strh	r3, [r7, #22]
 80054ee:	8afa      	ldrh	r2, [r7, #22]
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d3f0      	bcc.n	80054d8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80054f6:	e017      	b.n	8005528 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	0c1b      	lsrs	r3, r3, #16
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	b2db      	uxtb	r3, r3
 8005506:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800550e:	4b0b      	ldr	r3, [pc, #44]	@ (800553c <WIZCHIP_READ_BUF+0xbc>)
 8005510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005512:	f107 0210 	add.w	r2, r7, #16
 8005516:	2103      	movs	r1, #3
 8005518:	4610      	mov	r0, r2
 800551a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800551c:	4b07      	ldr	r3, [pc, #28]	@ (800553c <WIZCHIP_READ_BUF+0xbc>)
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	88fa      	ldrh	r2, [r7, #6]
 8005522:	4611      	mov	r1, r2
 8005524:	68b8      	ldr	r0, [r7, #8]
 8005526:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005528:	4b04      	ldr	r3, [pc, #16]	@ (800553c <WIZCHIP_READ_BUF+0xbc>)
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800552e:	4b03      	ldr	r3, [pc, #12]	@ (800553c <WIZCHIP_READ_BUF+0xbc>)
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	4798      	blx	r3
}
 8005534:	bf00      	nop
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	bd90      	pop	{r4, r7, pc}
 800553c:	20000054 	.word	0x20000054

08005540 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	4613      	mov	r3, r2
 800554c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800554e:	4b2b      	ldr	r3, [pc, #172]	@ (80055fc <WIZCHIP_WRITE_BUF+0xbc>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005554:	4b29      	ldr	r3, [pc, #164]	@ (80055fc <WIZCHIP_WRITE_BUF+0xbc>)
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f043 0304 	orr.w	r3, r3, #4
 8005560:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005562:	4b26      	ldr	r3, [pc, #152]	@ (80055fc <WIZCHIP_WRITE_BUF+0xbc>)
 8005564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005566:	2b00      	cmp	r3, #0
 8005568:	d126      	bne.n	80055b8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800556a:	4b24      	ldr	r3, [pc, #144]	@ (80055fc <WIZCHIP_WRITE_BUF+0xbc>)
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	0c12      	lsrs	r2, r2, #16
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	4610      	mov	r0, r2
 8005576:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005578:	4b20      	ldr	r3, [pc, #128]	@ (80055fc <WIZCHIP_WRITE_BUF+0xbc>)
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	0a12      	lsrs	r2, r2, #8
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	4610      	mov	r0, r2
 8005584:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005586:	4b1d      	ldr	r3, [pc, #116]	@ (80055fc <WIZCHIP_WRITE_BUF+0xbc>)
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	4610      	mov	r0, r2
 8005590:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005592:	2300      	movs	r3, #0
 8005594:	82fb      	strh	r3, [r7, #22]
 8005596:	e00a      	b.n	80055ae <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8005598:	4b18      	ldr	r3, [pc, #96]	@ (80055fc <WIZCHIP_WRITE_BUF+0xbc>)
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	8afa      	ldrh	r2, [r7, #22]
 800559e:	68b9      	ldr	r1, [r7, #8]
 80055a0:	440a      	add	r2, r1
 80055a2:	7812      	ldrb	r2, [r2, #0]
 80055a4:	4610      	mov	r0, r2
 80055a6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80055a8:	8afb      	ldrh	r3, [r7, #22]
 80055aa:	3301      	adds	r3, #1
 80055ac:	82fb      	strh	r3, [r7, #22]
 80055ae:	8afa      	ldrh	r2, [r7, #22]
 80055b0:	88fb      	ldrh	r3, [r7, #6]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d3f0      	bcc.n	8005598 <WIZCHIP_WRITE_BUF+0x58>
 80055b6:	e017      	b.n	80055e8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	0c1b      	lsrs	r3, r3, #16
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80055ce:	4b0b      	ldr	r3, [pc, #44]	@ (80055fc <WIZCHIP_WRITE_BUF+0xbc>)
 80055d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d2:	f107 0210 	add.w	r2, r7, #16
 80055d6:	2103      	movs	r1, #3
 80055d8:	4610      	mov	r0, r2
 80055da:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80055dc:	4b07      	ldr	r3, [pc, #28]	@ (80055fc <WIZCHIP_WRITE_BUF+0xbc>)
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	88fa      	ldrh	r2, [r7, #6]
 80055e2:	4611      	mov	r1, r2
 80055e4:	68b8      	ldr	r0, [r7, #8]
 80055e6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80055e8:	4b04      	ldr	r3, [pc, #16]	@ (80055fc <WIZCHIP_WRITE_BUF+0xbc>)
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80055ee:	4b03      	ldr	r3, [pc, #12]	@ (80055fc <WIZCHIP_WRITE_BUF+0xbc>)
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	4798      	blx	r3
}
 80055f4:	bf00      	nop
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20000054 	.word	0x20000054

08005600 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8005600:	b590      	push	{r4, r7, lr}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800560a:	2300      	movs	r3, #0
 800560c:	81fb      	strh	r3, [r7, #14]
 800560e:	2300      	movs	r3, #0
 8005610:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	3301      	adds	r3, #1
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800561e:	4618      	mov	r0, r3
 8005620:	f7ff fe94 	bl	800534c <WIZCHIP_READ>
 8005624:	4603      	mov	r3, r0
 8005626:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8005628:	89bb      	ldrh	r3, [r7, #12]
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	b29c      	uxth	r4, r3
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	3301      	adds	r3, #1
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff fe86 	bl	800534c <WIZCHIP_READ>
 8005640:	4603      	mov	r3, r0
 8005642:	4423      	add	r3, r4
 8005644:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8005646:	89bb      	ldrh	r3, [r7, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d019      	beq.n	8005680 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	3301      	adds	r3, #1
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff fe77 	bl	800534c <WIZCHIP_READ>
 800565e:	4603      	mov	r3, r0
 8005660:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8005662:	89fb      	ldrh	r3, [r7, #14]
 8005664:	021b      	lsls	r3, r3, #8
 8005666:	b29c      	uxth	r4, r3
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	3301      	adds	r3, #1
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff fe69 	bl	800534c <WIZCHIP_READ>
 800567a:	4603      	mov	r3, r0
 800567c:	4423      	add	r3, r4
 800567e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005680:	89fa      	ldrh	r2, [r7, #14]
 8005682:	89bb      	ldrh	r3, [r7, #12]
 8005684:	429a      	cmp	r2, r3
 8005686:	d1c4      	bne.n	8005612 <getSn_TX_FSR+0x12>
   return val;
 8005688:	89fb      	ldrh	r3, [r7, #14]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	bd90      	pop	{r4, r7, pc}

08005692 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8005692:	b590      	push	{r4, r7, lr}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	4603      	mov	r3, r0
 800569a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800569c:	2300      	movs	r3, #0
 800569e:	81fb      	strh	r3, [r7, #14]
 80056a0:	2300      	movs	r3, #0
 80056a2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	3301      	adds	r3, #1
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff fe4b 	bl	800534c <WIZCHIP_READ>
 80056b6:	4603      	mov	r3, r0
 80056b8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80056ba:	89bb      	ldrh	r3, [r7, #12]
 80056bc:	021b      	lsls	r3, r3, #8
 80056be:	b29c      	uxth	r4, r3
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	3301      	adds	r3, #1
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff fe3d 	bl	800534c <WIZCHIP_READ>
 80056d2:	4603      	mov	r3, r0
 80056d4:	4423      	add	r3, r4
 80056d6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80056d8:	89bb      	ldrh	r3, [r7, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d019      	beq.n	8005712 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80056de:	79fb      	ldrb	r3, [r7, #7]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	3301      	adds	r3, #1
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff fe2e 	bl	800534c <WIZCHIP_READ>
 80056f0:	4603      	mov	r3, r0
 80056f2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80056f4:	89fb      	ldrh	r3, [r7, #14]
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	b29c      	uxth	r4, r3
 80056fa:	79fb      	ldrb	r3, [r7, #7]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	3301      	adds	r3, #1
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff fe20 	bl	800534c <WIZCHIP_READ>
 800570c:	4603      	mov	r3, r0
 800570e:	4423      	add	r3, r4
 8005710:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005712:	89fa      	ldrh	r2, [r7, #14]
 8005714:	89bb      	ldrh	r3, [r7, #12]
 8005716:	429a      	cmp	r2, r3
 8005718:	d1c4      	bne.n	80056a4 <getSn_RX_RSR+0x12>
   return val;
 800571a:	89fb      	ldrh	r3, [r7, #14]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	bd90      	pop	{r4, r7, pc}

08005724 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005724:	b590      	push	{r4, r7, lr}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	6039      	str	r1, [r7, #0]
 800572e:	71fb      	strb	r3, [r7, #7]
 8005730:	4613      	mov	r3, r2
 8005732:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800573c:	88bb      	ldrh	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d046      	beq.n	80057d0 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	3301      	adds	r3, #1
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff fdfc 	bl	800534c <WIZCHIP_READ>
 8005754:	4603      	mov	r3, r0
 8005756:	021b      	lsls	r3, r3, #8
 8005758:	b29c      	uxth	r4, r3
 800575a:	79fb      	ldrb	r3, [r7, #7]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	3301      	adds	r3, #1
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fdf0 	bl	800534c <WIZCHIP_READ>
 800576c:	4603      	mov	r3, r0
 800576e:	4423      	add	r3, r4
 8005770:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8005772:	89fb      	ldrh	r3, [r7, #14]
 8005774:	021b      	lsls	r3, r3, #8
 8005776:	79fa      	ldrb	r2, [r7, #7]
 8005778:	0092      	lsls	r2, r2, #2
 800577a:	3202      	adds	r2, #2
 800577c:	00d2      	lsls	r2, r2, #3
 800577e:	4413      	add	r3, r2
 8005780:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8005782:	88bb      	ldrh	r3, [r7, #4]
 8005784:	461a      	mov	r2, r3
 8005786:	6839      	ldr	r1, [r7, #0]
 8005788:	68b8      	ldr	r0, [r7, #8]
 800578a:	f7ff fed9 	bl	8005540 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800578e:	89fa      	ldrh	r2, [r7, #14]
 8005790:	88bb      	ldrh	r3, [r7, #4]
 8005792:	4413      	add	r3, r2
 8005794:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8005796:	79fb      	ldrb	r3, [r7, #7]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	3301      	adds	r3, #1
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80057a2:	461a      	mov	r2, r3
 80057a4:	89fb      	ldrh	r3, [r7, #14]
 80057a6:	0a1b      	lsrs	r3, r3, #8
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f7ff fe18 	bl	80053e4 <WIZCHIP_WRITE>
 80057b4:	79fb      	ldrb	r3, [r7, #7]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	3301      	adds	r3, #1
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80057c0:	461a      	mov	r2, r3
 80057c2:	89fb      	ldrh	r3, [r7, #14]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	4619      	mov	r1, r3
 80057c8:	4610      	mov	r0, r2
 80057ca:	f7ff fe0b 	bl	80053e4 <WIZCHIP_WRITE>
 80057ce:	e000      	b.n	80057d2 <wiz_send_data+0xae>
   if(len == 0)  return;
 80057d0:	bf00      	nop
}
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd90      	pop	{r4, r7, pc}

080057d8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80057d8:	b590      	push	{r4, r7, lr}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	4603      	mov	r3, r0
 80057e0:	6039      	str	r1, [r7, #0]
 80057e2:	71fb      	strb	r3, [r7, #7]
 80057e4:	4613      	mov	r3, r2
 80057e6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80057f0:	88bb      	ldrh	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d046      	beq.n	8005884 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 80057f6:	79fb      	ldrb	r3, [r7, #7]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	3301      	adds	r3, #1
 80057fc:	00db      	lsls	r3, r3, #3
 80057fe:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff fda2 	bl	800534c <WIZCHIP_READ>
 8005808:	4603      	mov	r3, r0
 800580a:	021b      	lsls	r3, r3, #8
 800580c:	b29c      	uxth	r4, r3
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	3301      	adds	r3, #1
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff fd96 	bl	800534c <WIZCHIP_READ>
 8005820:	4603      	mov	r3, r0
 8005822:	4423      	add	r3, r4
 8005824:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8005826:	89fb      	ldrh	r3, [r7, #14]
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	79fa      	ldrb	r2, [r7, #7]
 800582c:	0092      	lsls	r2, r2, #2
 800582e:	3203      	adds	r2, #3
 8005830:	00d2      	lsls	r2, r2, #3
 8005832:	4413      	add	r3, r2
 8005834:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8005836:	88bb      	ldrh	r3, [r7, #4]
 8005838:	461a      	mov	r2, r3
 800583a:	6839      	ldr	r1, [r7, #0]
 800583c:	68b8      	ldr	r0, [r7, #8]
 800583e:	f7ff fe1f 	bl	8005480 <WIZCHIP_READ_BUF>
   ptr += len;
 8005842:	89fa      	ldrh	r2, [r7, #14]
 8005844:	88bb      	ldrh	r3, [r7, #4]
 8005846:	4413      	add	r3, r2
 8005848:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	3301      	adds	r3, #1
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005856:	461a      	mov	r2, r3
 8005858:	89fb      	ldrh	r3, [r7, #14]
 800585a:	0a1b      	lsrs	r3, r3, #8
 800585c:	b29b      	uxth	r3, r3
 800585e:	b2db      	uxtb	r3, r3
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f7ff fdbe 	bl	80053e4 <WIZCHIP_WRITE>
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	3301      	adds	r3, #1
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005874:	461a      	mov	r2, r3
 8005876:	89fb      	ldrh	r3, [r7, #14]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	4619      	mov	r1, r3
 800587c:	4610      	mov	r0, r2
 800587e:	f7ff fdb1 	bl	80053e4 <WIZCHIP_WRITE>
 8005882:	e000      	b.n	8005886 <wiz_recv_data+0xae>
   if(len == 0) return;
 8005884:	bf00      	nop
}
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	bd90      	pop	{r4, r7, pc}

0800588c <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800588c:	b590      	push	{r4, r7, lr}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	4603      	mov	r3, r0
 8005894:	460a      	mov	r2, r1
 8005896:	71fb      	strb	r3, [r7, #7]
 8005898:	4613      	mov	r3, r2
 800589a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	3301      	adds	r3, #1
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff fd4d 	bl	800534c <WIZCHIP_READ>
 80058b2:	4603      	mov	r3, r0
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	b29c      	uxth	r4, r3
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	3301      	adds	r3, #1
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff fd41 	bl	800534c <WIZCHIP_READ>
 80058ca:	4603      	mov	r3, r0
 80058cc:	4423      	add	r3, r4
 80058ce:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80058d0:	89fa      	ldrh	r2, [r7, #14]
 80058d2:	88bb      	ldrh	r3, [r7, #4]
 80058d4:	4413      	add	r3, r2
 80058d6:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80058d8:	79fb      	ldrb	r3, [r7, #7]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	3301      	adds	r3, #1
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80058e4:	461a      	mov	r2, r3
 80058e6:	89fb      	ldrh	r3, [r7, #14]
 80058e8:	0a1b      	lsrs	r3, r3, #8
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	4619      	mov	r1, r3
 80058f0:	4610      	mov	r0, r2
 80058f2:	f7ff fd77 	bl	80053e4 <WIZCHIP_WRITE>
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	3301      	adds	r3, #1
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005902:	461a      	mov	r2, r3
 8005904:	89fb      	ldrh	r3, [r7, #14]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	4619      	mov	r1, r3
 800590a:	4610      	mov	r0, r2
 800590c:	f7ff fd6a 	bl	80053e4 <WIZCHIP_WRITE>
}
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	bd90      	pop	{r4, r7, pc}

08005918 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
 800591c:	bf00      	nop
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005926:	b480      	push	{r7}
 8005928:	af00      	add	r7, sp, #0
 800592a:	bf00      	nop
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
 8005938:	bf00      	nop
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005942:	b480      	push	{r7}
 8005944:	af00      	add	r7, sp, #0
 8005946:	bf00      	nop
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	460b      	mov	r3, r1
 8005974:	70fb      	strb	r3, [r7, #3]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	78fa      	ldrb	r2, [r7, #3]
 800597a:	701a      	strb	r2, [r3, #0]
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
 800598c:	2300      	movs	r3, #0
 800598e:	4618      	mov	r0, r3
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	71fb      	strb	r3, [r7, #7]
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	460b      	mov	r3, r1
 80059b8:	807b      	strh	r3, [r7, #2]
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	460b      	mov	r3, r1
 80059d0:	807b      	strh	r3, [r7, #2]
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
	...

080059e0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <reg_wizchip_cs_cbfunc+0x16>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80059f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005a20 <reg_wizchip_cs_cbfunc+0x40>)
 80059f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005a24 <reg_wizchip_cs_cbfunc+0x44>)
 80059fa:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80059fc:	4b08      	ldr	r3, [pc, #32]	@ (8005a20 <reg_wizchip_cs_cbfunc+0x40>)
 80059fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005a28 <reg_wizchip_cs_cbfunc+0x48>)
 8005a00:	619a      	str	r2, [r3, #24]
 8005a02:	e006      	b.n	8005a12 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005a04:	4a06      	ldr	r2, [pc, #24]	@ (8005a20 <reg_wizchip_cs_cbfunc+0x40>)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005a0a:	4a05      	ldr	r2, [pc, #20]	@ (8005a20 <reg_wizchip_cs_cbfunc+0x40>)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	6193      	str	r3, [r2, #24]
   }
}
 8005a10:	bf00      	nop
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	20000054 	.word	0x20000054
 8005a24:	08005935 	.word	0x08005935
 8005a28:	08005943 	.word	0x08005943

08005a2c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005a36:	bf00      	nop
 8005a38:	4b0f      	ldr	r3, [pc, #60]	@ (8005a78 <reg_wizchip_spi_cbfunc+0x4c>)
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0f9      	beq.n	8005a38 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <reg_wizchip_spi_cbfunc+0x24>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005a50:	4b09      	ldr	r3, [pc, #36]	@ (8005a78 <reg_wizchip_spi_cbfunc+0x4c>)
 8005a52:	4a0a      	ldr	r2, [pc, #40]	@ (8005a7c <reg_wizchip_spi_cbfunc+0x50>)
 8005a54:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005a56:	4b08      	ldr	r3, [pc, #32]	@ (8005a78 <reg_wizchip_spi_cbfunc+0x4c>)
 8005a58:	4a09      	ldr	r2, [pc, #36]	@ (8005a80 <reg_wizchip_spi_cbfunc+0x54>)
 8005a5a:	621a      	str	r2, [r3, #32]
 8005a5c:	e006      	b.n	8005a6c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005a5e:	4a06      	ldr	r2, [pc, #24]	@ (8005a78 <reg_wizchip_spi_cbfunc+0x4c>)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005a64:	4a04      	ldr	r2, [pc, #16]	@ (8005a78 <reg_wizchip_spi_cbfunc+0x4c>)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6213      	str	r3, [r2, #32]
   }
}
 8005a6a:	bf00      	nop
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	20000054 	.word	0x20000054
 8005a7c:	08005989 	.word	0x08005989
 8005a80:	08005999 	.word	0x08005999

08005a84 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005a8e:	bf00      	nop
 8005a90:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f9      	beq.n	8005a90 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <reg_wizchip_spiburst_cbfunc+0x24>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d106      	bne.n	8005ab6 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8005aa8:	4b09      	ldr	r3, [pc, #36]	@ (8005ad0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8005ad4 <reg_wizchip_spiburst_cbfunc+0x50>)
 8005aac:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8005aae:	4b08      	ldr	r3, [pc, #32]	@ (8005ad0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005ab0:	4a09      	ldr	r2, [pc, #36]	@ (8005ad8 <reg_wizchip_spiburst_cbfunc+0x54>)
 8005ab2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ab4:	e006      	b.n	8005ac4 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8005ab6:	4a06      	ldr	r2, [pc, #24]	@ (8005ad0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8005abc:	4a04      	ldr	r2, [pc, #16]	@ (8005ad0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8005ac2:	bf00      	nop
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	20000054 	.word	0x20000054
 8005ad4:	080059af 	.word	0x080059af
 8005ad8:	080059c7 	.word	0x080059c7

08005adc <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8005adc:	b590      	push	{r4, r7, lr}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	6039      	str	r1, [r7, #0]
 8005ae6:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	2300      	movs	r3, #0
 8005af2:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	2b0f      	cmp	r3, #15
 8005af8:	f200 80c5 	bhi.w	8005c86 <ctlwizchip+0x1aa>
 8005afc:	a201      	add	r2, pc, #4	@ (adr r2, 8005b04 <ctlwizchip+0x28>)
 8005afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b02:	bf00      	nop
 8005b04:	08005b45 	.word	0x08005b45
 8005b08:	08005b4b 	.word	0x08005b4b
 8005b0c:	08005b77 	.word	0x08005b77
 8005b10:	08005b6b 	.word	0x08005b6b
 8005b14:	08005b85 	.word	0x08005b85
 8005b18:	08005b91 	.word	0x08005b91
 8005b1c:	08005b9f 	.word	0x08005b9f
 8005b20:	08005bc5 	.word	0x08005bc5
 8005b24:	08005be7 	.word	0x08005be7
 8005b28:	08005c2b 	.word	0x08005c2b
 8005b2c:	08005c31 	.word	0x08005c31
 8005b30:	08005c39 	.word	0x08005c39
 8005b34:	08005c8d 	.word	0x08005c8d
 8005b38:	08005c41 	.word	0x08005c41
 8005b3c:	08005c4f 	.word	0x08005c4f
 8005b40:	08005c6b 	.word	0x08005c6b
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005b44:	f000 f8aa 	bl	8005c9c <wizchip_sw_reset>
         break;
 8005b48:	e0a1      	b.n	8005c8e <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d004      	beq.n	8005b5a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3308      	adds	r3, #8
 8005b58:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4611      	mov	r1, r2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 f8e7 	bl	8005d34 <wizchip_init>
 8005b66:	4603      	mov	r3, r0
 8005b68:	e092      	b.n	8005c90 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f96c 	bl	8005e4c <wizchip_clrinterrupt>
         break;
 8005b74:	e08b      	b.n	8005c8e <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8005b76:	f000 f99d 	bl	8005eb4 <wizchip_getinterrupt>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	801a      	strh	r2, [r3, #0]
         break;
 8005b82:	e084      	b.n	8005c8e <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 f9b8 	bl	8005efe <wizchip_setinterruptmask>
         break;         
 8005b8e:	e07e      	b.n	8005c8e <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8005b90:	f000 f9d0 	bl	8005f34 <wizchip_getinterruptmask>
 8005b94:	4603      	mov	r3, r0
 8005b96:	461a      	mov	r2, r3
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	801a      	strh	r2, [r3, #0]
         break;
 8005b9c:	e077      	b.n	8005c8e <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	0a1b      	lsrs	r3, r3, #8
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	4619      	mov	r1, r3
 8005baa:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005bae:	f7ff fc19 	bl	80053e4 <WIZCHIP_WRITE>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	4619      	mov	r1, r3
 8005bba:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005bbe:	f7ff fc11 	bl	80053e4 <WIZCHIP_WRITE>
         break;
 8005bc2:	e064      	b.n	8005c8e <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8005bc4:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005bc8:	f7ff fbc0 	bl	800534c <WIZCHIP_READ>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	b29c      	uxth	r4, r3
 8005bd2:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005bd6:	f7ff fbb9 	bl	800534c <WIZCHIP_READ>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	4423      	add	r3, r4
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	801a      	strh	r2, [r3, #0]
         break;
 8005be4:	e053      	b.n	8005c8e <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8005be6:	4b2c      	ldr	r3, [pc, #176]	@ (8005c98 <ctlwizchip+0x1bc>)
 8005be8:	789a      	ldrb	r2, [r3, #2]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	4a29      	ldr	r2, [pc, #164]	@ (8005c98 <ctlwizchip+0x1bc>)
 8005bf4:	78d2      	ldrb	r2, [r2, #3]
 8005bf6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	3302      	adds	r3, #2
 8005bfc:	4a26      	ldr	r2, [pc, #152]	@ (8005c98 <ctlwizchip+0x1bc>)
 8005bfe:	7912      	ldrb	r2, [r2, #4]
 8005c00:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	3303      	adds	r3, #3
 8005c06:	4a24      	ldr	r2, [pc, #144]	@ (8005c98 <ctlwizchip+0x1bc>)
 8005c08:	7952      	ldrb	r2, [r2, #5]
 8005c0a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	4a21      	ldr	r2, [pc, #132]	@ (8005c98 <ctlwizchip+0x1bc>)
 8005c12:	7992      	ldrb	r2, [r2, #6]
 8005c14:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	3305      	adds	r3, #5
 8005c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8005c98 <ctlwizchip+0x1bc>)
 8005c1c:	79d2      	ldrb	r2, [r2, #7]
 8005c1e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	3306      	adds	r3, #6
 8005c24:	2200      	movs	r2, #0
 8005c26:	701a      	strb	r2, [r3, #0]
         break;
 8005c28:	e031      	b.n	8005c8e <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8005c2a:	f000 f9d5 	bl	8005fd8 <wizphy_reset>
         break;
 8005c2e:	e02e      	b.n	8005c8e <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8005c30:	6838      	ldr	r0, [r7, #0]
 8005c32:	f000 f9f8 	bl	8006026 <wizphy_setphyconf>
         break;
 8005c36:	e02a      	b.n	8005c8e <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8005c38:	6838      	ldr	r0, [r7, #0]
 8005c3a:	f000 fa37 	bl	80060ac <wizphy_getphyconf>
         break;
 8005c3e:	e026      	b.n	8005c8e <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fa9b 	bl	8006180 <wizphy_setphypmode>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	e020      	b.n	8005c90 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8005c4e:	f000 f9aa 	bl	8005fa6 <wizphy_getphypmode>
 8005c52:	4603      	mov	r3, r0
 8005c54:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
 8005c58:	2bff      	cmp	r3, #255	@ 0xff
 8005c5a:	d102      	bne.n	8005c62 <ctlwizchip+0x186>
 8005c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c60:	e016      	b.n	8005c90 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	7dfa      	ldrb	r2, [r7, #23]
 8005c66:	701a      	strb	r2, [r3, #0]
         break;
 8005c68:	e011      	b.n	8005c8e <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8005c6a:	f000 f986 	bl	8005f7a <wizphy_getphylink>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
 8005c74:	2bff      	cmp	r3, #255	@ 0xff
 8005c76:	d102      	bne.n	8005c7e <ctlwizchip+0x1a2>
 8005c78:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7c:	e008      	b.n	8005c90 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	7dfa      	ldrb	r2, [r7, #23]
 8005c82:	701a      	strb	r2, [r3, #0]
         break;
 8005c84:	e003      	b.n	8005c8e <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8005c86:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8a:	e001      	b.n	8005c90 <ctlwizchip+0x1b4>
         break;
 8005c8c:	bf00      	nop
   }
   return 0;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd90      	pop	{r4, r7, pc}
 8005c98:	20000054 	.word	0x20000054

08005c9c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005ca2:	1d3b      	adds	r3, r7, #4
 8005ca4:	2206      	movs	r2, #6
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005cac:	f7ff fbe8 	bl	8005480 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005cb0:	f107 0314 	add.w	r3, r7, #20
 8005cb4:	2204      	movs	r2, #4
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005cbc:	f7ff fbe0 	bl	8005480 <WIZCHIP_READ_BUF>
 8005cc0:	f107 0310 	add.w	r3, r7, #16
 8005cc4:	2204      	movs	r2, #4
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005ccc:	f7ff fbd8 	bl	8005480 <WIZCHIP_READ_BUF>
 8005cd0:	f107 030c 	add.w	r3, r7, #12
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005cdc:	f7ff fbd0 	bl	8005480 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005ce0:	2180      	movs	r1, #128	@ 0x80
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	f7ff fb7e 	bl	80053e4 <WIZCHIP_WRITE>
   getMR(); // for delay
 8005ce8:	2000      	movs	r0, #0
 8005cea:	f7ff fb2f 	bl	800534c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005cee:	1d3b      	adds	r3, r7, #4
 8005cf0:	2206      	movs	r2, #6
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005cf8:	f7ff fc22 	bl	8005540 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8005cfc:	f107 0314 	add.w	r3, r7, #20
 8005d00:	2204      	movs	r2, #4
 8005d02:	4619      	mov	r1, r3
 8005d04:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005d08:	f7ff fc1a 	bl	8005540 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8005d0c:	f107 0310 	add.w	r3, r7, #16
 8005d10:	2204      	movs	r2, #4
 8005d12:	4619      	mov	r1, r3
 8005d14:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005d18:	f7ff fc12 	bl	8005540 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005d1c:	f107 030c 	add.w	r3, r7, #12
 8005d20:	2204      	movs	r2, #4
 8005d22:	4619      	mov	r1, r3
 8005d24:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005d28:	f7ff fc0a 	bl	8005540 <WIZCHIP_WRITE_BUF>
}
 8005d2c:	bf00      	nop
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005d42:	f7ff ffab 	bl	8005c9c <wizchip_sw_reset>
   if(txsize)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d03b      	beq.n	8005dc4 <wizchip_init+0x90>
   {
      tmp = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005d50:	2300      	movs	r3, #0
 8005d52:	73fb      	strb	r3, [r7, #15]
 8005d54:	e015      	b.n	8005d82 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8005d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	781a      	ldrb	r2, [r3, #0]
 8005d60:	7bbb      	ldrb	r3, [r7, #14]
 8005d62:	4413      	add	r3, r2
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8005d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d6c:	2b10      	cmp	r3, #16
 8005d6e:	dd02      	ble.n	8005d76 <wizchip_init+0x42>
 8005d70:	f04f 33ff 	mov.w	r3, #4294967295
 8005d74:	e066      	b.n	8005e44 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	73fb      	strb	r3, [r7, #15]
 8005d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d86:	2b07      	cmp	r3, #7
 8005d88:	dde5      	ble.n	8005d56 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]
 8005d8e:	e015      	b.n	8005dbc <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8005d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	3301      	adds	r3, #1
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	4413      	add	r3, r2
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	4619      	mov	r1, r3
 8005dac:	f7ff fb1a 	bl	80053e4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	3301      	adds	r3, #1
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	73fb      	strb	r3, [r7, #15]
 8005dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dc0:	2b07      	cmp	r3, #7
 8005dc2:	dde5      	ble.n	8005d90 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d03b      	beq.n	8005e42 <wizchip_init+0x10e>
   {
      tmp = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]
 8005dd2:	e015      	b.n	8005e00 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8005dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	4413      	add	r3, r2
 8005ddc:	781a      	ldrb	r2, [r3, #0]
 8005dde:	7bbb      	ldrb	r3, [r7, #14]
 8005de0:	4413      	add	r3, r2
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8005de6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dea:	2b10      	cmp	r3, #16
 8005dec:	dd02      	ble.n	8005df4 <wizchip_init+0xc0>
 8005dee:	f04f 33ff 	mov.w	r3, #4294967295
 8005df2:	e027      	b.n	8005e44 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	73fb      	strb	r3, [r7, #15]
 8005e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e04:	2b07      	cmp	r3, #7
 8005e06:	dde5      	ble.n	8005dd4 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	73fb      	strb	r3, [r7, #15]
 8005e0c:	e015      	b.n	8005e3a <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8005e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	3301      	adds	r3, #1
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	4413      	add	r3, r2
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	4619      	mov	r1, r3
 8005e2a:	f7ff fadb 	bl	80053e4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	3301      	adds	r3, #1
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	73fb      	strb	r3, [r7, #15]
 8005e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e3e:	2b07      	cmp	r3, #7
 8005e40:	dde5      	ble.n	8005e0e <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8005e56:	88fb      	ldrh	r3, [r7, #6]
 8005e58:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8005e5a:	88fb      	ldrh	r3, [r7, #6]
 8005e5c:	0a1b      	lsrs	r3, r3, #8
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	f023 030f 	bic.w	r3, r3, #15
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8005e70:	f7ff fab8 	bl	80053e4 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8005e74:	2300      	movs	r3, #0
 8005e76:	73fb      	strb	r3, [r7, #15]
 8005e78:	e014      	b.n	8005ea4 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8005e7a:	7bba      	ldrb	r2, [r7, #14]
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	fa42 f303 	asr.w	r3, r2, r3
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d009      	beq.n	8005e9e <wizchip_clrinterrupt+0x52>
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	3301      	adds	r3, #1
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005e96:	211f      	movs	r1, #31
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff faa3 	bl	80053e4 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
 8005ea6:	2b07      	cmp	r3, #7
 8005ea8:	d9e7      	bls.n	8005e7a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8005eaa:	bf00      	nop
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8005ec6:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8005eca:	f7ff fa3f 	bl	800534c <WIZCHIP_READ>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	f023 030f 	bic.w	r3, r3, #15
 8005ed4:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8005ed6:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8005eda:	f7ff fa37 	bl	800534c <WIZCHIP_READ>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8005ee2:	79bb      	ldrb	r3, [r7, #6]
 8005ee4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8005ee6:	88bb      	ldrh	r3, [r7, #4]
 8005ee8:	021b      	lsls	r3, r3, #8
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	4413      	add	r3, r2
 8005ef2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8005ef4:	88bb      	ldrh	r3, [r7, #4]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	4603      	mov	r3, r0
 8005f06:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8005f08:	88fb      	ldrh	r3, [r7, #6]
 8005f0a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8005f0c:	88fb      	ldrh	r3, [r7, #6]
 8005f0e:	0a1b      	lsrs	r3, r3, #8
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
 8005f16:	4619      	mov	r1, r3
 8005f18:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8005f1c:	f7ff fa62 	bl	80053e4 <WIZCHIP_WRITE>
   setSIMR(simr);
 8005f20:	7bbb      	ldrb	r3, [r7, #14]
 8005f22:	4619      	mov	r1, r3
 8005f24:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8005f28:	f7ff fa5c 	bl	80053e4 <WIZCHIP_WRITE>
#endif   
}
 8005f2c:	bf00      	nop
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8005f42:	2300      	movs	r3, #0
 8005f44:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8005f46:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8005f4a:	f7ff f9ff 	bl	800534c <WIZCHIP_READ>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8005f52:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8005f56:	f7ff f9f9 	bl	800534c <WIZCHIP_READ>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8005f5e:	79bb      	ldrb	r3, [r7, #6]
 8005f60:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8005f62:	88bb      	ldrh	r3, [r7, #4]
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8005f70:	88bb      	ldrh	r3, [r7, #4]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8005f80:	2300      	movs	r3, #0
 8005f82:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8005f84:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005f88:	f7ff f9e0 	bl	800534c <WIZCHIP_READ>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8005f96:	2301      	movs	r3, #1
 8005f98:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8005f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b082      	sub	sp, #8
 8005faa:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8005fb0:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005fb4:	f7ff f9ca 	bl	800534c <WIZCHIP_READ>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fbe:	2b30      	cmp	r3, #48	@ 0x30
 8005fc0:	d102      	bne.n	8005fc8 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	71fb      	strb	r3, [r7, #7]
 8005fc6:	e001      	b.n	8005fcc <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8005fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8005fde:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005fe2:	f7ff f9b3 	bl	800534c <WIZCHIP_READ>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ff0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005ffa:	f7ff f9f3 	bl	80053e4 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8005ffe:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006002:	f7ff f9a3 	bl	800534c <WIZCHIP_READ>
 8006006:	4603      	mov	r3, r0
 8006008:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800600a:	79fb      	ldrb	r3, [r7, #7]
 800600c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006010:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	4619      	mov	r1, r3
 8006016:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800601a:	f7ff f9e3 	bl	80053e4 <WIZCHIP_WRITE>
}
 800601e:	bf00      	nop
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d104      	bne.n	8006044 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800603a:	7bfb      	ldrb	r3, [r7, #15]
 800603c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006040:	73fb      	strb	r3, [r7, #15]
 8006042:	e003      	b.n	800604c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800604a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d104      	bne.n	800605e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800605a:	73fb      	strb	r3, [r7, #15]
 800605c:	e019      	b.n	8006092 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	78db      	ldrb	r3, [r3, #3]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d10d      	bne.n	8006082 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	789b      	ldrb	r3, [r3, #2]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d104      	bne.n	8006078 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	f043 0318 	orr.w	r3, r3, #24
 8006074:	73fb      	strb	r3, [r7, #15]
 8006076:	e00c      	b.n	8006092 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	f043 0308 	orr.w	r3, r3, #8
 800607e:	73fb      	strb	r3, [r7, #15]
 8006080:	e007      	b.n	8006092 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	789b      	ldrb	r3, [r3, #2]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d103      	bne.n	8006092 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	f043 0310 	orr.w	r3, r3, #16
 8006090:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8006092:	7bfb      	ldrb	r3, [r7, #15]
 8006094:	4619      	mov	r1, r3
 8006096:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800609a:	f7ff f9a3 	bl	80053e4 <WIZCHIP_WRITE>
   wizphy_reset();
 800609e:	f7ff ff9b 	bl	8005fd8 <wizphy_reset>
}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80060b8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80060bc:	f7ff f946 	bl	800534c <WIZCHIP_READ>
 80060c0:	4603      	mov	r3, r0
 80060c2:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	119b      	asrs	r3, r3, #6
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
 80060d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d001      	beq.n	80060e2 <wizphy_getphyconf+0x36>
 80060de:	2b38      	cmp	r3, #56	@ 0x38
 80060e0:	d103      	bne.n	80060ea <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	705a      	strb	r2, [r3, #1]
         break;
 80060e8:	e003      	b.n	80060f2 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	705a      	strb	r2, [r3, #1]
         break;
 80060f0:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
 80060f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060f8:	3b10      	subs	r3, #16
 80060fa:	2b10      	cmp	r3, #16
 80060fc:	bf8c      	ite	hi
 80060fe:	2201      	movhi	r2, #1
 8006100:	2200      	movls	r2, #0
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	2a00      	cmp	r2, #0
 8006106:	d10f      	bne.n	8006128 <wizphy_getphyconf+0x7c>
 8006108:	4a1b      	ldr	r2, [pc, #108]	@ (8006178 <wizphy_getphyconf+0xcc>)
 800610a:	fa22 f303 	lsr.w	r3, r2, r3
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	bf14      	ite	ne
 8006116:	2301      	movne	r3, #1
 8006118:	2300      	moveq	r3, #0
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	709a      	strb	r2, [r3, #2]
         break;
 8006126:	e003      	b.n	8006130 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	709a      	strb	r2, [r3, #2]
         break;
 800612e:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006136:	3b08      	subs	r3, #8
 8006138:	2b18      	cmp	r3, #24
 800613a:	bf8c      	ite	hi
 800613c:	2201      	movhi	r2, #1
 800613e:	2200      	movls	r2, #0
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	2a00      	cmp	r2, #0
 8006144:	d10f      	bne.n	8006166 <wizphy_getphyconf+0xba>
 8006146:	4a0d      	ldr	r2, [pc, #52]	@ (800617c <wizphy_getphyconf+0xd0>)
 8006148:	fa22 f303 	lsr.w	r3, r2, r3
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	bf14      	ite	ne
 8006154:	2301      	movne	r3, #1
 8006156:	2300      	moveq	r3, #0
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	70da      	strb	r2, [r3, #3]
         break;
 8006164:	e003      	b.n	800616e <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	70da      	strb	r2, [r3, #3]
         break;
 800616c:	bf00      	nop
   }
}
 800616e:	bf00      	nop
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	00010101 	.word	0x00010101
 800617c:	01010001 	.word	0x01010001

08006180 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800618e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006192:	f7ff f8db 	bl	800534c <WIZCHIP_READ>
 8006196:	4603      	mov	r3, r0
 8006198:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <wizphy_setphypmode+0x2a>
 80061a4:	f04f 33ff 	mov.w	r3, #4294967295
 80061a8:	e030      	b.n	800620c <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80061b0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d104      	bne.n	80061c2 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
 80061ba:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80061be:	73fb      	strb	r3, [r7, #15]
 80061c0:	e003      	b.n	80061ca <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80061c8:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	4619      	mov	r1, r3
 80061ce:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80061d2:	f7ff f907 	bl	80053e4 <WIZCHIP_WRITE>
   wizphy_reset();
 80061d6:	f7ff feff 	bl	8005fd8 <wizphy_reset>
   tmp = getPHYCFGR();
 80061da:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80061de:	f7ff f8b5 	bl	800534c <WIZCHIP_READ>
 80061e2:	4603      	mov	r3, r0
 80061e4:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80061e6:	79fb      	ldrb	r3, [r7, #7]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d106      	bne.n	80061fa <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d008      	beq.n	8006208 <wizphy_setphypmode+0x88>
 80061f6:	2300      	movs	r3, #0
 80061f8:	e008      	b.n	800620c <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <wizphy_setphypmode+0x88>
 8006204:	2300      	movs	r3, #0
 8006206:	e001      	b.n	800620c <wizphy_setphypmode+0x8c>
   }
   return -1;
 8006208:	f04f 33ff 	mov.w	r3, #4294967295
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2206      	movs	r2, #6
 8006220:	4619      	mov	r1, r3
 8006222:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8006226:	f7ff f98b 	bl	8005540 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	330e      	adds	r3, #14
 800622e:	2204      	movs	r2, #4
 8006230:	4619      	mov	r1, r3
 8006232:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006236:	f7ff f983 	bl	8005540 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	330a      	adds	r3, #10
 800623e:	2204      	movs	r2, #4
 8006240:	4619      	mov	r1, r3
 8006242:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8006246:	f7ff f97b 	bl	8005540 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3306      	adds	r3, #6
 800624e:	2204      	movs	r2, #4
 8006250:	4619      	mov	r1, r3
 8006252:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8006256:	f7ff f973 	bl	8005540 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	7c9a      	ldrb	r2, [r3, #18]
 800625e:	4b0b      	ldr	r3, [pc, #44]	@ (800628c <wizchip_setnetinfo+0x78>)
 8006260:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	7cda      	ldrb	r2, [r3, #19]
 8006266:	4b09      	ldr	r3, [pc, #36]	@ (800628c <wizchip_setnetinfo+0x78>)
 8006268:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	7d1a      	ldrb	r2, [r3, #20]
 800626e:	4b07      	ldr	r3, [pc, #28]	@ (800628c <wizchip_setnetinfo+0x78>)
 8006270:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	7d5a      	ldrb	r2, [r3, #21]
 8006276:	4b05      	ldr	r3, [pc, #20]	@ (800628c <wizchip_setnetinfo+0x78>)
 8006278:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	7d9a      	ldrb	r2, [r3, #22]
 800627e:	4b04      	ldr	r3, [pc, #16]	@ (8006290 <wizchip_setnetinfo+0x7c>)
 8006280:	701a      	strb	r2, [r3, #0]
}
 8006282:	bf00      	nop
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20001400 	.word	0x20001400
 8006290:	20001404 	.word	0x20001404

08006294 <malloc>:
 8006294:	4b02      	ldr	r3, [pc, #8]	@ (80062a0 <malloc+0xc>)
 8006296:	4601      	mov	r1, r0
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	f000 b825 	b.w	80062e8 <_malloc_r>
 800629e:	bf00      	nop
 80062a0:	2000008c 	.word	0x2000008c

080062a4 <sbrk_aligned>:
 80062a4:	b570      	push	{r4, r5, r6, lr}
 80062a6:	4e0f      	ldr	r6, [pc, #60]	@ (80062e4 <sbrk_aligned+0x40>)
 80062a8:	460c      	mov	r4, r1
 80062aa:	6831      	ldr	r1, [r6, #0]
 80062ac:	4605      	mov	r5, r0
 80062ae:	b911      	cbnz	r1, 80062b6 <sbrk_aligned+0x12>
 80062b0:	f000 fba0 	bl	80069f4 <_sbrk_r>
 80062b4:	6030      	str	r0, [r6, #0]
 80062b6:	4621      	mov	r1, r4
 80062b8:	4628      	mov	r0, r5
 80062ba:	f000 fb9b 	bl	80069f4 <_sbrk_r>
 80062be:	1c43      	adds	r3, r0, #1
 80062c0:	d103      	bne.n	80062ca <sbrk_aligned+0x26>
 80062c2:	f04f 34ff 	mov.w	r4, #4294967295
 80062c6:	4620      	mov	r0, r4
 80062c8:	bd70      	pop	{r4, r5, r6, pc}
 80062ca:	1cc4      	adds	r4, r0, #3
 80062cc:	f024 0403 	bic.w	r4, r4, #3
 80062d0:	42a0      	cmp	r0, r4
 80062d2:	d0f8      	beq.n	80062c6 <sbrk_aligned+0x22>
 80062d4:	1a21      	subs	r1, r4, r0
 80062d6:	4628      	mov	r0, r5
 80062d8:	f000 fb8c 	bl	80069f4 <_sbrk_r>
 80062dc:	3001      	adds	r0, #1
 80062de:	d1f2      	bne.n	80062c6 <sbrk_aligned+0x22>
 80062e0:	e7ef      	b.n	80062c2 <sbrk_aligned+0x1e>
 80062e2:	bf00      	nop
 80062e4:	20001408 	.word	0x20001408

080062e8 <_malloc_r>:
 80062e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062ec:	1ccd      	adds	r5, r1, #3
 80062ee:	f025 0503 	bic.w	r5, r5, #3
 80062f2:	3508      	adds	r5, #8
 80062f4:	2d0c      	cmp	r5, #12
 80062f6:	bf38      	it	cc
 80062f8:	250c      	movcc	r5, #12
 80062fa:	2d00      	cmp	r5, #0
 80062fc:	4606      	mov	r6, r0
 80062fe:	db01      	blt.n	8006304 <_malloc_r+0x1c>
 8006300:	42a9      	cmp	r1, r5
 8006302:	d904      	bls.n	800630e <_malloc_r+0x26>
 8006304:	230c      	movs	r3, #12
 8006306:	6033      	str	r3, [r6, #0]
 8006308:	2000      	movs	r0, #0
 800630a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800630e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063e4 <_malloc_r+0xfc>
 8006312:	f000 f869 	bl	80063e8 <__malloc_lock>
 8006316:	f8d8 3000 	ldr.w	r3, [r8]
 800631a:	461c      	mov	r4, r3
 800631c:	bb44      	cbnz	r4, 8006370 <_malloc_r+0x88>
 800631e:	4629      	mov	r1, r5
 8006320:	4630      	mov	r0, r6
 8006322:	f7ff ffbf 	bl	80062a4 <sbrk_aligned>
 8006326:	1c43      	adds	r3, r0, #1
 8006328:	4604      	mov	r4, r0
 800632a:	d158      	bne.n	80063de <_malloc_r+0xf6>
 800632c:	f8d8 4000 	ldr.w	r4, [r8]
 8006330:	4627      	mov	r7, r4
 8006332:	2f00      	cmp	r7, #0
 8006334:	d143      	bne.n	80063be <_malloc_r+0xd6>
 8006336:	2c00      	cmp	r4, #0
 8006338:	d04b      	beq.n	80063d2 <_malloc_r+0xea>
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	4639      	mov	r1, r7
 800633e:	4630      	mov	r0, r6
 8006340:	eb04 0903 	add.w	r9, r4, r3
 8006344:	f000 fb56 	bl	80069f4 <_sbrk_r>
 8006348:	4581      	cmp	r9, r0
 800634a:	d142      	bne.n	80063d2 <_malloc_r+0xea>
 800634c:	6821      	ldr	r1, [r4, #0]
 800634e:	1a6d      	subs	r5, r5, r1
 8006350:	4629      	mov	r1, r5
 8006352:	4630      	mov	r0, r6
 8006354:	f7ff ffa6 	bl	80062a4 <sbrk_aligned>
 8006358:	3001      	adds	r0, #1
 800635a:	d03a      	beq.n	80063d2 <_malloc_r+0xea>
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	442b      	add	r3, r5
 8006360:	6023      	str	r3, [r4, #0]
 8006362:	f8d8 3000 	ldr.w	r3, [r8]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	bb62      	cbnz	r2, 80063c4 <_malloc_r+0xdc>
 800636a:	f8c8 7000 	str.w	r7, [r8]
 800636e:	e00f      	b.n	8006390 <_malloc_r+0xa8>
 8006370:	6822      	ldr	r2, [r4, #0]
 8006372:	1b52      	subs	r2, r2, r5
 8006374:	d420      	bmi.n	80063b8 <_malloc_r+0xd0>
 8006376:	2a0b      	cmp	r2, #11
 8006378:	d917      	bls.n	80063aa <_malloc_r+0xc2>
 800637a:	1961      	adds	r1, r4, r5
 800637c:	42a3      	cmp	r3, r4
 800637e:	6025      	str	r5, [r4, #0]
 8006380:	bf18      	it	ne
 8006382:	6059      	strne	r1, [r3, #4]
 8006384:	6863      	ldr	r3, [r4, #4]
 8006386:	bf08      	it	eq
 8006388:	f8c8 1000 	streq.w	r1, [r8]
 800638c:	5162      	str	r2, [r4, r5]
 800638e:	604b      	str	r3, [r1, #4]
 8006390:	4630      	mov	r0, r6
 8006392:	f000 f82f 	bl	80063f4 <__malloc_unlock>
 8006396:	f104 000b 	add.w	r0, r4, #11
 800639a:	1d23      	adds	r3, r4, #4
 800639c:	f020 0007 	bic.w	r0, r0, #7
 80063a0:	1ac2      	subs	r2, r0, r3
 80063a2:	bf1c      	itt	ne
 80063a4:	1a1b      	subne	r3, r3, r0
 80063a6:	50a3      	strne	r3, [r4, r2]
 80063a8:	e7af      	b.n	800630a <_malloc_r+0x22>
 80063aa:	6862      	ldr	r2, [r4, #4]
 80063ac:	42a3      	cmp	r3, r4
 80063ae:	bf0c      	ite	eq
 80063b0:	f8c8 2000 	streq.w	r2, [r8]
 80063b4:	605a      	strne	r2, [r3, #4]
 80063b6:	e7eb      	b.n	8006390 <_malloc_r+0xa8>
 80063b8:	4623      	mov	r3, r4
 80063ba:	6864      	ldr	r4, [r4, #4]
 80063bc:	e7ae      	b.n	800631c <_malloc_r+0x34>
 80063be:	463c      	mov	r4, r7
 80063c0:	687f      	ldr	r7, [r7, #4]
 80063c2:	e7b6      	b.n	8006332 <_malloc_r+0x4a>
 80063c4:	461a      	mov	r2, r3
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	d1fb      	bne.n	80063c4 <_malloc_r+0xdc>
 80063cc:	2300      	movs	r3, #0
 80063ce:	6053      	str	r3, [r2, #4]
 80063d0:	e7de      	b.n	8006390 <_malloc_r+0xa8>
 80063d2:	230c      	movs	r3, #12
 80063d4:	6033      	str	r3, [r6, #0]
 80063d6:	4630      	mov	r0, r6
 80063d8:	f000 f80c 	bl	80063f4 <__malloc_unlock>
 80063dc:	e794      	b.n	8006308 <_malloc_r+0x20>
 80063de:	6005      	str	r5, [r0, #0]
 80063e0:	e7d6      	b.n	8006390 <_malloc_r+0xa8>
 80063e2:	bf00      	nop
 80063e4:	2000140c 	.word	0x2000140c

080063e8 <__malloc_lock>:
 80063e8:	4801      	ldr	r0, [pc, #4]	@ (80063f0 <__malloc_lock+0x8>)
 80063ea:	f000 bb50 	b.w	8006a8e <__retarget_lock_acquire_recursive>
 80063ee:	bf00      	nop
 80063f0:	20001550 	.word	0x20001550

080063f4 <__malloc_unlock>:
 80063f4:	4801      	ldr	r0, [pc, #4]	@ (80063fc <__malloc_unlock+0x8>)
 80063f6:	f000 bb4b 	b.w	8006a90 <__retarget_lock_release_recursive>
 80063fa:	bf00      	nop
 80063fc:	20001550 	.word	0x20001550

08006400 <std>:
 8006400:	2300      	movs	r3, #0
 8006402:	b510      	push	{r4, lr}
 8006404:	4604      	mov	r4, r0
 8006406:	e9c0 3300 	strd	r3, r3, [r0]
 800640a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800640e:	6083      	str	r3, [r0, #8]
 8006410:	8181      	strh	r1, [r0, #12]
 8006412:	6643      	str	r3, [r0, #100]	@ 0x64
 8006414:	81c2      	strh	r2, [r0, #14]
 8006416:	6183      	str	r3, [r0, #24]
 8006418:	4619      	mov	r1, r3
 800641a:	2208      	movs	r2, #8
 800641c:	305c      	adds	r0, #92	@ 0x5c
 800641e:	f000 fa19 	bl	8006854 <memset>
 8006422:	4b0d      	ldr	r3, [pc, #52]	@ (8006458 <std+0x58>)
 8006424:	6263      	str	r3, [r4, #36]	@ 0x24
 8006426:	4b0d      	ldr	r3, [pc, #52]	@ (800645c <std+0x5c>)
 8006428:	62a3      	str	r3, [r4, #40]	@ 0x28
 800642a:	4b0d      	ldr	r3, [pc, #52]	@ (8006460 <std+0x60>)
 800642c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800642e:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <std+0x64>)
 8006430:	6323      	str	r3, [r4, #48]	@ 0x30
 8006432:	4b0d      	ldr	r3, [pc, #52]	@ (8006468 <std+0x68>)
 8006434:	6224      	str	r4, [r4, #32]
 8006436:	429c      	cmp	r4, r3
 8006438:	d006      	beq.n	8006448 <std+0x48>
 800643a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800643e:	4294      	cmp	r4, r2
 8006440:	d002      	beq.n	8006448 <std+0x48>
 8006442:	33d0      	adds	r3, #208	@ 0xd0
 8006444:	429c      	cmp	r4, r3
 8006446:	d105      	bne.n	8006454 <std+0x54>
 8006448:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800644c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006450:	f000 bb1c 	b.w	8006a8c <__retarget_lock_init_recursive>
 8006454:	bd10      	pop	{r4, pc}
 8006456:	bf00      	nop
 8006458:	080066a5 	.word	0x080066a5
 800645c:	080066c7 	.word	0x080066c7
 8006460:	080066ff 	.word	0x080066ff
 8006464:	08006723 	.word	0x08006723
 8006468:	20001410 	.word	0x20001410

0800646c <stdio_exit_handler>:
 800646c:	4a02      	ldr	r2, [pc, #8]	@ (8006478 <stdio_exit_handler+0xc>)
 800646e:	4903      	ldr	r1, [pc, #12]	@ (800647c <stdio_exit_handler+0x10>)
 8006470:	4803      	ldr	r0, [pc, #12]	@ (8006480 <stdio_exit_handler+0x14>)
 8006472:	f000 b869 	b.w	8006548 <_fwalk_sglue>
 8006476:	bf00      	nop
 8006478:	20000080 	.word	0x20000080
 800647c:	080074e9 	.word	0x080074e9
 8006480:	20000090 	.word	0x20000090

08006484 <cleanup_stdio>:
 8006484:	6841      	ldr	r1, [r0, #4]
 8006486:	4b0c      	ldr	r3, [pc, #48]	@ (80064b8 <cleanup_stdio+0x34>)
 8006488:	4299      	cmp	r1, r3
 800648a:	b510      	push	{r4, lr}
 800648c:	4604      	mov	r4, r0
 800648e:	d001      	beq.n	8006494 <cleanup_stdio+0x10>
 8006490:	f001 f82a 	bl	80074e8 <_fflush_r>
 8006494:	68a1      	ldr	r1, [r4, #8]
 8006496:	4b09      	ldr	r3, [pc, #36]	@ (80064bc <cleanup_stdio+0x38>)
 8006498:	4299      	cmp	r1, r3
 800649a:	d002      	beq.n	80064a2 <cleanup_stdio+0x1e>
 800649c:	4620      	mov	r0, r4
 800649e:	f001 f823 	bl	80074e8 <_fflush_r>
 80064a2:	68e1      	ldr	r1, [r4, #12]
 80064a4:	4b06      	ldr	r3, [pc, #24]	@ (80064c0 <cleanup_stdio+0x3c>)
 80064a6:	4299      	cmp	r1, r3
 80064a8:	d004      	beq.n	80064b4 <cleanup_stdio+0x30>
 80064aa:	4620      	mov	r0, r4
 80064ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b0:	f001 b81a 	b.w	80074e8 <_fflush_r>
 80064b4:	bd10      	pop	{r4, pc}
 80064b6:	bf00      	nop
 80064b8:	20001410 	.word	0x20001410
 80064bc:	20001478 	.word	0x20001478
 80064c0:	200014e0 	.word	0x200014e0

080064c4 <global_stdio_init.part.0>:
 80064c4:	b510      	push	{r4, lr}
 80064c6:	4b0b      	ldr	r3, [pc, #44]	@ (80064f4 <global_stdio_init.part.0+0x30>)
 80064c8:	4c0b      	ldr	r4, [pc, #44]	@ (80064f8 <global_stdio_init.part.0+0x34>)
 80064ca:	4a0c      	ldr	r2, [pc, #48]	@ (80064fc <global_stdio_init.part.0+0x38>)
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	4620      	mov	r0, r4
 80064d0:	2200      	movs	r2, #0
 80064d2:	2104      	movs	r1, #4
 80064d4:	f7ff ff94 	bl	8006400 <std>
 80064d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064dc:	2201      	movs	r2, #1
 80064de:	2109      	movs	r1, #9
 80064e0:	f7ff ff8e 	bl	8006400 <std>
 80064e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064e8:	2202      	movs	r2, #2
 80064ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064ee:	2112      	movs	r1, #18
 80064f0:	f7ff bf86 	b.w	8006400 <std>
 80064f4:	20001548 	.word	0x20001548
 80064f8:	20001410 	.word	0x20001410
 80064fc:	0800646d 	.word	0x0800646d

08006500 <__sfp_lock_acquire>:
 8006500:	4801      	ldr	r0, [pc, #4]	@ (8006508 <__sfp_lock_acquire+0x8>)
 8006502:	f000 bac4 	b.w	8006a8e <__retarget_lock_acquire_recursive>
 8006506:	bf00      	nop
 8006508:	20001551 	.word	0x20001551

0800650c <__sfp_lock_release>:
 800650c:	4801      	ldr	r0, [pc, #4]	@ (8006514 <__sfp_lock_release+0x8>)
 800650e:	f000 babf 	b.w	8006a90 <__retarget_lock_release_recursive>
 8006512:	bf00      	nop
 8006514:	20001551 	.word	0x20001551

08006518 <__sinit>:
 8006518:	b510      	push	{r4, lr}
 800651a:	4604      	mov	r4, r0
 800651c:	f7ff fff0 	bl	8006500 <__sfp_lock_acquire>
 8006520:	6a23      	ldr	r3, [r4, #32]
 8006522:	b11b      	cbz	r3, 800652c <__sinit+0x14>
 8006524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006528:	f7ff bff0 	b.w	800650c <__sfp_lock_release>
 800652c:	4b04      	ldr	r3, [pc, #16]	@ (8006540 <__sinit+0x28>)
 800652e:	6223      	str	r3, [r4, #32]
 8006530:	4b04      	ldr	r3, [pc, #16]	@ (8006544 <__sinit+0x2c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1f5      	bne.n	8006524 <__sinit+0xc>
 8006538:	f7ff ffc4 	bl	80064c4 <global_stdio_init.part.0>
 800653c:	e7f2      	b.n	8006524 <__sinit+0xc>
 800653e:	bf00      	nop
 8006540:	08006485 	.word	0x08006485
 8006544:	20001548 	.word	0x20001548

08006548 <_fwalk_sglue>:
 8006548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800654c:	4607      	mov	r7, r0
 800654e:	4688      	mov	r8, r1
 8006550:	4614      	mov	r4, r2
 8006552:	2600      	movs	r6, #0
 8006554:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006558:	f1b9 0901 	subs.w	r9, r9, #1
 800655c:	d505      	bpl.n	800656a <_fwalk_sglue+0x22>
 800655e:	6824      	ldr	r4, [r4, #0]
 8006560:	2c00      	cmp	r4, #0
 8006562:	d1f7      	bne.n	8006554 <_fwalk_sglue+0xc>
 8006564:	4630      	mov	r0, r6
 8006566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800656a:	89ab      	ldrh	r3, [r5, #12]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d907      	bls.n	8006580 <_fwalk_sglue+0x38>
 8006570:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006574:	3301      	adds	r3, #1
 8006576:	d003      	beq.n	8006580 <_fwalk_sglue+0x38>
 8006578:	4629      	mov	r1, r5
 800657a:	4638      	mov	r0, r7
 800657c:	47c0      	blx	r8
 800657e:	4306      	orrs	r6, r0
 8006580:	3568      	adds	r5, #104	@ 0x68
 8006582:	e7e9      	b.n	8006558 <_fwalk_sglue+0x10>

08006584 <iprintf>:
 8006584:	b40f      	push	{r0, r1, r2, r3}
 8006586:	b507      	push	{r0, r1, r2, lr}
 8006588:	4906      	ldr	r1, [pc, #24]	@ (80065a4 <iprintf+0x20>)
 800658a:	ab04      	add	r3, sp, #16
 800658c:	6808      	ldr	r0, [r1, #0]
 800658e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006592:	6881      	ldr	r1, [r0, #8]
 8006594:	9301      	str	r3, [sp, #4]
 8006596:	f000 fc7d 	bl	8006e94 <_vfiprintf_r>
 800659a:	b003      	add	sp, #12
 800659c:	f85d eb04 	ldr.w	lr, [sp], #4
 80065a0:	b004      	add	sp, #16
 80065a2:	4770      	bx	lr
 80065a4:	2000008c 	.word	0x2000008c

080065a8 <_puts_r>:
 80065a8:	6a03      	ldr	r3, [r0, #32]
 80065aa:	b570      	push	{r4, r5, r6, lr}
 80065ac:	6884      	ldr	r4, [r0, #8]
 80065ae:	4605      	mov	r5, r0
 80065b0:	460e      	mov	r6, r1
 80065b2:	b90b      	cbnz	r3, 80065b8 <_puts_r+0x10>
 80065b4:	f7ff ffb0 	bl	8006518 <__sinit>
 80065b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065ba:	07db      	lsls	r3, r3, #31
 80065bc:	d405      	bmi.n	80065ca <_puts_r+0x22>
 80065be:	89a3      	ldrh	r3, [r4, #12]
 80065c0:	0598      	lsls	r0, r3, #22
 80065c2:	d402      	bmi.n	80065ca <_puts_r+0x22>
 80065c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065c6:	f000 fa62 	bl	8006a8e <__retarget_lock_acquire_recursive>
 80065ca:	89a3      	ldrh	r3, [r4, #12]
 80065cc:	0719      	lsls	r1, r3, #28
 80065ce:	d502      	bpl.n	80065d6 <_puts_r+0x2e>
 80065d0:	6923      	ldr	r3, [r4, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d135      	bne.n	8006642 <_puts_r+0x9a>
 80065d6:	4621      	mov	r1, r4
 80065d8:	4628      	mov	r0, r5
 80065da:	f000 f8e5 	bl	80067a8 <__swsetup_r>
 80065de:	b380      	cbz	r0, 8006642 <_puts_r+0x9a>
 80065e0:	f04f 35ff 	mov.w	r5, #4294967295
 80065e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065e6:	07da      	lsls	r2, r3, #31
 80065e8:	d405      	bmi.n	80065f6 <_puts_r+0x4e>
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	059b      	lsls	r3, r3, #22
 80065ee:	d402      	bmi.n	80065f6 <_puts_r+0x4e>
 80065f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065f2:	f000 fa4d 	bl	8006a90 <__retarget_lock_release_recursive>
 80065f6:	4628      	mov	r0, r5
 80065f8:	bd70      	pop	{r4, r5, r6, pc}
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	da04      	bge.n	8006608 <_puts_r+0x60>
 80065fe:	69a2      	ldr	r2, [r4, #24]
 8006600:	429a      	cmp	r2, r3
 8006602:	dc17      	bgt.n	8006634 <_puts_r+0x8c>
 8006604:	290a      	cmp	r1, #10
 8006606:	d015      	beq.n	8006634 <_puts_r+0x8c>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	6022      	str	r2, [r4, #0]
 800660e:	7019      	strb	r1, [r3, #0]
 8006610:	68a3      	ldr	r3, [r4, #8]
 8006612:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006616:	3b01      	subs	r3, #1
 8006618:	60a3      	str	r3, [r4, #8]
 800661a:	2900      	cmp	r1, #0
 800661c:	d1ed      	bne.n	80065fa <_puts_r+0x52>
 800661e:	2b00      	cmp	r3, #0
 8006620:	da11      	bge.n	8006646 <_puts_r+0x9e>
 8006622:	4622      	mov	r2, r4
 8006624:	210a      	movs	r1, #10
 8006626:	4628      	mov	r0, r5
 8006628:	f000 f87f 	bl	800672a <__swbuf_r>
 800662c:	3001      	adds	r0, #1
 800662e:	d0d7      	beq.n	80065e0 <_puts_r+0x38>
 8006630:	250a      	movs	r5, #10
 8006632:	e7d7      	b.n	80065e4 <_puts_r+0x3c>
 8006634:	4622      	mov	r2, r4
 8006636:	4628      	mov	r0, r5
 8006638:	f000 f877 	bl	800672a <__swbuf_r>
 800663c:	3001      	adds	r0, #1
 800663e:	d1e7      	bne.n	8006610 <_puts_r+0x68>
 8006640:	e7ce      	b.n	80065e0 <_puts_r+0x38>
 8006642:	3e01      	subs	r6, #1
 8006644:	e7e4      	b.n	8006610 <_puts_r+0x68>
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	6022      	str	r2, [r4, #0]
 800664c:	220a      	movs	r2, #10
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	e7ee      	b.n	8006630 <_puts_r+0x88>
	...

08006654 <puts>:
 8006654:	4b02      	ldr	r3, [pc, #8]	@ (8006660 <puts+0xc>)
 8006656:	4601      	mov	r1, r0
 8006658:	6818      	ldr	r0, [r3, #0]
 800665a:	f7ff bfa5 	b.w	80065a8 <_puts_r>
 800665e:	bf00      	nop
 8006660:	2000008c 	.word	0x2000008c

08006664 <siprintf>:
 8006664:	b40e      	push	{r1, r2, r3}
 8006666:	b500      	push	{lr}
 8006668:	b09c      	sub	sp, #112	@ 0x70
 800666a:	ab1d      	add	r3, sp, #116	@ 0x74
 800666c:	9002      	str	r0, [sp, #8]
 800666e:	9006      	str	r0, [sp, #24]
 8006670:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006674:	4809      	ldr	r0, [pc, #36]	@ (800669c <siprintf+0x38>)
 8006676:	9107      	str	r1, [sp, #28]
 8006678:	9104      	str	r1, [sp, #16]
 800667a:	4909      	ldr	r1, [pc, #36]	@ (80066a0 <siprintf+0x3c>)
 800667c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006680:	9105      	str	r1, [sp, #20]
 8006682:	6800      	ldr	r0, [r0, #0]
 8006684:	9301      	str	r3, [sp, #4]
 8006686:	a902      	add	r1, sp, #8
 8006688:	f000 fade 	bl	8006c48 <_svfiprintf_r>
 800668c:	9b02      	ldr	r3, [sp, #8]
 800668e:	2200      	movs	r2, #0
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	b01c      	add	sp, #112	@ 0x70
 8006694:	f85d eb04 	ldr.w	lr, [sp], #4
 8006698:	b003      	add	sp, #12
 800669a:	4770      	bx	lr
 800669c:	2000008c 	.word	0x2000008c
 80066a0:	ffff0208 	.word	0xffff0208

080066a4 <__sread>:
 80066a4:	b510      	push	{r4, lr}
 80066a6:	460c      	mov	r4, r1
 80066a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ac:	f000 f990 	bl	80069d0 <_read_r>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	bfab      	itete	ge
 80066b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80066b6:	89a3      	ldrhlt	r3, [r4, #12]
 80066b8:	181b      	addge	r3, r3, r0
 80066ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80066be:	bfac      	ite	ge
 80066c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80066c2:	81a3      	strhlt	r3, [r4, #12]
 80066c4:	bd10      	pop	{r4, pc}

080066c6 <__swrite>:
 80066c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ca:	461f      	mov	r7, r3
 80066cc:	898b      	ldrh	r3, [r1, #12]
 80066ce:	05db      	lsls	r3, r3, #23
 80066d0:	4605      	mov	r5, r0
 80066d2:	460c      	mov	r4, r1
 80066d4:	4616      	mov	r6, r2
 80066d6:	d505      	bpl.n	80066e4 <__swrite+0x1e>
 80066d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066dc:	2302      	movs	r3, #2
 80066de:	2200      	movs	r2, #0
 80066e0:	f000 f964 	bl	80069ac <_lseek_r>
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066ee:	81a3      	strh	r3, [r4, #12]
 80066f0:	4632      	mov	r2, r6
 80066f2:	463b      	mov	r3, r7
 80066f4:	4628      	mov	r0, r5
 80066f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066fa:	f000 b98b 	b.w	8006a14 <_write_r>

080066fe <__sseek>:
 80066fe:	b510      	push	{r4, lr}
 8006700:	460c      	mov	r4, r1
 8006702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006706:	f000 f951 	bl	80069ac <_lseek_r>
 800670a:	1c43      	adds	r3, r0, #1
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	bf15      	itete	ne
 8006710:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006712:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006716:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800671a:	81a3      	strheq	r3, [r4, #12]
 800671c:	bf18      	it	ne
 800671e:	81a3      	strhne	r3, [r4, #12]
 8006720:	bd10      	pop	{r4, pc}

08006722 <__sclose>:
 8006722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006726:	f000 b931 	b.w	800698c <_close_r>

0800672a <__swbuf_r>:
 800672a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672c:	460e      	mov	r6, r1
 800672e:	4614      	mov	r4, r2
 8006730:	4605      	mov	r5, r0
 8006732:	b118      	cbz	r0, 800673c <__swbuf_r+0x12>
 8006734:	6a03      	ldr	r3, [r0, #32]
 8006736:	b90b      	cbnz	r3, 800673c <__swbuf_r+0x12>
 8006738:	f7ff feee 	bl	8006518 <__sinit>
 800673c:	69a3      	ldr	r3, [r4, #24]
 800673e:	60a3      	str	r3, [r4, #8]
 8006740:	89a3      	ldrh	r3, [r4, #12]
 8006742:	071a      	lsls	r2, r3, #28
 8006744:	d501      	bpl.n	800674a <__swbuf_r+0x20>
 8006746:	6923      	ldr	r3, [r4, #16]
 8006748:	b943      	cbnz	r3, 800675c <__swbuf_r+0x32>
 800674a:	4621      	mov	r1, r4
 800674c:	4628      	mov	r0, r5
 800674e:	f000 f82b 	bl	80067a8 <__swsetup_r>
 8006752:	b118      	cbz	r0, 800675c <__swbuf_r+0x32>
 8006754:	f04f 37ff 	mov.w	r7, #4294967295
 8006758:	4638      	mov	r0, r7
 800675a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	6922      	ldr	r2, [r4, #16]
 8006760:	1a98      	subs	r0, r3, r2
 8006762:	6963      	ldr	r3, [r4, #20]
 8006764:	b2f6      	uxtb	r6, r6
 8006766:	4283      	cmp	r3, r0
 8006768:	4637      	mov	r7, r6
 800676a:	dc05      	bgt.n	8006778 <__swbuf_r+0x4e>
 800676c:	4621      	mov	r1, r4
 800676e:	4628      	mov	r0, r5
 8006770:	f000 feba 	bl	80074e8 <_fflush_r>
 8006774:	2800      	cmp	r0, #0
 8006776:	d1ed      	bne.n	8006754 <__swbuf_r+0x2a>
 8006778:	68a3      	ldr	r3, [r4, #8]
 800677a:	3b01      	subs	r3, #1
 800677c:	60a3      	str	r3, [r4, #8]
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	6022      	str	r2, [r4, #0]
 8006784:	701e      	strb	r6, [r3, #0]
 8006786:	6962      	ldr	r2, [r4, #20]
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	429a      	cmp	r2, r3
 800678c:	d004      	beq.n	8006798 <__swbuf_r+0x6e>
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	07db      	lsls	r3, r3, #31
 8006792:	d5e1      	bpl.n	8006758 <__swbuf_r+0x2e>
 8006794:	2e0a      	cmp	r6, #10
 8006796:	d1df      	bne.n	8006758 <__swbuf_r+0x2e>
 8006798:	4621      	mov	r1, r4
 800679a:	4628      	mov	r0, r5
 800679c:	f000 fea4 	bl	80074e8 <_fflush_r>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d0d9      	beq.n	8006758 <__swbuf_r+0x2e>
 80067a4:	e7d6      	b.n	8006754 <__swbuf_r+0x2a>
	...

080067a8 <__swsetup_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4b29      	ldr	r3, [pc, #164]	@ (8006850 <__swsetup_r+0xa8>)
 80067ac:	4605      	mov	r5, r0
 80067ae:	6818      	ldr	r0, [r3, #0]
 80067b0:	460c      	mov	r4, r1
 80067b2:	b118      	cbz	r0, 80067bc <__swsetup_r+0x14>
 80067b4:	6a03      	ldr	r3, [r0, #32]
 80067b6:	b90b      	cbnz	r3, 80067bc <__swsetup_r+0x14>
 80067b8:	f7ff feae 	bl	8006518 <__sinit>
 80067bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067c0:	0719      	lsls	r1, r3, #28
 80067c2:	d422      	bmi.n	800680a <__swsetup_r+0x62>
 80067c4:	06da      	lsls	r2, r3, #27
 80067c6:	d407      	bmi.n	80067d8 <__swsetup_r+0x30>
 80067c8:	2209      	movs	r2, #9
 80067ca:	602a      	str	r2, [r5, #0]
 80067cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067d0:	81a3      	strh	r3, [r4, #12]
 80067d2:	f04f 30ff 	mov.w	r0, #4294967295
 80067d6:	e033      	b.n	8006840 <__swsetup_r+0x98>
 80067d8:	0758      	lsls	r0, r3, #29
 80067da:	d512      	bpl.n	8006802 <__swsetup_r+0x5a>
 80067dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067de:	b141      	cbz	r1, 80067f2 <__swsetup_r+0x4a>
 80067e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067e4:	4299      	cmp	r1, r3
 80067e6:	d002      	beq.n	80067ee <__swsetup_r+0x46>
 80067e8:	4628      	mov	r0, r5
 80067ea:	f000 f987 	bl	8006afc <_free_r>
 80067ee:	2300      	movs	r3, #0
 80067f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80067f8:	81a3      	strh	r3, [r4, #12]
 80067fa:	2300      	movs	r3, #0
 80067fc:	6063      	str	r3, [r4, #4]
 80067fe:	6923      	ldr	r3, [r4, #16]
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	f043 0308 	orr.w	r3, r3, #8
 8006808:	81a3      	strh	r3, [r4, #12]
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	b94b      	cbnz	r3, 8006822 <__swsetup_r+0x7a>
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006818:	d003      	beq.n	8006822 <__swsetup_r+0x7a>
 800681a:	4621      	mov	r1, r4
 800681c:	4628      	mov	r0, r5
 800681e:	f000 fec3 	bl	80075a8 <__smakebuf_r>
 8006822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006826:	f013 0201 	ands.w	r2, r3, #1
 800682a:	d00a      	beq.n	8006842 <__swsetup_r+0x9a>
 800682c:	2200      	movs	r2, #0
 800682e:	60a2      	str	r2, [r4, #8]
 8006830:	6962      	ldr	r2, [r4, #20]
 8006832:	4252      	negs	r2, r2
 8006834:	61a2      	str	r2, [r4, #24]
 8006836:	6922      	ldr	r2, [r4, #16]
 8006838:	b942      	cbnz	r2, 800684c <__swsetup_r+0xa4>
 800683a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800683e:	d1c5      	bne.n	80067cc <__swsetup_r+0x24>
 8006840:	bd38      	pop	{r3, r4, r5, pc}
 8006842:	0799      	lsls	r1, r3, #30
 8006844:	bf58      	it	pl
 8006846:	6962      	ldrpl	r2, [r4, #20]
 8006848:	60a2      	str	r2, [r4, #8]
 800684a:	e7f4      	b.n	8006836 <__swsetup_r+0x8e>
 800684c:	2000      	movs	r0, #0
 800684e:	e7f7      	b.n	8006840 <__swsetup_r+0x98>
 8006850:	2000008c 	.word	0x2000008c

08006854 <memset>:
 8006854:	4402      	add	r2, r0
 8006856:	4603      	mov	r3, r0
 8006858:	4293      	cmp	r3, r2
 800685a:	d100      	bne.n	800685e <memset+0xa>
 800685c:	4770      	bx	lr
 800685e:	f803 1b01 	strb.w	r1, [r3], #1
 8006862:	e7f9      	b.n	8006858 <memset+0x4>

08006864 <strcat>:
 8006864:	b510      	push	{r4, lr}
 8006866:	4602      	mov	r2, r0
 8006868:	7814      	ldrb	r4, [r2, #0]
 800686a:	4613      	mov	r3, r2
 800686c:	3201      	adds	r2, #1
 800686e:	2c00      	cmp	r4, #0
 8006870:	d1fa      	bne.n	8006868 <strcat+0x4>
 8006872:	3b01      	subs	r3, #1
 8006874:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006878:	f803 2f01 	strb.w	r2, [r3, #1]!
 800687c:	2a00      	cmp	r2, #0
 800687e:	d1f9      	bne.n	8006874 <strcat+0x10>
 8006880:	bd10      	pop	{r4, pc}

08006882 <strncpy>:
 8006882:	b510      	push	{r4, lr}
 8006884:	3901      	subs	r1, #1
 8006886:	4603      	mov	r3, r0
 8006888:	b132      	cbz	r2, 8006898 <strncpy+0x16>
 800688a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800688e:	f803 4b01 	strb.w	r4, [r3], #1
 8006892:	3a01      	subs	r2, #1
 8006894:	2c00      	cmp	r4, #0
 8006896:	d1f7      	bne.n	8006888 <strncpy+0x6>
 8006898:	441a      	add	r2, r3
 800689a:	2100      	movs	r1, #0
 800689c:	4293      	cmp	r3, r2
 800689e:	d100      	bne.n	80068a2 <strncpy+0x20>
 80068a0:	bd10      	pop	{r4, pc}
 80068a2:	f803 1b01 	strb.w	r1, [r3], #1
 80068a6:	e7f9      	b.n	800689c <strncpy+0x1a>

080068a8 <strtok>:
 80068a8:	4b16      	ldr	r3, [pc, #88]	@ (8006904 <strtok+0x5c>)
 80068aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ae:	681f      	ldr	r7, [r3, #0]
 80068b0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80068b2:	4605      	mov	r5, r0
 80068b4:	460e      	mov	r6, r1
 80068b6:	b9ec      	cbnz	r4, 80068f4 <strtok+0x4c>
 80068b8:	2050      	movs	r0, #80	@ 0x50
 80068ba:	f7ff fceb 	bl	8006294 <malloc>
 80068be:	4602      	mov	r2, r0
 80068c0:	6478      	str	r0, [r7, #68]	@ 0x44
 80068c2:	b920      	cbnz	r0, 80068ce <strtok+0x26>
 80068c4:	4b10      	ldr	r3, [pc, #64]	@ (8006908 <strtok+0x60>)
 80068c6:	4811      	ldr	r0, [pc, #68]	@ (800690c <strtok+0x64>)
 80068c8:	215b      	movs	r1, #91	@ 0x5b
 80068ca:	f000 f8f9 	bl	8006ac0 <__assert_func>
 80068ce:	e9c0 4400 	strd	r4, r4, [r0]
 80068d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80068d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80068da:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80068de:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80068e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80068e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80068ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80068ee:	6184      	str	r4, [r0, #24]
 80068f0:	7704      	strb	r4, [r0, #28]
 80068f2:	6244      	str	r4, [r0, #36]	@ 0x24
 80068f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068f6:	4631      	mov	r1, r6
 80068f8:	4628      	mov	r0, r5
 80068fa:	2301      	movs	r3, #1
 80068fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006900:	f000 b806 	b.w	8006910 <__strtok_r>
 8006904:	2000008c 	.word	0x2000008c
 8006908:	08018636 	.word	0x08018636
 800690c:	0801864d 	.word	0x0801864d

08006910 <__strtok_r>:
 8006910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006912:	4604      	mov	r4, r0
 8006914:	b908      	cbnz	r0, 800691a <__strtok_r+0xa>
 8006916:	6814      	ldr	r4, [r2, #0]
 8006918:	b144      	cbz	r4, 800692c <__strtok_r+0x1c>
 800691a:	4620      	mov	r0, r4
 800691c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006920:	460f      	mov	r7, r1
 8006922:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006926:	b91e      	cbnz	r6, 8006930 <__strtok_r+0x20>
 8006928:	b965      	cbnz	r5, 8006944 <__strtok_r+0x34>
 800692a:	6015      	str	r5, [r2, #0]
 800692c:	2000      	movs	r0, #0
 800692e:	e005      	b.n	800693c <__strtok_r+0x2c>
 8006930:	42b5      	cmp	r5, r6
 8006932:	d1f6      	bne.n	8006922 <__strtok_r+0x12>
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1f0      	bne.n	800691a <__strtok_r+0xa>
 8006938:	6014      	str	r4, [r2, #0]
 800693a:	7003      	strb	r3, [r0, #0]
 800693c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800693e:	461c      	mov	r4, r3
 8006940:	e00c      	b.n	800695c <__strtok_r+0x4c>
 8006942:	b915      	cbnz	r5, 800694a <__strtok_r+0x3a>
 8006944:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006948:	460e      	mov	r6, r1
 800694a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800694e:	42ab      	cmp	r3, r5
 8006950:	d1f7      	bne.n	8006942 <__strtok_r+0x32>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0f3      	beq.n	800693e <__strtok_r+0x2e>
 8006956:	2300      	movs	r3, #0
 8006958:	f804 3c01 	strb.w	r3, [r4, #-1]
 800695c:	6014      	str	r4, [r2, #0]
 800695e:	e7ed      	b.n	800693c <__strtok_r+0x2c>

08006960 <strstr>:
 8006960:	780a      	ldrb	r2, [r1, #0]
 8006962:	b570      	push	{r4, r5, r6, lr}
 8006964:	b96a      	cbnz	r2, 8006982 <strstr+0x22>
 8006966:	bd70      	pop	{r4, r5, r6, pc}
 8006968:	429a      	cmp	r2, r3
 800696a:	d109      	bne.n	8006980 <strstr+0x20>
 800696c:	460c      	mov	r4, r1
 800696e:	4605      	mov	r5, r0
 8006970:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0f6      	beq.n	8006966 <strstr+0x6>
 8006978:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800697c:	429e      	cmp	r6, r3
 800697e:	d0f7      	beq.n	8006970 <strstr+0x10>
 8006980:	3001      	adds	r0, #1
 8006982:	7803      	ldrb	r3, [r0, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1ef      	bne.n	8006968 <strstr+0x8>
 8006988:	4618      	mov	r0, r3
 800698a:	e7ec      	b.n	8006966 <strstr+0x6>

0800698c <_close_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4d06      	ldr	r5, [pc, #24]	@ (80069a8 <_close_r+0x1c>)
 8006990:	2300      	movs	r3, #0
 8006992:	4604      	mov	r4, r0
 8006994:	4608      	mov	r0, r1
 8006996:	602b      	str	r3, [r5, #0]
 8006998:	f7fa faca 	bl	8000f30 <_close>
 800699c:	1c43      	adds	r3, r0, #1
 800699e:	d102      	bne.n	80069a6 <_close_r+0x1a>
 80069a0:	682b      	ldr	r3, [r5, #0]
 80069a2:	b103      	cbz	r3, 80069a6 <_close_r+0x1a>
 80069a4:	6023      	str	r3, [r4, #0]
 80069a6:	bd38      	pop	{r3, r4, r5, pc}
 80069a8:	2000154c 	.word	0x2000154c

080069ac <_lseek_r>:
 80069ac:	b538      	push	{r3, r4, r5, lr}
 80069ae:	4d07      	ldr	r5, [pc, #28]	@ (80069cc <_lseek_r+0x20>)
 80069b0:	4604      	mov	r4, r0
 80069b2:	4608      	mov	r0, r1
 80069b4:	4611      	mov	r1, r2
 80069b6:	2200      	movs	r2, #0
 80069b8:	602a      	str	r2, [r5, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	f7fa fadf 	bl	8000f7e <_lseek>
 80069c0:	1c43      	adds	r3, r0, #1
 80069c2:	d102      	bne.n	80069ca <_lseek_r+0x1e>
 80069c4:	682b      	ldr	r3, [r5, #0]
 80069c6:	b103      	cbz	r3, 80069ca <_lseek_r+0x1e>
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	bd38      	pop	{r3, r4, r5, pc}
 80069cc:	2000154c 	.word	0x2000154c

080069d0 <_read_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	4d07      	ldr	r5, [pc, #28]	@ (80069f0 <_read_r+0x20>)
 80069d4:	4604      	mov	r4, r0
 80069d6:	4608      	mov	r0, r1
 80069d8:	4611      	mov	r1, r2
 80069da:	2200      	movs	r2, #0
 80069dc:	602a      	str	r2, [r5, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	f7fa fa6d 	bl	8000ebe <_read>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_read_r+0x1e>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_read_r+0x1e>
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	2000154c 	.word	0x2000154c

080069f4 <_sbrk_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	4d06      	ldr	r5, [pc, #24]	@ (8006a10 <_sbrk_r+0x1c>)
 80069f8:	2300      	movs	r3, #0
 80069fa:	4604      	mov	r4, r0
 80069fc:	4608      	mov	r0, r1
 80069fe:	602b      	str	r3, [r5, #0]
 8006a00:	f7fa faca 	bl	8000f98 <_sbrk>
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	d102      	bne.n	8006a0e <_sbrk_r+0x1a>
 8006a08:	682b      	ldr	r3, [r5, #0]
 8006a0a:	b103      	cbz	r3, 8006a0e <_sbrk_r+0x1a>
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	2000154c 	.word	0x2000154c

08006a14 <_write_r>:
 8006a14:	b538      	push	{r3, r4, r5, lr}
 8006a16:	4d07      	ldr	r5, [pc, #28]	@ (8006a34 <_write_r+0x20>)
 8006a18:	4604      	mov	r4, r0
 8006a1a:	4608      	mov	r0, r1
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	2200      	movs	r2, #0
 8006a20:	602a      	str	r2, [r5, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	f7fa fa68 	bl	8000ef8 <_write>
 8006a28:	1c43      	adds	r3, r0, #1
 8006a2a:	d102      	bne.n	8006a32 <_write_r+0x1e>
 8006a2c:	682b      	ldr	r3, [r5, #0]
 8006a2e:	b103      	cbz	r3, 8006a32 <_write_r+0x1e>
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	bd38      	pop	{r3, r4, r5, pc}
 8006a34:	2000154c 	.word	0x2000154c

08006a38 <__errno>:
 8006a38:	4b01      	ldr	r3, [pc, #4]	@ (8006a40 <__errno+0x8>)
 8006a3a:	6818      	ldr	r0, [r3, #0]
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	2000008c 	.word	0x2000008c

08006a44 <__libc_init_array>:
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	4d0d      	ldr	r5, [pc, #52]	@ (8006a7c <__libc_init_array+0x38>)
 8006a48:	4c0d      	ldr	r4, [pc, #52]	@ (8006a80 <__libc_init_array+0x3c>)
 8006a4a:	1b64      	subs	r4, r4, r5
 8006a4c:	10a4      	asrs	r4, r4, #2
 8006a4e:	2600      	movs	r6, #0
 8006a50:	42a6      	cmp	r6, r4
 8006a52:	d109      	bne.n	8006a68 <__libc_init_array+0x24>
 8006a54:	4d0b      	ldr	r5, [pc, #44]	@ (8006a84 <__libc_init_array+0x40>)
 8006a56:	4c0c      	ldr	r4, [pc, #48]	@ (8006a88 <__libc_init_array+0x44>)
 8006a58:	f000 fea0 	bl	800779c <_init>
 8006a5c:	1b64      	subs	r4, r4, r5
 8006a5e:	10a4      	asrs	r4, r4, #2
 8006a60:	2600      	movs	r6, #0
 8006a62:	42a6      	cmp	r6, r4
 8006a64:	d105      	bne.n	8006a72 <__libc_init_array+0x2e>
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a6c:	4798      	blx	r3
 8006a6e:	3601      	adds	r6, #1
 8006a70:	e7ee      	b.n	8006a50 <__libc_init_array+0xc>
 8006a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a76:	4798      	blx	r3
 8006a78:	3601      	adds	r6, #1
 8006a7a:	e7f2      	b.n	8006a62 <__libc_init_array+0x1e>
 8006a7c:	08018720 	.word	0x08018720
 8006a80:	08018720 	.word	0x08018720
 8006a84:	08018720 	.word	0x08018720
 8006a88:	08018724 	.word	0x08018724

08006a8c <__retarget_lock_init_recursive>:
 8006a8c:	4770      	bx	lr

08006a8e <__retarget_lock_acquire_recursive>:
 8006a8e:	4770      	bx	lr

08006a90 <__retarget_lock_release_recursive>:
 8006a90:	4770      	bx	lr

08006a92 <strcpy>:
 8006a92:	4603      	mov	r3, r0
 8006a94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a98:	f803 2b01 	strb.w	r2, [r3], #1
 8006a9c:	2a00      	cmp	r2, #0
 8006a9e:	d1f9      	bne.n	8006a94 <strcpy+0x2>
 8006aa0:	4770      	bx	lr

08006aa2 <memcpy>:
 8006aa2:	440a      	add	r2, r1
 8006aa4:	4291      	cmp	r1, r2
 8006aa6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006aaa:	d100      	bne.n	8006aae <memcpy+0xc>
 8006aac:	4770      	bx	lr
 8006aae:	b510      	push	{r4, lr}
 8006ab0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ab8:	4291      	cmp	r1, r2
 8006aba:	d1f9      	bne.n	8006ab0 <memcpy+0xe>
 8006abc:	bd10      	pop	{r4, pc}
	...

08006ac0 <__assert_func>:
 8006ac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ac2:	4614      	mov	r4, r2
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	4b09      	ldr	r3, [pc, #36]	@ (8006aec <__assert_func+0x2c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4605      	mov	r5, r0
 8006acc:	68d8      	ldr	r0, [r3, #12]
 8006ace:	b954      	cbnz	r4, 8006ae6 <__assert_func+0x26>
 8006ad0:	4b07      	ldr	r3, [pc, #28]	@ (8006af0 <__assert_func+0x30>)
 8006ad2:	461c      	mov	r4, r3
 8006ad4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ad8:	9100      	str	r1, [sp, #0]
 8006ada:	462b      	mov	r3, r5
 8006adc:	4905      	ldr	r1, [pc, #20]	@ (8006af4 <__assert_func+0x34>)
 8006ade:	f000 fd2b 	bl	8007538 <fiprintf>
 8006ae2:	f000 fdd9 	bl	8007698 <abort>
 8006ae6:	4b04      	ldr	r3, [pc, #16]	@ (8006af8 <__assert_func+0x38>)
 8006ae8:	e7f4      	b.n	8006ad4 <__assert_func+0x14>
 8006aea:	bf00      	nop
 8006aec:	2000008c 	.word	0x2000008c
 8006af0:	080186e2 	.word	0x080186e2
 8006af4:	080186b4 	.word	0x080186b4
 8006af8:	080186a7 	.word	0x080186a7

08006afc <_free_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4605      	mov	r5, r0
 8006b00:	2900      	cmp	r1, #0
 8006b02:	d041      	beq.n	8006b88 <_free_r+0x8c>
 8006b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b08:	1f0c      	subs	r4, r1, #4
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	bfb8      	it	lt
 8006b0e:	18e4      	addlt	r4, r4, r3
 8006b10:	f7ff fc6a 	bl	80063e8 <__malloc_lock>
 8006b14:	4a1d      	ldr	r2, [pc, #116]	@ (8006b8c <_free_r+0x90>)
 8006b16:	6813      	ldr	r3, [r2, #0]
 8006b18:	b933      	cbnz	r3, 8006b28 <_free_r+0x2c>
 8006b1a:	6063      	str	r3, [r4, #4]
 8006b1c:	6014      	str	r4, [r2, #0]
 8006b1e:	4628      	mov	r0, r5
 8006b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b24:	f7ff bc66 	b.w	80063f4 <__malloc_unlock>
 8006b28:	42a3      	cmp	r3, r4
 8006b2a:	d908      	bls.n	8006b3e <_free_r+0x42>
 8006b2c:	6820      	ldr	r0, [r4, #0]
 8006b2e:	1821      	adds	r1, r4, r0
 8006b30:	428b      	cmp	r3, r1
 8006b32:	bf01      	itttt	eq
 8006b34:	6819      	ldreq	r1, [r3, #0]
 8006b36:	685b      	ldreq	r3, [r3, #4]
 8006b38:	1809      	addeq	r1, r1, r0
 8006b3a:	6021      	streq	r1, [r4, #0]
 8006b3c:	e7ed      	b.n	8006b1a <_free_r+0x1e>
 8006b3e:	461a      	mov	r2, r3
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	b10b      	cbz	r3, 8006b48 <_free_r+0x4c>
 8006b44:	42a3      	cmp	r3, r4
 8006b46:	d9fa      	bls.n	8006b3e <_free_r+0x42>
 8006b48:	6811      	ldr	r1, [r2, #0]
 8006b4a:	1850      	adds	r0, r2, r1
 8006b4c:	42a0      	cmp	r0, r4
 8006b4e:	d10b      	bne.n	8006b68 <_free_r+0x6c>
 8006b50:	6820      	ldr	r0, [r4, #0]
 8006b52:	4401      	add	r1, r0
 8006b54:	1850      	adds	r0, r2, r1
 8006b56:	4283      	cmp	r3, r0
 8006b58:	6011      	str	r1, [r2, #0]
 8006b5a:	d1e0      	bne.n	8006b1e <_free_r+0x22>
 8006b5c:	6818      	ldr	r0, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	6053      	str	r3, [r2, #4]
 8006b62:	4408      	add	r0, r1
 8006b64:	6010      	str	r0, [r2, #0]
 8006b66:	e7da      	b.n	8006b1e <_free_r+0x22>
 8006b68:	d902      	bls.n	8006b70 <_free_r+0x74>
 8006b6a:	230c      	movs	r3, #12
 8006b6c:	602b      	str	r3, [r5, #0]
 8006b6e:	e7d6      	b.n	8006b1e <_free_r+0x22>
 8006b70:	6820      	ldr	r0, [r4, #0]
 8006b72:	1821      	adds	r1, r4, r0
 8006b74:	428b      	cmp	r3, r1
 8006b76:	bf04      	itt	eq
 8006b78:	6819      	ldreq	r1, [r3, #0]
 8006b7a:	685b      	ldreq	r3, [r3, #4]
 8006b7c:	6063      	str	r3, [r4, #4]
 8006b7e:	bf04      	itt	eq
 8006b80:	1809      	addeq	r1, r1, r0
 8006b82:	6021      	streq	r1, [r4, #0]
 8006b84:	6054      	str	r4, [r2, #4]
 8006b86:	e7ca      	b.n	8006b1e <_free_r+0x22>
 8006b88:	bd38      	pop	{r3, r4, r5, pc}
 8006b8a:	bf00      	nop
 8006b8c:	2000140c 	.word	0x2000140c

08006b90 <__ssputs_r>:
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	688e      	ldr	r6, [r1, #8]
 8006b96:	461f      	mov	r7, r3
 8006b98:	42be      	cmp	r6, r7
 8006b9a:	680b      	ldr	r3, [r1, #0]
 8006b9c:	4682      	mov	sl, r0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	4690      	mov	r8, r2
 8006ba2:	d82d      	bhi.n	8006c00 <__ssputs_r+0x70>
 8006ba4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ba8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bac:	d026      	beq.n	8006bfc <__ssputs_r+0x6c>
 8006bae:	6965      	ldr	r5, [r4, #20]
 8006bb0:	6909      	ldr	r1, [r1, #16]
 8006bb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bb6:	eba3 0901 	sub.w	r9, r3, r1
 8006bba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bbe:	1c7b      	adds	r3, r7, #1
 8006bc0:	444b      	add	r3, r9
 8006bc2:	106d      	asrs	r5, r5, #1
 8006bc4:	429d      	cmp	r5, r3
 8006bc6:	bf38      	it	cc
 8006bc8:	461d      	movcc	r5, r3
 8006bca:	0553      	lsls	r3, r2, #21
 8006bcc:	d527      	bpl.n	8006c1e <__ssputs_r+0x8e>
 8006bce:	4629      	mov	r1, r5
 8006bd0:	f7ff fb8a 	bl	80062e8 <_malloc_r>
 8006bd4:	4606      	mov	r6, r0
 8006bd6:	b360      	cbz	r0, 8006c32 <__ssputs_r+0xa2>
 8006bd8:	6921      	ldr	r1, [r4, #16]
 8006bda:	464a      	mov	r2, r9
 8006bdc:	f7ff ff61 	bl	8006aa2 <memcpy>
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bea:	81a3      	strh	r3, [r4, #12]
 8006bec:	6126      	str	r6, [r4, #16]
 8006bee:	6165      	str	r5, [r4, #20]
 8006bf0:	444e      	add	r6, r9
 8006bf2:	eba5 0509 	sub.w	r5, r5, r9
 8006bf6:	6026      	str	r6, [r4, #0]
 8006bf8:	60a5      	str	r5, [r4, #8]
 8006bfa:	463e      	mov	r6, r7
 8006bfc:	42be      	cmp	r6, r7
 8006bfe:	d900      	bls.n	8006c02 <__ssputs_r+0x72>
 8006c00:	463e      	mov	r6, r7
 8006c02:	6820      	ldr	r0, [r4, #0]
 8006c04:	4632      	mov	r2, r6
 8006c06:	4641      	mov	r1, r8
 8006c08:	f000 fd0a 	bl	8007620 <memmove>
 8006c0c:	68a3      	ldr	r3, [r4, #8]
 8006c0e:	1b9b      	subs	r3, r3, r6
 8006c10:	60a3      	str	r3, [r4, #8]
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	4433      	add	r3, r6
 8006c16:	6023      	str	r3, [r4, #0]
 8006c18:	2000      	movs	r0, #0
 8006c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1e:	462a      	mov	r2, r5
 8006c20:	f000 fd41 	bl	80076a6 <_realloc_r>
 8006c24:	4606      	mov	r6, r0
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d1e0      	bne.n	8006bec <__ssputs_r+0x5c>
 8006c2a:	6921      	ldr	r1, [r4, #16]
 8006c2c:	4650      	mov	r0, sl
 8006c2e:	f7ff ff65 	bl	8006afc <_free_r>
 8006c32:	230c      	movs	r3, #12
 8006c34:	f8ca 3000 	str.w	r3, [sl]
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c3e:	81a3      	strh	r3, [r4, #12]
 8006c40:	f04f 30ff 	mov.w	r0, #4294967295
 8006c44:	e7e9      	b.n	8006c1a <__ssputs_r+0x8a>
	...

08006c48 <_svfiprintf_r>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	4698      	mov	r8, r3
 8006c4e:	898b      	ldrh	r3, [r1, #12]
 8006c50:	061b      	lsls	r3, r3, #24
 8006c52:	b09d      	sub	sp, #116	@ 0x74
 8006c54:	4607      	mov	r7, r0
 8006c56:	460d      	mov	r5, r1
 8006c58:	4614      	mov	r4, r2
 8006c5a:	d510      	bpl.n	8006c7e <_svfiprintf_r+0x36>
 8006c5c:	690b      	ldr	r3, [r1, #16]
 8006c5e:	b973      	cbnz	r3, 8006c7e <_svfiprintf_r+0x36>
 8006c60:	2140      	movs	r1, #64	@ 0x40
 8006c62:	f7ff fb41 	bl	80062e8 <_malloc_r>
 8006c66:	6028      	str	r0, [r5, #0]
 8006c68:	6128      	str	r0, [r5, #16]
 8006c6a:	b930      	cbnz	r0, 8006c7a <_svfiprintf_r+0x32>
 8006c6c:	230c      	movs	r3, #12
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	f04f 30ff 	mov.w	r0, #4294967295
 8006c74:	b01d      	add	sp, #116	@ 0x74
 8006c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7a:	2340      	movs	r3, #64	@ 0x40
 8006c7c:	616b      	str	r3, [r5, #20]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c82:	2320      	movs	r3, #32
 8006c84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c88:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c8c:	2330      	movs	r3, #48	@ 0x30
 8006c8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006e2c <_svfiprintf_r+0x1e4>
 8006c92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c96:	f04f 0901 	mov.w	r9, #1
 8006c9a:	4623      	mov	r3, r4
 8006c9c:	469a      	mov	sl, r3
 8006c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ca2:	b10a      	cbz	r2, 8006ca8 <_svfiprintf_r+0x60>
 8006ca4:	2a25      	cmp	r2, #37	@ 0x25
 8006ca6:	d1f9      	bne.n	8006c9c <_svfiprintf_r+0x54>
 8006ca8:	ebba 0b04 	subs.w	fp, sl, r4
 8006cac:	d00b      	beq.n	8006cc6 <_svfiprintf_r+0x7e>
 8006cae:	465b      	mov	r3, fp
 8006cb0:	4622      	mov	r2, r4
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	f7ff ff6b 	bl	8006b90 <__ssputs_r>
 8006cba:	3001      	adds	r0, #1
 8006cbc:	f000 80a7 	beq.w	8006e0e <_svfiprintf_r+0x1c6>
 8006cc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cc2:	445a      	add	r2, fp
 8006cc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 809f 	beq.w	8006e0e <_svfiprintf_r+0x1c6>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cda:	f10a 0a01 	add.w	sl, sl, #1
 8006cde:	9304      	str	r3, [sp, #16]
 8006ce0:	9307      	str	r3, [sp, #28]
 8006ce2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ce6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ce8:	4654      	mov	r4, sl
 8006cea:	2205      	movs	r2, #5
 8006cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf0:	484e      	ldr	r0, [pc, #312]	@ (8006e2c <_svfiprintf_r+0x1e4>)
 8006cf2:	f7f9 fa8d 	bl	8000210 <memchr>
 8006cf6:	9a04      	ldr	r2, [sp, #16]
 8006cf8:	b9d8      	cbnz	r0, 8006d32 <_svfiprintf_r+0xea>
 8006cfa:	06d0      	lsls	r0, r2, #27
 8006cfc:	bf44      	itt	mi
 8006cfe:	2320      	movmi	r3, #32
 8006d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d04:	0711      	lsls	r1, r2, #28
 8006d06:	bf44      	itt	mi
 8006d08:	232b      	movmi	r3, #43	@ 0x2b
 8006d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d12:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d14:	d015      	beq.n	8006d42 <_svfiprintf_r+0xfa>
 8006d16:	9a07      	ldr	r2, [sp, #28]
 8006d18:	4654      	mov	r4, sl
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	f04f 0c0a 	mov.w	ip, #10
 8006d20:	4621      	mov	r1, r4
 8006d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d26:	3b30      	subs	r3, #48	@ 0x30
 8006d28:	2b09      	cmp	r3, #9
 8006d2a:	d94b      	bls.n	8006dc4 <_svfiprintf_r+0x17c>
 8006d2c:	b1b0      	cbz	r0, 8006d5c <_svfiprintf_r+0x114>
 8006d2e:	9207      	str	r2, [sp, #28]
 8006d30:	e014      	b.n	8006d5c <_svfiprintf_r+0x114>
 8006d32:	eba0 0308 	sub.w	r3, r0, r8
 8006d36:	fa09 f303 	lsl.w	r3, r9, r3
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	9304      	str	r3, [sp, #16]
 8006d3e:	46a2      	mov	sl, r4
 8006d40:	e7d2      	b.n	8006ce8 <_svfiprintf_r+0xa0>
 8006d42:	9b03      	ldr	r3, [sp, #12]
 8006d44:	1d19      	adds	r1, r3, #4
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	9103      	str	r1, [sp, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bfbb      	ittet	lt
 8006d4e:	425b      	neglt	r3, r3
 8006d50:	f042 0202 	orrlt.w	r2, r2, #2
 8006d54:	9307      	strge	r3, [sp, #28]
 8006d56:	9307      	strlt	r3, [sp, #28]
 8006d58:	bfb8      	it	lt
 8006d5a:	9204      	strlt	r2, [sp, #16]
 8006d5c:	7823      	ldrb	r3, [r4, #0]
 8006d5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d60:	d10a      	bne.n	8006d78 <_svfiprintf_r+0x130>
 8006d62:	7863      	ldrb	r3, [r4, #1]
 8006d64:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d66:	d132      	bne.n	8006dce <_svfiprintf_r+0x186>
 8006d68:	9b03      	ldr	r3, [sp, #12]
 8006d6a:	1d1a      	adds	r2, r3, #4
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	9203      	str	r2, [sp, #12]
 8006d70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d74:	3402      	adds	r4, #2
 8006d76:	9305      	str	r3, [sp, #20]
 8006d78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006e3c <_svfiprintf_r+0x1f4>
 8006d7c:	7821      	ldrb	r1, [r4, #0]
 8006d7e:	2203      	movs	r2, #3
 8006d80:	4650      	mov	r0, sl
 8006d82:	f7f9 fa45 	bl	8000210 <memchr>
 8006d86:	b138      	cbz	r0, 8006d98 <_svfiprintf_r+0x150>
 8006d88:	9b04      	ldr	r3, [sp, #16]
 8006d8a:	eba0 000a 	sub.w	r0, r0, sl
 8006d8e:	2240      	movs	r2, #64	@ 0x40
 8006d90:	4082      	lsls	r2, r0
 8006d92:	4313      	orrs	r3, r2
 8006d94:	3401      	adds	r4, #1
 8006d96:	9304      	str	r3, [sp, #16]
 8006d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d9c:	4824      	ldr	r0, [pc, #144]	@ (8006e30 <_svfiprintf_r+0x1e8>)
 8006d9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006da2:	2206      	movs	r2, #6
 8006da4:	f7f9 fa34 	bl	8000210 <memchr>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d036      	beq.n	8006e1a <_svfiprintf_r+0x1d2>
 8006dac:	4b21      	ldr	r3, [pc, #132]	@ (8006e34 <_svfiprintf_r+0x1ec>)
 8006dae:	bb1b      	cbnz	r3, 8006df8 <_svfiprintf_r+0x1b0>
 8006db0:	9b03      	ldr	r3, [sp, #12]
 8006db2:	3307      	adds	r3, #7
 8006db4:	f023 0307 	bic.w	r3, r3, #7
 8006db8:	3308      	adds	r3, #8
 8006dba:	9303      	str	r3, [sp, #12]
 8006dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dbe:	4433      	add	r3, r6
 8006dc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dc2:	e76a      	b.n	8006c9a <_svfiprintf_r+0x52>
 8006dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dc8:	460c      	mov	r4, r1
 8006dca:	2001      	movs	r0, #1
 8006dcc:	e7a8      	b.n	8006d20 <_svfiprintf_r+0xd8>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	3401      	adds	r4, #1
 8006dd2:	9305      	str	r3, [sp, #20]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	f04f 0c0a 	mov.w	ip, #10
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006de0:	3a30      	subs	r2, #48	@ 0x30
 8006de2:	2a09      	cmp	r2, #9
 8006de4:	d903      	bls.n	8006dee <_svfiprintf_r+0x1a6>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0c6      	beq.n	8006d78 <_svfiprintf_r+0x130>
 8006dea:	9105      	str	r1, [sp, #20]
 8006dec:	e7c4      	b.n	8006d78 <_svfiprintf_r+0x130>
 8006dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8006df2:	4604      	mov	r4, r0
 8006df4:	2301      	movs	r3, #1
 8006df6:	e7f0      	b.n	8006dda <_svfiprintf_r+0x192>
 8006df8:	ab03      	add	r3, sp, #12
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	462a      	mov	r2, r5
 8006dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8006e38 <_svfiprintf_r+0x1f0>)
 8006e00:	a904      	add	r1, sp, #16
 8006e02:	4638      	mov	r0, r7
 8006e04:	f3af 8000 	nop.w
 8006e08:	1c42      	adds	r2, r0, #1
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	d1d6      	bne.n	8006dbc <_svfiprintf_r+0x174>
 8006e0e:	89ab      	ldrh	r3, [r5, #12]
 8006e10:	065b      	lsls	r3, r3, #25
 8006e12:	f53f af2d 	bmi.w	8006c70 <_svfiprintf_r+0x28>
 8006e16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e18:	e72c      	b.n	8006c74 <_svfiprintf_r+0x2c>
 8006e1a:	ab03      	add	r3, sp, #12
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	462a      	mov	r2, r5
 8006e20:	4b05      	ldr	r3, [pc, #20]	@ (8006e38 <_svfiprintf_r+0x1f0>)
 8006e22:	a904      	add	r1, sp, #16
 8006e24:	4638      	mov	r0, r7
 8006e26:	f000 f9bb 	bl	80071a0 <_printf_i>
 8006e2a:	e7ed      	b.n	8006e08 <_svfiprintf_r+0x1c0>
 8006e2c:	080186e3 	.word	0x080186e3
 8006e30:	080186ed 	.word	0x080186ed
 8006e34:	00000000 	.word	0x00000000
 8006e38:	08006b91 	.word	0x08006b91
 8006e3c:	080186e9 	.word	0x080186e9

08006e40 <__sfputc_r>:
 8006e40:	6893      	ldr	r3, [r2, #8]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	b410      	push	{r4}
 8006e48:	6093      	str	r3, [r2, #8]
 8006e4a:	da08      	bge.n	8006e5e <__sfputc_r+0x1e>
 8006e4c:	6994      	ldr	r4, [r2, #24]
 8006e4e:	42a3      	cmp	r3, r4
 8006e50:	db01      	blt.n	8006e56 <__sfputc_r+0x16>
 8006e52:	290a      	cmp	r1, #10
 8006e54:	d103      	bne.n	8006e5e <__sfputc_r+0x1e>
 8006e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e5a:	f7ff bc66 	b.w	800672a <__swbuf_r>
 8006e5e:	6813      	ldr	r3, [r2, #0]
 8006e60:	1c58      	adds	r0, r3, #1
 8006e62:	6010      	str	r0, [r2, #0]
 8006e64:	7019      	strb	r1, [r3, #0]
 8006e66:	4608      	mov	r0, r1
 8006e68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <__sfputs_r>:
 8006e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e70:	4606      	mov	r6, r0
 8006e72:	460f      	mov	r7, r1
 8006e74:	4614      	mov	r4, r2
 8006e76:	18d5      	adds	r5, r2, r3
 8006e78:	42ac      	cmp	r4, r5
 8006e7a:	d101      	bne.n	8006e80 <__sfputs_r+0x12>
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	e007      	b.n	8006e90 <__sfputs_r+0x22>
 8006e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e84:	463a      	mov	r2, r7
 8006e86:	4630      	mov	r0, r6
 8006e88:	f7ff ffda 	bl	8006e40 <__sfputc_r>
 8006e8c:	1c43      	adds	r3, r0, #1
 8006e8e:	d1f3      	bne.n	8006e78 <__sfputs_r+0xa>
 8006e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e94 <_vfiprintf_r>:
 8006e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e98:	460d      	mov	r5, r1
 8006e9a:	b09d      	sub	sp, #116	@ 0x74
 8006e9c:	4614      	mov	r4, r2
 8006e9e:	4698      	mov	r8, r3
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	b118      	cbz	r0, 8006eac <_vfiprintf_r+0x18>
 8006ea4:	6a03      	ldr	r3, [r0, #32]
 8006ea6:	b90b      	cbnz	r3, 8006eac <_vfiprintf_r+0x18>
 8006ea8:	f7ff fb36 	bl	8006518 <__sinit>
 8006eac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006eae:	07d9      	lsls	r1, r3, #31
 8006eb0:	d405      	bmi.n	8006ebe <_vfiprintf_r+0x2a>
 8006eb2:	89ab      	ldrh	r3, [r5, #12]
 8006eb4:	059a      	lsls	r2, r3, #22
 8006eb6:	d402      	bmi.n	8006ebe <_vfiprintf_r+0x2a>
 8006eb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006eba:	f7ff fde8 	bl	8006a8e <__retarget_lock_acquire_recursive>
 8006ebe:	89ab      	ldrh	r3, [r5, #12]
 8006ec0:	071b      	lsls	r3, r3, #28
 8006ec2:	d501      	bpl.n	8006ec8 <_vfiprintf_r+0x34>
 8006ec4:	692b      	ldr	r3, [r5, #16]
 8006ec6:	b99b      	cbnz	r3, 8006ef0 <_vfiprintf_r+0x5c>
 8006ec8:	4629      	mov	r1, r5
 8006eca:	4630      	mov	r0, r6
 8006ecc:	f7ff fc6c 	bl	80067a8 <__swsetup_r>
 8006ed0:	b170      	cbz	r0, 8006ef0 <_vfiprintf_r+0x5c>
 8006ed2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ed4:	07dc      	lsls	r4, r3, #31
 8006ed6:	d504      	bpl.n	8006ee2 <_vfiprintf_r+0x4e>
 8006ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8006edc:	b01d      	add	sp, #116	@ 0x74
 8006ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee2:	89ab      	ldrh	r3, [r5, #12]
 8006ee4:	0598      	lsls	r0, r3, #22
 8006ee6:	d4f7      	bmi.n	8006ed8 <_vfiprintf_r+0x44>
 8006ee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006eea:	f7ff fdd1 	bl	8006a90 <__retarget_lock_release_recursive>
 8006eee:	e7f3      	b.n	8006ed8 <_vfiprintf_r+0x44>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ef4:	2320      	movs	r3, #32
 8006ef6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006efa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006efe:	2330      	movs	r3, #48	@ 0x30
 8006f00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80070b0 <_vfiprintf_r+0x21c>
 8006f04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f08:	f04f 0901 	mov.w	r9, #1
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	469a      	mov	sl, r3
 8006f10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f14:	b10a      	cbz	r2, 8006f1a <_vfiprintf_r+0x86>
 8006f16:	2a25      	cmp	r2, #37	@ 0x25
 8006f18:	d1f9      	bne.n	8006f0e <_vfiprintf_r+0x7a>
 8006f1a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f1e:	d00b      	beq.n	8006f38 <_vfiprintf_r+0xa4>
 8006f20:	465b      	mov	r3, fp
 8006f22:	4622      	mov	r2, r4
 8006f24:	4629      	mov	r1, r5
 8006f26:	4630      	mov	r0, r6
 8006f28:	f7ff ffa1 	bl	8006e6e <__sfputs_r>
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	f000 80a7 	beq.w	8007080 <_vfiprintf_r+0x1ec>
 8006f32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f34:	445a      	add	r2, fp
 8006f36:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f38:	f89a 3000 	ldrb.w	r3, [sl]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 809f 	beq.w	8007080 <_vfiprintf_r+0x1ec>
 8006f42:	2300      	movs	r3, #0
 8006f44:	f04f 32ff 	mov.w	r2, #4294967295
 8006f48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f4c:	f10a 0a01 	add.w	sl, sl, #1
 8006f50:	9304      	str	r3, [sp, #16]
 8006f52:	9307      	str	r3, [sp, #28]
 8006f54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f58:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f5a:	4654      	mov	r4, sl
 8006f5c:	2205      	movs	r2, #5
 8006f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f62:	4853      	ldr	r0, [pc, #332]	@ (80070b0 <_vfiprintf_r+0x21c>)
 8006f64:	f7f9 f954 	bl	8000210 <memchr>
 8006f68:	9a04      	ldr	r2, [sp, #16]
 8006f6a:	b9d8      	cbnz	r0, 8006fa4 <_vfiprintf_r+0x110>
 8006f6c:	06d1      	lsls	r1, r2, #27
 8006f6e:	bf44      	itt	mi
 8006f70:	2320      	movmi	r3, #32
 8006f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f76:	0713      	lsls	r3, r2, #28
 8006f78:	bf44      	itt	mi
 8006f7a:	232b      	movmi	r3, #43	@ 0x2b
 8006f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f80:	f89a 3000 	ldrb.w	r3, [sl]
 8006f84:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f86:	d015      	beq.n	8006fb4 <_vfiprintf_r+0x120>
 8006f88:	9a07      	ldr	r2, [sp, #28]
 8006f8a:	4654      	mov	r4, sl
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	f04f 0c0a 	mov.w	ip, #10
 8006f92:	4621      	mov	r1, r4
 8006f94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f98:	3b30      	subs	r3, #48	@ 0x30
 8006f9a:	2b09      	cmp	r3, #9
 8006f9c:	d94b      	bls.n	8007036 <_vfiprintf_r+0x1a2>
 8006f9e:	b1b0      	cbz	r0, 8006fce <_vfiprintf_r+0x13a>
 8006fa0:	9207      	str	r2, [sp, #28]
 8006fa2:	e014      	b.n	8006fce <_vfiprintf_r+0x13a>
 8006fa4:	eba0 0308 	sub.w	r3, r0, r8
 8006fa8:	fa09 f303 	lsl.w	r3, r9, r3
 8006fac:	4313      	orrs	r3, r2
 8006fae:	9304      	str	r3, [sp, #16]
 8006fb0:	46a2      	mov	sl, r4
 8006fb2:	e7d2      	b.n	8006f5a <_vfiprintf_r+0xc6>
 8006fb4:	9b03      	ldr	r3, [sp, #12]
 8006fb6:	1d19      	adds	r1, r3, #4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	9103      	str	r1, [sp, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	bfbb      	ittet	lt
 8006fc0:	425b      	neglt	r3, r3
 8006fc2:	f042 0202 	orrlt.w	r2, r2, #2
 8006fc6:	9307      	strge	r3, [sp, #28]
 8006fc8:	9307      	strlt	r3, [sp, #28]
 8006fca:	bfb8      	it	lt
 8006fcc:	9204      	strlt	r2, [sp, #16]
 8006fce:	7823      	ldrb	r3, [r4, #0]
 8006fd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fd2:	d10a      	bne.n	8006fea <_vfiprintf_r+0x156>
 8006fd4:	7863      	ldrb	r3, [r4, #1]
 8006fd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fd8:	d132      	bne.n	8007040 <_vfiprintf_r+0x1ac>
 8006fda:	9b03      	ldr	r3, [sp, #12]
 8006fdc:	1d1a      	adds	r2, r3, #4
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	9203      	str	r2, [sp, #12]
 8006fe2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006fe6:	3402      	adds	r4, #2
 8006fe8:	9305      	str	r3, [sp, #20]
 8006fea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80070c0 <_vfiprintf_r+0x22c>
 8006fee:	7821      	ldrb	r1, [r4, #0]
 8006ff0:	2203      	movs	r2, #3
 8006ff2:	4650      	mov	r0, sl
 8006ff4:	f7f9 f90c 	bl	8000210 <memchr>
 8006ff8:	b138      	cbz	r0, 800700a <_vfiprintf_r+0x176>
 8006ffa:	9b04      	ldr	r3, [sp, #16]
 8006ffc:	eba0 000a 	sub.w	r0, r0, sl
 8007000:	2240      	movs	r2, #64	@ 0x40
 8007002:	4082      	lsls	r2, r0
 8007004:	4313      	orrs	r3, r2
 8007006:	3401      	adds	r4, #1
 8007008:	9304      	str	r3, [sp, #16]
 800700a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800700e:	4829      	ldr	r0, [pc, #164]	@ (80070b4 <_vfiprintf_r+0x220>)
 8007010:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007014:	2206      	movs	r2, #6
 8007016:	f7f9 f8fb 	bl	8000210 <memchr>
 800701a:	2800      	cmp	r0, #0
 800701c:	d03f      	beq.n	800709e <_vfiprintf_r+0x20a>
 800701e:	4b26      	ldr	r3, [pc, #152]	@ (80070b8 <_vfiprintf_r+0x224>)
 8007020:	bb1b      	cbnz	r3, 800706a <_vfiprintf_r+0x1d6>
 8007022:	9b03      	ldr	r3, [sp, #12]
 8007024:	3307      	adds	r3, #7
 8007026:	f023 0307 	bic.w	r3, r3, #7
 800702a:	3308      	adds	r3, #8
 800702c:	9303      	str	r3, [sp, #12]
 800702e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007030:	443b      	add	r3, r7
 8007032:	9309      	str	r3, [sp, #36]	@ 0x24
 8007034:	e76a      	b.n	8006f0c <_vfiprintf_r+0x78>
 8007036:	fb0c 3202 	mla	r2, ip, r2, r3
 800703a:	460c      	mov	r4, r1
 800703c:	2001      	movs	r0, #1
 800703e:	e7a8      	b.n	8006f92 <_vfiprintf_r+0xfe>
 8007040:	2300      	movs	r3, #0
 8007042:	3401      	adds	r4, #1
 8007044:	9305      	str	r3, [sp, #20]
 8007046:	4619      	mov	r1, r3
 8007048:	f04f 0c0a 	mov.w	ip, #10
 800704c:	4620      	mov	r0, r4
 800704e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007052:	3a30      	subs	r2, #48	@ 0x30
 8007054:	2a09      	cmp	r2, #9
 8007056:	d903      	bls.n	8007060 <_vfiprintf_r+0x1cc>
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0c6      	beq.n	8006fea <_vfiprintf_r+0x156>
 800705c:	9105      	str	r1, [sp, #20]
 800705e:	e7c4      	b.n	8006fea <_vfiprintf_r+0x156>
 8007060:	fb0c 2101 	mla	r1, ip, r1, r2
 8007064:	4604      	mov	r4, r0
 8007066:	2301      	movs	r3, #1
 8007068:	e7f0      	b.n	800704c <_vfiprintf_r+0x1b8>
 800706a:	ab03      	add	r3, sp, #12
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	462a      	mov	r2, r5
 8007070:	4b12      	ldr	r3, [pc, #72]	@ (80070bc <_vfiprintf_r+0x228>)
 8007072:	a904      	add	r1, sp, #16
 8007074:	4630      	mov	r0, r6
 8007076:	f3af 8000 	nop.w
 800707a:	4607      	mov	r7, r0
 800707c:	1c78      	adds	r0, r7, #1
 800707e:	d1d6      	bne.n	800702e <_vfiprintf_r+0x19a>
 8007080:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007082:	07d9      	lsls	r1, r3, #31
 8007084:	d405      	bmi.n	8007092 <_vfiprintf_r+0x1fe>
 8007086:	89ab      	ldrh	r3, [r5, #12]
 8007088:	059a      	lsls	r2, r3, #22
 800708a:	d402      	bmi.n	8007092 <_vfiprintf_r+0x1fe>
 800708c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800708e:	f7ff fcff 	bl	8006a90 <__retarget_lock_release_recursive>
 8007092:	89ab      	ldrh	r3, [r5, #12]
 8007094:	065b      	lsls	r3, r3, #25
 8007096:	f53f af1f 	bmi.w	8006ed8 <_vfiprintf_r+0x44>
 800709a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800709c:	e71e      	b.n	8006edc <_vfiprintf_r+0x48>
 800709e:	ab03      	add	r3, sp, #12
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	462a      	mov	r2, r5
 80070a4:	4b05      	ldr	r3, [pc, #20]	@ (80070bc <_vfiprintf_r+0x228>)
 80070a6:	a904      	add	r1, sp, #16
 80070a8:	4630      	mov	r0, r6
 80070aa:	f000 f879 	bl	80071a0 <_printf_i>
 80070ae:	e7e4      	b.n	800707a <_vfiprintf_r+0x1e6>
 80070b0:	080186e3 	.word	0x080186e3
 80070b4:	080186ed 	.word	0x080186ed
 80070b8:	00000000 	.word	0x00000000
 80070bc:	08006e6f 	.word	0x08006e6f
 80070c0:	080186e9 	.word	0x080186e9

080070c4 <_printf_common>:
 80070c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c8:	4616      	mov	r6, r2
 80070ca:	4698      	mov	r8, r3
 80070cc:	688a      	ldr	r2, [r1, #8]
 80070ce:	690b      	ldr	r3, [r1, #16]
 80070d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070d4:	4293      	cmp	r3, r2
 80070d6:	bfb8      	it	lt
 80070d8:	4613      	movlt	r3, r2
 80070da:	6033      	str	r3, [r6, #0]
 80070dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80070e0:	4607      	mov	r7, r0
 80070e2:	460c      	mov	r4, r1
 80070e4:	b10a      	cbz	r2, 80070ea <_printf_common+0x26>
 80070e6:	3301      	adds	r3, #1
 80070e8:	6033      	str	r3, [r6, #0]
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	0699      	lsls	r1, r3, #26
 80070ee:	bf42      	ittt	mi
 80070f0:	6833      	ldrmi	r3, [r6, #0]
 80070f2:	3302      	addmi	r3, #2
 80070f4:	6033      	strmi	r3, [r6, #0]
 80070f6:	6825      	ldr	r5, [r4, #0]
 80070f8:	f015 0506 	ands.w	r5, r5, #6
 80070fc:	d106      	bne.n	800710c <_printf_common+0x48>
 80070fe:	f104 0a19 	add.w	sl, r4, #25
 8007102:	68e3      	ldr	r3, [r4, #12]
 8007104:	6832      	ldr	r2, [r6, #0]
 8007106:	1a9b      	subs	r3, r3, r2
 8007108:	42ab      	cmp	r3, r5
 800710a:	dc26      	bgt.n	800715a <_printf_common+0x96>
 800710c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007110:	6822      	ldr	r2, [r4, #0]
 8007112:	3b00      	subs	r3, #0
 8007114:	bf18      	it	ne
 8007116:	2301      	movne	r3, #1
 8007118:	0692      	lsls	r2, r2, #26
 800711a:	d42b      	bmi.n	8007174 <_printf_common+0xb0>
 800711c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007120:	4641      	mov	r1, r8
 8007122:	4638      	mov	r0, r7
 8007124:	47c8      	blx	r9
 8007126:	3001      	adds	r0, #1
 8007128:	d01e      	beq.n	8007168 <_printf_common+0xa4>
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	6922      	ldr	r2, [r4, #16]
 800712e:	f003 0306 	and.w	r3, r3, #6
 8007132:	2b04      	cmp	r3, #4
 8007134:	bf02      	ittt	eq
 8007136:	68e5      	ldreq	r5, [r4, #12]
 8007138:	6833      	ldreq	r3, [r6, #0]
 800713a:	1aed      	subeq	r5, r5, r3
 800713c:	68a3      	ldr	r3, [r4, #8]
 800713e:	bf0c      	ite	eq
 8007140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007144:	2500      	movne	r5, #0
 8007146:	4293      	cmp	r3, r2
 8007148:	bfc4      	itt	gt
 800714a:	1a9b      	subgt	r3, r3, r2
 800714c:	18ed      	addgt	r5, r5, r3
 800714e:	2600      	movs	r6, #0
 8007150:	341a      	adds	r4, #26
 8007152:	42b5      	cmp	r5, r6
 8007154:	d11a      	bne.n	800718c <_printf_common+0xc8>
 8007156:	2000      	movs	r0, #0
 8007158:	e008      	b.n	800716c <_printf_common+0xa8>
 800715a:	2301      	movs	r3, #1
 800715c:	4652      	mov	r2, sl
 800715e:	4641      	mov	r1, r8
 8007160:	4638      	mov	r0, r7
 8007162:	47c8      	blx	r9
 8007164:	3001      	adds	r0, #1
 8007166:	d103      	bne.n	8007170 <_printf_common+0xac>
 8007168:	f04f 30ff 	mov.w	r0, #4294967295
 800716c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007170:	3501      	adds	r5, #1
 8007172:	e7c6      	b.n	8007102 <_printf_common+0x3e>
 8007174:	18e1      	adds	r1, r4, r3
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	2030      	movs	r0, #48	@ 0x30
 800717a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800717e:	4422      	add	r2, r4
 8007180:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007184:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007188:	3302      	adds	r3, #2
 800718a:	e7c7      	b.n	800711c <_printf_common+0x58>
 800718c:	2301      	movs	r3, #1
 800718e:	4622      	mov	r2, r4
 8007190:	4641      	mov	r1, r8
 8007192:	4638      	mov	r0, r7
 8007194:	47c8      	blx	r9
 8007196:	3001      	adds	r0, #1
 8007198:	d0e6      	beq.n	8007168 <_printf_common+0xa4>
 800719a:	3601      	adds	r6, #1
 800719c:	e7d9      	b.n	8007152 <_printf_common+0x8e>
	...

080071a0 <_printf_i>:
 80071a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071a4:	7e0f      	ldrb	r7, [r1, #24]
 80071a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071a8:	2f78      	cmp	r7, #120	@ 0x78
 80071aa:	4691      	mov	r9, r2
 80071ac:	4680      	mov	r8, r0
 80071ae:	460c      	mov	r4, r1
 80071b0:	469a      	mov	sl, r3
 80071b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071b6:	d807      	bhi.n	80071c8 <_printf_i+0x28>
 80071b8:	2f62      	cmp	r7, #98	@ 0x62
 80071ba:	d80a      	bhi.n	80071d2 <_printf_i+0x32>
 80071bc:	2f00      	cmp	r7, #0
 80071be:	f000 80d2 	beq.w	8007366 <_printf_i+0x1c6>
 80071c2:	2f58      	cmp	r7, #88	@ 0x58
 80071c4:	f000 80b9 	beq.w	800733a <_printf_i+0x19a>
 80071c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071d0:	e03a      	b.n	8007248 <_printf_i+0xa8>
 80071d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80071d6:	2b15      	cmp	r3, #21
 80071d8:	d8f6      	bhi.n	80071c8 <_printf_i+0x28>
 80071da:	a101      	add	r1, pc, #4	@ (adr r1, 80071e0 <_printf_i+0x40>)
 80071dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071e0:	08007239 	.word	0x08007239
 80071e4:	0800724d 	.word	0x0800724d
 80071e8:	080071c9 	.word	0x080071c9
 80071ec:	080071c9 	.word	0x080071c9
 80071f0:	080071c9 	.word	0x080071c9
 80071f4:	080071c9 	.word	0x080071c9
 80071f8:	0800724d 	.word	0x0800724d
 80071fc:	080071c9 	.word	0x080071c9
 8007200:	080071c9 	.word	0x080071c9
 8007204:	080071c9 	.word	0x080071c9
 8007208:	080071c9 	.word	0x080071c9
 800720c:	0800734d 	.word	0x0800734d
 8007210:	08007277 	.word	0x08007277
 8007214:	08007307 	.word	0x08007307
 8007218:	080071c9 	.word	0x080071c9
 800721c:	080071c9 	.word	0x080071c9
 8007220:	0800736f 	.word	0x0800736f
 8007224:	080071c9 	.word	0x080071c9
 8007228:	08007277 	.word	0x08007277
 800722c:	080071c9 	.word	0x080071c9
 8007230:	080071c9 	.word	0x080071c9
 8007234:	0800730f 	.word	0x0800730f
 8007238:	6833      	ldr	r3, [r6, #0]
 800723a:	1d1a      	adds	r2, r3, #4
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6032      	str	r2, [r6, #0]
 8007240:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007244:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007248:	2301      	movs	r3, #1
 800724a:	e09d      	b.n	8007388 <_printf_i+0x1e8>
 800724c:	6833      	ldr	r3, [r6, #0]
 800724e:	6820      	ldr	r0, [r4, #0]
 8007250:	1d19      	adds	r1, r3, #4
 8007252:	6031      	str	r1, [r6, #0]
 8007254:	0606      	lsls	r6, r0, #24
 8007256:	d501      	bpl.n	800725c <_printf_i+0xbc>
 8007258:	681d      	ldr	r5, [r3, #0]
 800725a:	e003      	b.n	8007264 <_printf_i+0xc4>
 800725c:	0645      	lsls	r5, r0, #25
 800725e:	d5fb      	bpl.n	8007258 <_printf_i+0xb8>
 8007260:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007264:	2d00      	cmp	r5, #0
 8007266:	da03      	bge.n	8007270 <_printf_i+0xd0>
 8007268:	232d      	movs	r3, #45	@ 0x2d
 800726a:	426d      	negs	r5, r5
 800726c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007270:	4859      	ldr	r0, [pc, #356]	@ (80073d8 <_printf_i+0x238>)
 8007272:	230a      	movs	r3, #10
 8007274:	e011      	b.n	800729a <_printf_i+0xfa>
 8007276:	6821      	ldr	r1, [r4, #0]
 8007278:	6833      	ldr	r3, [r6, #0]
 800727a:	0608      	lsls	r0, r1, #24
 800727c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007280:	d402      	bmi.n	8007288 <_printf_i+0xe8>
 8007282:	0649      	lsls	r1, r1, #25
 8007284:	bf48      	it	mi
 8007286:	b2ad      	uxthmi	r5, r5
 8007288:	2f6f      	cmp	r7, #111	@ 0x6f
 800728a:	4853      	ldr	r0, [pc, #332]	@ (80073d8 <_printf_i+0x238>)
 800728c:	6033      	str	r3, [r6, #0]
 800728e:	bf14      	ite	ne
 8007290:	230a      	movne	r3, #10
 8007292:	2308      	moveq	r3, #8
 8007294:	2100      	movs	r1, #0
 8007296:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800729a:	6866      	ldr	r6, [r4, #4]
 800729c:	60a6      	str	r6, [r4, #8]
 800729e:	2e00      	cmp	r6, #0
 80072a0:	bfa2      	ittt	ge
 80072a2:	6821      	ldrge	r1, [r4, #0]
 80072a4:	f021 0104 	bicge.w	r1, r1, #4
 80072a8:	6021      	strge	r1, [r4, #0]
 80072aa:	b90d      	cbnz	r5, 80072b0 <_printf_i+0x110>
 80072ac:	2e00      	cmp	r6, #0
 80072ae:	d04b      	beq.n	8007348 <_printf_i+0x1a8>
 80072b0:	4616      	mov	r6, r2
 80072b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80072b6:	fb03 5711 	mls	r7, r3, r1, r5
 80072ba:	5dc7      	ldrb	r7, [r0, r7]
 80072bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072c0:	462f      	mov	r7, r5
 80072c2:	42bb      	cmp	r3, r7
 80072c4:	460d      	mov	r5, r1
 80072c6:	d9f4      	bls.n	80072b2 <_printf_i+0x112>
 80072c8:	2b08      	cmp	r3, #8
 80072ca:	d10b      	bne.n	80072e4 <_printf_i+0x144>
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	07df      	lsls	r7, r3, #31
 80072d0:	d508      	bpl.n	80072e4 <_printf_i+0x144>
 80072d2:	6923      	ldr	r3, [r4, #16]
 80072d4:	6861      	ldr	r1, [r4, #4]
 80072d6:	4299      	cmp	r1, r3
 80072d8:	bfde      	ittt	le
 80072da:	2330      	movle	r3, #48	@ 0x30
 80072dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072e4:	1b92      	subs	r2, r2, r6
 80072e6:	6122      	str	r2, [r4, #16]
 80072e8:	f8cd a000 	str.w	sl, [sp]
 80072ec:	464b      	mov	r3, r9
 80072ee:	aa03      	add	r2, sp, #12
 80072f0:	4621      	mov	r1, r4
 80072f2:	4640      	mov	r0, r8
 80072f4:	f7ff fee6 	bl	80070c4 <_printf_common>
 80072f8:	3001      	adds	r0, #1
 80072fa:	d14a      	bne.n	8007392 <_printf_i+0x1f2>
 80072fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007300:	b004      	add	sp, #16
 8007302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	f043 0320 	orr.w	r3, r3, #32
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	4833      	ldr	r0, [pc, #204]	@ (80073dc <_printf_i+0x23c>)
 8007310:	2778      	movs	r7, #120	@ 0x78
 8007312:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	6831      	ldr	r1, [r6, #0]
 800731a:	061f      	lsls	r7, r3, #24
 800731c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007320:	d402      	bmi.n	8007328 <_printf_i+0x188>
 8007322:	065f      	lsls	r7, r3, #25
 8007324:	bf48      	it	mi
 8007326:	b2ad      	uxthmi	r5, r5
 8007328:	6031      	str	r1, [r6, #0]
 800732a:	07d9      	lsls	r1, r3, #31
 800732c:	bf44      	itt	mi
 800732e:	f043 0320 	orrmi.w	r3, r3, #32
 8007332:	6023      	strmi	r3, [r4, #0]
 8007334:	b11d      	cbz	r5, 800733e <_printf_i+0x19e>
 8007336:	2310      	movs	r3, #16
 8007338:	e7ac      	b.n	8007294 <_printf_i+0xf4>
 800733a:	4827      	ldr	r0, [pc, #156]	@ (80073d8 <_printf_i+0x238>)
 800733c:	e7e9      	b.n	8007312 <_printf_i+0x172>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	f023 0320 	bic.w	r3, r3, #32
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	e7f6      	b.n	8007336 <_printf_i+0x196>
 8007348:	4616      	mov	r6, r2
 800734a:	e7bd      	b.n	80072c8 <_printf_i+0x128>
 800734c:	6833      	ldr	r3, [r6, #0]
 800734e:	6825      	ldr	r5, [r4, #0]
 8007350:	6961      	ldr	r1, [r4, #20]
 8007352:	1d18      	adds	r0, r3, #4
 8007354:	6030      	str	r0, [r6, #0]
 8007356:	062e      	lsls	r6, r5, #24
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	d501      	bpl.n	8007360 <_printf_i+0x1c0>
 800735c:	6019      	str	r1, [r3, #0]
 800735e:	e002      	b.n	8007366 <_printf_i+0x1c6>
 8007360:	0668      	lsls	r0, r5, #25
 8007362:	d5fb      	bpl.n	800735c <_printf_i+0x1bc>
 8007364:	8019      	strh	r1, [r3, #0]
 8007366:	2300      	movs	r3, #0
 8007368:	6123      	str	r3, [r4, #16]
 800736a:	4616      	mov	r6, r2
 800736c:	e7bc      	b.n	80072e8 <_printf_i+0x148>
 800736e:	6833      	ldr	r3, [r6, #0]
 8007370:	1d1a      	adds	r2, r3, #4
 8007372:	6032      	str	r2, [r6, #0]
 8007374:	681e      	ldr	r6, [r3, #0]
 8007376:	6862      	ldr	r2, [r4, #4]
 8007378:	2100      	movs	r1, #0
 800737a:	4630      	mov	r0, r6
 800737c:	f7f8 ff48 	bl	8000210 <memchr>
 8007380:	b108      	cbz	r0, 8007386 <_printf_i+0x1e6>
 8007382:	1b80      	subs	r0, r0, r6
 8007384:	6060      	str	r0, [r4, #4]
 8007386:	6863      	ldr	r3, [r4, #4]
 8007388:	6123      	str	r3, [r4, #16]
 800738a:	2300      	movs	r3, #0
 800738c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007390:	e7aa      	b.n	80072e8 <_printf_i+0x148>
 8007392:	6923      	ldr	r3, [r4, #16]
 8007394:	4632      	mov	r2, r6
 8007396:	4649      	mov	r1, r9
 8007398:	4640      	mov	r0, r8
 800739a:	47d0      	blx	sl
 800739c:	3001      	adds	r0, #1
 800739e:	d0ad      	beq.n	80072fc <_printf_i+0x15c>
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	079b      	lsls	r3, r3, #30
 80073a4:	d413      	bmi.n	80073ce <_printf_i+0x22e>
 80073a6:	68e0      	ldr	r0, [r4, #12]
 80073a8:	9b03      	ldr	r3, [sp, #12]
 80073aa:	4298      	cmp	r0, r3
 80073ac:	bfb8      	it	lt
 80073ae:	4618      	movlt	r0, r3
 80073b0:	e7a6      	b.n	8007300 <_printf_i+0x160>
 80073b2:	2301      	movs	r3, #1
 80073b4:	4632      	mov	r2, r6
 80073b6:	4649      	mov	r1, r9
 80073b8:	4640      	mov	r0, r8
 80073ba:	47d0      	blx	sl
 80073bc:	3001      	adds	r0, #1
 80073be:	d09d      	beq.n	80072fc <_printf_i+0x15c>
 80073c0:	3501      	adds	r5, #1
 80073c2:	68e3      	ldr	r3, [r4, #12]
 80073c4:	9903      	ldr	r1, [sp, #12]
 80073c6:	1a5b      	subs	r3, r3, r1
 80073c8:	42ab      	cmp	r3, r5
 80073ca:	dcf2      	bgt.n	80073b2 <_printf_i+0x212>
 80073cc:	e7eb      	b.n	80073a6 <_printf_i+0x206>
 80073ce:	2500      	movs	r5, #0
 80073d0:	f104 0619 	add.w	r6, r4, #25
 80073d4:	e7f5      	b.n	80073c2 <_printf_i+0x222>
 80073d6:	bf00      	nop
 80073d8:	080186f4 	.word	0x080186f4
 80073dc:	08018705 	.word	0x08018705

080073e0 <__sflush_r>:
 80073e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e8:	0716      	lsls	r6, r2, #28
 80073ea:	4605      	mov	r5, r0
 80073ec:	460c      	mov	r4, r1
 80073ee:	d454      	bmi.n	800749a <__sflush_r+0xba>
 80073f0:	684b      	ldr	r3, [r1, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	dc02      	bgt.n	80073fc <__sflush_r+0x1c>
 80073f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	dd48      	ble.n	800748e <__sflush_r+0xae>
 80073fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073fe:	2e00      	cmp	r6, #0
 8007400:	d045      	beq.n	800748e <__sflush_r+0xae>
 8007402:	2300      	movs	r3, #0
 8007404:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007408:	682f      	ldr	r7, [r5, #0]
 800740a:	6a21      	ldr	r1, [r4, #32]
 800740c:	602b      	str	r3, [r5, #0]
 800740e:	d030      	beq.n	8007472 <__sflush_r+0x92>
 8007410:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007412:	89a3      	ldrh	r3, [r4, #12]
 8007414:	0759      	lsls	r1, r3, #29
 8007416:	d505      	bpl.n	8007424 <__sflush_r+0x44>
 8007418:	6863      	ldr	r3, [r4, #4]
 800741a:	1ad2      	subs	r2, r2, r3
 800741c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800741e:	b10b      	cbz	r3, 8007424 <__sflush_r+0x44>
 8007420:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007422:	1ad2      	subs	r2, r2, r3
 8007424:	2300      	movs	r3, #0
 8007426:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007428:	6a21      	ldr	r1, [r4, #32]
 800742a:	4628      	mov	r0, r5
 800742c:	47b0      	blx	r6
 800742e:	1c43      	adds	r3, r0, #1
 8007430:	89a3      	ldrh	r3, [r4, #12]
 8007432:	d106      	bne.n	8007442 <__sflush_r+0x62>
 8007434:	6829      	ldr	r1, [r5, #0]
 8007436:	291d      	cmp	r1, #29
 8007438:	d82b      	bhi.n	8007492 <__sflush_r+0xb2>
 800743a:	4a2a      	ldr	r2, [pc, #168]	@ (80074e4 <__sflush_r+0x104>)
 800743c:	410a      	asrs	r2, r1
 800743e:	07d6      	lsls	r6, r2, #31
 8007440:	d427      	bmi.n	8007492 <__sflush_r+0xb2>
 8007442:	2200      	movs	r2, #0
 8007444:	6062      	str	r2, [r4, #4]
 8007446:	04d9      	lsls	r1, r3, #19
 8007448:	6922      	ldr	r2, [r4, #16]
 800744a:	6022      	str	r2, [r4, #0]
 800744c:	d504      	bpl.n	8007458 <__sflush_r+0x78>
 800744e:	1c42      	adds	r2, r0, #1
 8007450:	d101      	bne.n	8007456 <__sflush_r+0x76>
 8007452:	682b      	ldr	r3, [r5, #0]
 8007454:	b903      	cbnz	r3, 8007458 <__sflush_r+0x78>
 8007456:	6560      	str	r0, [r4, #84]	@ 0x54
 8007458:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800745a:	602f      	str	r7, [r5, #0]
 800745c:	b1b9      	cbz	r1, 800748e <__sflush_r+0xae>
 800745e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007462:	4299      	cmp	r1, r3
 8007464:	d002      	beq.n	800746c <__sflush_r+0x8c>
 8007466:	4628      	mov	r0, r5
 8007468:	f7ff fb48 	bl	8006afc <_free_r>
 800746c:	2300      	movs	r3, #0
 800746e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007470:	e00d      	b.n	800748e <__sflush_r+0xae>
 8007472:	2301      	movs	r3, #1
 8007474:	4628      	mov	r0, r5
 8007476:	47b0      	blx	r6
 8007478:	4602      	mov	r2, r0
 800747a:	1c50      	adds	r0, r2, #1
 800747c:	d1c9      	bne.n	8007412 <__sflush_r+0x32>
 800747e:	682b      	ldr	r3, [r5, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0c6      	beq.n	8007412 <__sflush_r+0x32>
 8007484:	2b1d      	cmp	r3, #29
 8007486:	d001      	beq.n	800748c <__sflush_r+0xac>
 8007488:	2b16      	cmp	r3, #22
 800748a:	d11e      	bne.n	80074ca <__sflush_r+0xea>
 800748c:	602f      	str	r7, [r5, #0]
 800748e:	2000      	movs	r0, #0
 8007490:	e022      	b.n	80074d8 <__sflush_r+0xf8>
 8007492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007496:	b21b      	sxth	r3, r3
 8007498:	e01b      	b.n	80074d2 <__sflush_r+0xf2>
 800749a:	690f      	ldr	r7, [r1, #16]
 800749c:	2f00      	cmp	r7, #0
 800749e:	d0f6      	beq.n	800748e <__sflush_r+0xae>
 80074a0:	0793      	lsls	r3, r2, #30
 80074a2:	680e      	ldr	r6, [r1, #0]
 80074a4:	bf08      	it	eq
 80074a6:	694b      	ldreq	r3, [r1, #20]
 80074a8:	600f      	str	r7, [r1, #0]
 80074aa:	bf18      	it	ne
 80074ac:	2300      	movne	r3, #0
 80074ae:	eba6 0807 	sub.w	r8, r6, r7
 80074b2:	608b      	str	r3, [r1, #8]
 80074b4:	f1b8 0f00 	cmp.w	r8, #0
 80074b8:	dde9      	ble.n	800748e <__sflush_r+0xae>
 80074ba:	6a21      	ldr	r1, [r4, #32]
 80074bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80074be:	4643      	mov	r3, r8
 80074c0:	463a      	mov	r2, r7
 80074c2:	4628      	mov	r0, r5
 80074c4:	47b0      	blx	r6
 80074c6:	2800      	cmp	r0, #0
 80074c8:	dc08      	bgt.n	80074dc <__sflush_r+0xfc>
 80074ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074d2:	81a3      	strh	r3, [r4, #12]
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295
 80074d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074dc:	4407      	add	r7, r0
 80074de:	eba8 0800 	sub.w	r8, r8, r0
 80074e2:	e7e7      	b.n	80074b4 <__sflush_r+0xd4>
 80074e4:	dfbffffe 	.word	0xdfbffffe

080074e8 <_fflush_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	690b      	ldr	r3, [r1, #16]
 80074ec:	4605      	mov	r5, r0
 80074ee:	460c      	mov	r4, r1
 80074f0:	b913      	cbnz	r3, 80074f8 <_fflush_r+0x10>
 80074f2:	2500      	movs	r5, #0
 80074f4:	4628      	mov	r0, r5
 80074f6:	bd38      	pop	{r3, r4, r5, pc}
 80074f8:	b118      	cbz	r0, 8007502 <_fflush_r+0x1a>
 80074fa:	6a03      	ldr	r3, [r0, #32]
 80074fc:	b90b      	cbnz	r3, 8007502 <_fflush_r+0x1a>
 80074fe:	f7ff f80b 	bl	8006518 <__sinit>
 8007502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0f3      	beq.n	80074f2 <_fflush_r+0xa>
 800750a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800750c:	07d0      	lsls	r0, r2, #31
 800750e:	d404      	bmi.n	800751a <_fflush_r+0x32>
 8007510:	0599      	lsls	r1, r3, #22
 8007512:	d402      	bmi.n	800751a <_fflush_r+0x32>
 8007514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007516:	f7ff faba 	bl	8006a8e <__retarget_lock_acquire_recursive>
 800751a:	4628      	mov	r0, r5
 800751c:	4621      	mov	r1, r4
 800751e:	f7ff ff5f 	bl	80073e0 <__sflush_r>
 8007522:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007524:	07da      	lsls	r2, r3, #31
 8007526:	4605      	mov	r5, r0
 8007528:	d4e4      	bmi.n	80074f4 <_fflush_r+0xc>
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	059b      	lsls	r3, r3, #22
 800752e:	d4e1      	bmi.n	80074f4 <_fflush_r+0xc>
 8007530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007532:	f7ff faad 	bl	8006a90 <__retarget_lock_release_recursive>
 8007536:	e7dd      	b.n	80074f4 <_fflush_r+0xc>

08007538 <fiprintf>:
 8007538:	b40e      	push	{r1, r2, r3}
 800753a:	b503      	push	{r0, r1, lr}
 800753c:	4601      	mov	r1, r0
 800753e:	ab03      	add	r3, sp, #12
 8007540:	4805      	ldr	r0, [pc, #20]	@ (8007558 <fiprintf+0x20>)
 8007542:	f853 2b04 	ldr.w	r2, [r3], #4
 8007546:	6800      	ldr	r0, [r0, #0]
 8007548:	9301      	str	r3, [sp, #4]
 800754a:	f7ff fca3 	bl	8006e94 <_vfiprintf_r>
 800754e:	b002      	add	sp, #8
 8007550:	f85d eb04 	ldr.w	lr, [sp], #4
 8007554:	b003      	add	sp, #12
 8007556:	4770      	bx	lr
 8007558:	2000008c 	.word	0x2000008c

0800755c <__swhatbuf_r>:
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	460c      	mov	r4, r1
 8007560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007564:	2900      	cmp	r1, #0
 8007566:	b096      	sub	sp, #88	@ 0x58
 8007568:	4615      	mov	r5, r2
 800756a:	461e      	mov	r6, r3
 800756c:	da0d      	bge.n	800758a <__swhatbuf_r+0x2e>
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007574:	f04f 0100 	mov.w	r1, #0
 8007578:	bf14      	ite	ne
 800757a:	2340      	movne	r3, #64	@ 0x40
 800757c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007580:	2000      	movs	r0, #0
 8007582:	6031      	str	r1, [r6, #0]
 8007584:	602b      	str	r3, [r5, #0]
 8007586:	b016      	add	sp, #88	@ 0x58
 8007588:	bd70      	pop	{r4, r5, r6, pc}
 800758a:	466a      	mov	r2, sp
 800758c:	f000 f862 	bl	8007654 <_fstat_r>
 8007590:	2800      	cmp	r0, #0
 8007592:	dbec      	blt.n	800756e <__swhatbuf_r+0x12>
 8007594:	9901      	ldr	r1, [sp, #4]
 8007596:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800759a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800759e:	4259      	negs	r1, r3
 80075a0:	4159      	adcs	r1, r3
 80075a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075a6:	e7eb      	b.n	8007580 <__swhatbuf_r+0x24>

080075a8 <__smakebuf_r>:
 80075a8:	898b      	ldrh	r3, [r1, #12]
 80075aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075ac:	079d      	lsls	r5, r3, #30
 80075ae:	4606      	mov	r6, r0
 80075b0:	460c      	mov	r4, r1
 80075b2:	d507      	bpl.n	80075c4 <__smakebuf_r+0x1c>
 80075b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	6123      	str	r3, [r4, #16]
 80075bc:	2301      	movs	r3, #1
 80075be:	6163      	str	r3, [r4, #20]
 80075c0:	b003      	add	sp, #12
 80075c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075c4:	ab01      	add	r3, sp, #4
 80075c6:	466a      	mov	r2, sp
 80075c8:	f7ff ffc8 	bl	800755c <__swhatbuf_r>
 80075cc:	9f00      	ldr	r7, [sp, #0]
 80075ce:	4605      	mov	r5, r0
 80075d0:	4639      	mov	r1, r7
 80075d2:	4630      	mov	r0, r6
 80075d4:	f7fe fe88 	bl	80062e8 <_malloc_r>
 80075d8:	b948      	cbnz	r0, 80075ee <__smakebuf_r+0x46>
 80075da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075de:	059a      	lsls	r2, r3, #22
 80075e0:	d4ee      	bmi.n	80075c0 <__smakebuf_r+0x18>
 80075e2:	f023 0303 	bic.w	r3, r3, #3
 80075e6:	f043 0302 	orr.w	r3, r3, #2
 80075ea:	81a3      	strh	r3, [r4, #12]
 80075ec:	e7e2      	b.n	80075b4 <__smakebuf_r+0xc>
 80075ee:	89a3      	ldrh	r3, [r4, #12]
 80075f0:	6020      	str	r0, [r4, #0]
 80075f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075f6:	81a3      	strh	r3, [r4, #12]
 80075f8:	9b01      	ldr	r3, [sp, #4]
 80075fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075fe:	b15b      	cbz	r3, 8007618 <__smakebuf_r+0x70>
 8007600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007604:	4630      	mov	r0, r6
 8007606:	f000 f837 	bl	8007678 <_isatty_r>
 800760a:	b128      	cbz	r0, 8007618 <__smakebuf_r+0x70>
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	f023 0303 	bic.w	r3, r3, #3
 8007612:	f043 0301 	orr.w	r3, r3, #1
 8007616:	81a3      	strh	r3, [r4, #12]
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	431d      	orrs	r5, r3
 800761c:	81a5      	strh	r5, [r4, #12]
 800761e:	e7cf      	b.n	80075c0 <__smakebuf_r+0x18>

08007620 <memmove>:
 8007620:	4288      	cmp	r0, r1
 8007622:	b510      	push	{r4, lr}
 8007624:	eb01 0402 	add.w	r4, r1, r2
 8007628:	d902      	bls.n	8007630 <memmove+0x10>
 800762a:	4284      	cmp	r4, r0
 800762c:	4623      	mov	r3, r4
 800762e:	d807      	bhi.n	8007640 <memmove+0x20>
 8007630:	1e43      	subs	r3, r0, #1
 8007632:	42a1      	cmp	r1, r4
 8007634:	d008      	beq.n	8007648 <memmove+0x28>
 8007636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800763a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800763e:	e7f8      	b.n	8007632 <memmove+0x12>
 8007640:	4402      	add	r2, r0
 8007642:	4601      	mov	r1, r0
 8007644:	428a      	cmp	r2, r1
 8007646:	d100      	bne.n	800764a <memmove+0x2a>
 8007648:	bd10      	pop	{r4, pc}
 800764a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800764e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007652:	e7f7      	b.n	8007644 <memmove+0x24>

08007654 <_fstat_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4d07      	ldr	r5, [pc, #28]	@ (8007674 <_fstat_r+0x20>)
 8007658:	2300      	movs	r3, #0
 800765a:	4604      	mov	r4, r0
 800765c:	4608      	mov	r0, r1
 800765e:	4611      	mov	r1, r2
 8007660:	602b      	str	r3, [r5, #0]
 8007662:	f7f9 fc71 	bl	8000f48 <_fstat>
 8007666:	1c43      	adds	r3, r0, #1
 8007668:	d102      	bne.n	8007670 <_fstat_r+0x1c>
 800766a:	682b      	ldr	r3, [r5, #0]
 800766c:	b103      	cbz	r3, 8007670 <_fstat_r+0x1c>
 800766e:	6023      	str	r3, [r4, #0]
 8007670:	bd38      	pop	{r3, r4, r5, pc}
 8007672:	bf00      	nop
 8007674:	2000154c 	.word	0x2000154c

08007678 <_isatty_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	4d06      	ldr	r5, [pc, #24]	@ (8007694 <_isatty_r+0x1c>)
 800767c:	2300      	movs	r3, #0
 800767e:	4604      	mov	r4, r0
 8007680:	4608      	mov	r0, r1
 8007682:	602b      	str	r3, [r5, #0]
 8007684:	f7f9 fc70 	bl	8000f68 <_isatty>
 8007688:	1c43      	adds	r3, r0, #1
 800768a:	d102      	bne.n	8007692 <_isatty_r+0x1a>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	b103      	cbz	r3, 8007692 <_isatty_r+0x1a>
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	bd38      	pop	{r3, r4, r5, pc}
 8007694:	2000154c 	.word	0x2000154c

08007698 <abort>:
 8007698:	b508      	push	{r3, lr}
 800769a:	2006      	movs	r0, #6
 800769c:	f000 f85a 	bl	8007754 <raise>
 80076a0:	2001      	movs	r0, #1
 80076a2:	f7f9 fc01 	bl	8000ea8 <_exit>

080076a6 <_realloc_r>:
 80076a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076aa:	4680      	mov	r8, r0
 80076ac:	4615      	mov	r5, r2
 80076ae:	460c      	mov	r4, r1
 80076b0:	b921      	cbnz	r1, 80076bc <_realloc_r+0x16>
 80076b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b6:	4611      	mov	r1, r2
 80076b8:	f7fe be16 	b.w	80062e8 <_malloc_r>
 80076bc:	b92a      	cbnz	r2, 80076ca <_realloc_r+0x24>
 80076be:	f7ff fa1d 	bl	8006afc <_free_r>
 80076c2:	2400      	movs	r4, #0
 80076c4:	4620      	mov	r0, r4
 80076c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ca:	f000 f85f 	bl	800778c <_malloc_usable_size_r>
 80076ce:	4285      	cmp	r5, r0
 80076d0:	4606      	mov	r6, r0
 80076d2:	d802      	bhi.n	80076da <_realloc_r+0x34>
 80076d4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80076d8:	d8f4      	bhi.n	80076c4 <_realloc_r+0x1e>
 80076da:	4629      	mov	r1, r5
 80076dc:	4640      	mov	r0, r8
 80076de:	f7fe fe03 	bl	80062e8 <_malloc_r>
 80076e2:	4607      	mov	r7, r0
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d0ec      	beq.n	80076c2 <_realloc_r+0x1c>
 80076e8:	42b5      	cmp	r5, r6
 80076ea:	462a      	mov	r2, r5
 80076ec:	4621      	mov	r1, r4
 80076ee:	bf28      	it	cs
 80076f0:	4632      	movcs	r2, r6
 80076f2:	f7ff f9d6 	bl	8006aa2 <memcpy>
 80076f6:	4621      	mov	r1, r4
 80076f8:	4640      	mov	r0, r8
 80076fa:	f7ff f9ff 	bl	8006afc <_free_r>
 80076fe:	463c      	mov	r4, r7
 8007700:	e7e0      	b.n	80076c4 <_realloc_r+0x1e>

08007702 <_raise_r>:
 8007702:	291f      	cmp	r1, #31
 8007704:	b538      	push	{r3, r4, r5, lr}
 8007706:	4605      	mov	r5, r0
 8007708:	460c      	mov	r4, r1
 800770a:	d904      	bls.n	8007716 <_raise_r+0x14>
 800770c:	2316      	movs	r3, #22
 800770e:	6003      	str	r3, [r0, #0]
 8007710:	f04f 30ff 	mov.w	r0, #4294967295
 8007714:	bd38      	pop	{r3, r4, r5, pc}
 8007716:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007718:	b112      	cbz	r2, 8007720 <_raise_r+0x1e>
 800771a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800771e:	b94b      	cbnz	r3, 8007734 <_raise_r+0x32>
 8007720:	4628      	mov	r0, r5
 8007722:	f000 f831 	bl	8007788 <_getpid_r>
 8007726:	4622      	mov	r2, r4
 8007728:	4601      	mov	r1, r0
 800772a:	4628      	mov	r0, r5
 800772c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007730:	f000 b818 	b.w	8007764 <_kill_r>
 8007734:	2b01      	cmp	r3, #1
 8007736:	d00a      	beq.n	800774e <_raise_r+0x4c>
 8007738:	1c59      	adds	r1, r3, #1
 800773a:	d103      	bne.n	8007744 <_raise_r+0x42>
 800773c:	2316      	movs	r3, #22
 800773e:	6003      	str	r3, [r0, #0]
 8007740:	2001      	movs	r0, #1
 8007742:	e7e7      	b.n	8007714 <_raise_r+0x12>
 8007744:	2100      	movs	r1, #0
 8007746:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800774a:	4620      	mov	r0, r4
 800774c:	4798      	blx	r3
 800774e:	2000      	movs	r0, #0
 8007750:	e7e0      	b.n	8007714 <_raise_r+0x12>
	...

08007754 <raise>:
 8007754:	4b02      	ldr	r3, [pc, #8]	@ (8007760 <raise+0xc>)
 8007756:	4601      	mov	r1, r0
 8007758:	6818      	ldr	r0, [r3, #0]
 800775a:	f7ff bfd2 	b.w	8007702 <_raise_r>
 800775e:	bf00      	nop
 8007760:	2000008c 	.word	0x2000008c

08007764 <_kill_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	4d07      	ldr	r5, [pc, #28]	@ (8007784 <_kill_r+0x20>)
 8007768:	2300      	movs	r3, #0
 800776a:	4604      	mov	r4, r0
 800776c:	4608      	mov	r0, r1
 800776e:	4611      	mov	r1, r2
 8007770:	602b      	str	r3, [r5, #0]
 8007772:	f7f9 fb89 	bl	8000e88 <_kill>
 8007776:	1c43      	adds	r3, r0, #1
 8007778:	d102      	bne.n	8007780 <_kill_r+0x1c>
 800777a:	682b      	ldr	r3, [r5, #0]
 800777c:	b103      	cbz	r3, 8007780 <_kill_r+0x1c>
 800777e:	6023      	str	r3, [r4, #0]
 8007780:	bd38      	pop	{r3, r4, r5, pc}
 8007782:	bf00      	nop
 8007784:	2000154c 	.word	0x2000154c

08007788 <_getpid_r>:
 8007788:	f7f9 bb76 	b.w	8000e78 <_getpid>

0800778c <_malloc_usable_size_r>:
 800778c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007790:	1f18      	subs	r0, r3, #4
 8007792:	2b00      	cmp	r3, #0
 8007794:	bfbc      	itt	lt
 8007796:	580b      	ldrlt	r3, [r1, r0]
 8007798:	18c0      	addlt	r0, r0, r3
 800779a:	4770      	bx	lr

0800779c <_init>:
 800779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779e:	bf00      	nop
 80077a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a2:	bc08      	pop	{r3}
 80077a4:	469e      	mov	lr, r3
 80077a6:	4770      	bx	lr

080077a8 <_fini>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	bf00      	nop
 80077ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ae:	bc08      	pop	{r3}
 80077b0:	469e      	mov	lr, r3
 80077b2:	4770      	bx	lr
